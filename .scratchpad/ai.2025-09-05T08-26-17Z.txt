function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1142075768784514,0.9211883182575467,0.874530089746542,-0.6969227849455453,-0.7717691224987697,-0.02662180981293079,0.319903842946774,-1.3864437429749883,-0.6485688881889631,0.9427184784181063,-0.6140536789552835,0.5010612721300979,0.3650645347837915,1.6975005760780466,0.12213434989104635,0.17453056048879453],[-0.02396050818426733,-0.2579362452613463,-0.10644769551278434,0.5823774338370441,-1.567645375334032,0.20216488256777956,0.45431085768449975,0.07622204092409611,0.90806751417854,-0.056180848433917276,-0.6000574893105362,0.9567281080400403,-0.9493804907267749,-0.3166268627212244,0.2215851514117738,-1.3136992337425915],[1.044765902877985,0.8163727804644505,-0.09947478664203527,0.4605013897001596,-0.8860967490874903,0.700212252326775,0.34522879142693563,1.2835193233349145,-0.13161920576695532,0.2822817841476091,1.409206926027353,-0.8289591138134293,-0.6684768803052943,0.5367095404193188,-1.0396627917791494,-1.0135444435854035],[0.457528957685542,-0.6259013789457354,1.1277115152707236,0.5683872953064467,-1.2681604042649355,0.2733682372103497,0.5829688603605729,-0.4101574985769,-0.9381627036462484,-1.5839246977773347,0.7447268538470669,1.30918426528733,0.08987730080012231,0.15522466668088844,0.37683982587213793,-0.6831440322423905],[0.712771086424052,-0.6040026946480501,-0.6485667334004055,0.5065055515109553,0.35358976695973315,-0.5415788690615045,0.4907323886056433,0.014822163955461522,0.05065095324408868,-0.04424770809831276,0.5068652839862111,-0.6981463287910915,0.11065472950476571,0.6565663602492113,0.5120289421726666,-0.7996644202597798],[-1.3533289776820292,0.47804876456629153,0.22164481796887506,-0.14791744969638723,-0.28254550044470933,-0.06384926461666765,0.35713293511399635,-0.6984435659383829,0.5581858970471878,-0.20402649626726516,-1.0671765840713756,0.4704853703540288,-0.039439670281627474,1.313376433334917,-0.536457362989709,-1.115713596617208]]; const b1=[-0.7130724604923745,-0.47165281514230467,-0.9190733092493796,-0.5595571902223239,0.4257431137915984,-0.33938459017127126]; const W2=[[0.3068295911073011,-0.08732505113515548,-0.13723985138965575,0.21068650532092478,-1.2796115218603128,0.7622134472744776],[0.26263591884259735,0.17257387122765794,-0.3688856020367098,0.21023547211124788,-1.3582517844632402,-0.24798667580946873],[-0.5687766352376793,-0.43491797559847356,-0.3889633420171591,-0.7313986231575506,0.5301569660058745,-0.25054431869122307],[0.23552679727773979,0.6071945453815246,0.3954574368703037,0.6263731962548515,0.3949804321867747,-0.9477625506099264],[0.6153077912541033,-0.35599321845680926,-0.4566764626579949,0.6310624085525822,1.6789886690540223,-0.45571929444517323]]; const b2=[1.5144898953045998,0.8587178294256674,0.07151010803699295,0.000757987649649905,-0.1693903588096796];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.796364299951977,0.5864325782150119,-0.02612919911488938,-0.016156968384921838,0.3366022255538678,0.3171237852958645,0.04746586650178963,0.8458571322142279,-0.11323329420028137,0.03897918350406204,-0.17089273790422244,0.18146652853129233,0.18087690728199457,-1.1499730160240376,-0.8873234490001436,-0.3582296710493378],[-1.2109549558441126,-0.5480880445656106,1.1442296338838933,-0.6121503911806676,0.05246627260119209,-0.7701241909806011,-0.7345658649287247,1.210588478742243,1.0776463002168684,0.34140040970908553,-1.176399217765898,-0.4011537614927986,0.20109620549692217,1.4307197672533398,1.2587118595857791,-0.7350501394433315],[0.3824093226995764,-0.3397709504542583,0.1604440107155797,0.4983966003781003,0.2398514667242548,-0.9365685666403216,-0.13207549831661355,1.402290589635493,-0.25778998570831685,-0.825084130954298,-0.4932230467799317,0.011032199354257616,-1.8543481630621892,0.7571026419476894,0.12439618416310583,0.7987632659509325],[-0.016547108565259844,0.2168480570296595,1.4057754330565855,0.9928458315572526,-0.1693785079441004,0.0872671563780286,0.05943745204746418,1.0349281677015945,1.4212801505990886,0.2705824328406974,0.1590755084698834,-0.4176731237452608,0.32916880493000555,0.06066637121560903,-0.13225496717452392,-0.6910496402584555],[-2.888510876214597,2.6760150152288693,-0.7047617097254658,0.4416808115859934,-0.25068417233151474,0.7821739153444947,0.11989516116528831,0.8001624597967787,1.021036077829988,-0.639882500054337,0.4774335613804919,0.3051663344156082,-0.8342804127236909,-0.5583873269988928,-0.09611451282208316,0.1769152825978118],[-0.5236309769941395,-0.40801289031065957,0.28109229544037045,-0.16502586791862944,-0.8856321858605258,0.7983891810712537,-0.7551145530944865,1.7287033865717882,1.7213006527323853,-0.5076189160239072,0.20897052154499546,0.0173100492313597,-0.5184905251002753,0.17299305362788872,0.2848097254415987,0.08915909649192574]]; const b1=[-0.03535414073265144,0.6070457445525186,-0.39423301846789566,-0.18603379277209037,-0.15568320191812285,0.7223723082087249]; const W2=[[0.8092681059479903,-0.20745581607264152,0.46800861322317666,-0.3564262173653919,0.7475088746709658,-0.7236161765699086],[0.30262816462457387,0.4623961511592676,0.5248301840385402,0.7797342307154735,-0.31022557746571544,0.06824339509859084],[-0.0810140580971384,0.40453334564733623,-0.5473778587723075,0.06949713933770811,0.4455631380762778,0.7240809001820231],[0.3837469945313853,1.5850998978648767,-0.35596619508653293,1.4551399322613203,-0.47965020756244414,0.20184902108046318],[0.6969912216896142,-0.07040966031729808,-0.6685104852620938,0.47776799018723004,-0.8146082176117565,0.6661262997360393]]; const b2=[-0.5571425167062248,0.5725566163268658,1.2227158452611055,-0.20861900902633276,-0.24425833341375797];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1142075768784514,0.9211883182575467,0.874530089746542,-0.6969227849455453,-0.7717691224987697,-0.02662180981293079,0.319903842946774,-1.3864437429749883,-0.6485688881889631,0.9427184784181063,-0.6140536789552835,0.5010612721300979,0.3650645347837915,1.6975005760780466,0.12213434989104635,0.17453056048879453],[-0.02396050818426733,-0.2579362452613463,-0.10644769551278434,0.5823774338370441,-1.567645375334032,0.20216488256777956,0.45431085768449975,0.07622204092409611,0.90806751417854,-0.056180848433917276,-0.6000574893105362,0.9567281080400403,-0.9493804907267749,-0.3166268627212244,0.2215851514117738,-1.3136992337425915],[1.044765902877985,0.8163727804644505,-0.09947478664203527,0.4605013897001596,-0.8860967490874903,0.700212252326775,0.34522879142693563,1.2835193233349145,-0.13161920576695532,0.2822817841476091,1.409206926027353,-0.8289591138134293,-0.6684768803052943,0.5367095404193188,-1.0396627917791494,-1.0135444435854035],[0.457528957685542,-0.6259013789457354,1.1277115152707236,0.5683872953064467,-1.2681604042649355,0.2733682372103497,0.5829688603605729,-0.4101574985769,-0.9381627036462484,-1.5839246977773347,0.7447268538470669,1.30918426528733,0.08987730080012231,0.15522466668088844,0.37683982587213793,-0.6831440322423905],[0.712771086424052,-0.6040026946480501,-0.6485667334004055,0.5065055515109553,0.35358976695973315,-0.5415788690615045,0.4907323886056433,0.014822163955461522,0.05065095324408868,-0.04424770809831276,0.5068652839862111,-0.6981463287910915,0.11065472950476571,0.6565663602492113,0.5120289421726666,-0.7996644202597798],[-1.3533289776820292,0.47804876456629153,0.22164481796887506,-0.14791744969638723,-0.28254550044470933,-0.06384926461666765,0.35713293511399635,-0.6984435659383829,0.5581858970471878,-0.20402649626726516,-1.0671765840713756,0.4704853703540288,-0.039439670281627474,1.313376433334917,-0.536457362989709,-1.115713596617208]]; const b1=[-0.7130724604923745,-0.47165281514230467,-0.9190733092493796,-0.5595571902223239,0.4257431137915984,-0.33938459017127126]; const W2=[[0.3068295911073011,-0.08732505113515548,-0.13723985138965575,0.21068650532092478,-1.2796115218603128,0.7622134472744776],[0.26263591884259735,0.17257387122765794,-0.3688856020367098,0.21023547211124788,-1.3582517844632402,-0.24798667580946873],[-0.5687766352376793,-0.43491797559847356,-0.3889633420171591,-0.7313986231575506,0.5301569660058745,-0.25054431869122307],[0.23552679727773979,0.6071945453815246,0.3954574368703037,0.6263731962548515,0.3949804321867747,-0.9477625506099264],[0.6153077912541033,-0.35599321845680926,-0.4566764626579949,0.6310624085525822,1.6789886690540223,-0.45571929444517323]]; const b2=[1.5144898953045998,0.8587178294256674,0.07151010803699295,0.000757987649649905,-0.1693903588096796];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1142075768784514,0.9211883182575467,0.874530089746542,-0.6969227849455453,-0.7717691224987697,-0.02662180981293079,0.319903842946774,-1.3864437429749883,-0.6485688881889631,0.9427184784181063,-0.6140536789552835,0.5010612721300979,0.3650645347837915,1.6975005760780466,0.12213434989104635,0.17453056048879453],[-0.02396050818426733,-0.2579362452613463,-0.10644769551278434,0.5823774338370441,-1.567645375334032,0.20216488256777956,0.45431085768449975,0.07622204092409611,0.90806751417854,-0.056180848433917276,-0.6000574893105362,0.9567281080400403,-0.9493804907267749,-0.3166268627212244,0.2215851514117738,-1.3136992337425915],[1.044765902877985,0.8163727804644505,-0.09947478664203527,0.4605013897001596,-0.8860967490874903,0.700212252326775,0.34522879142693563,1.2835193233349145,-0.13161920576695532,0.2822817841476091,1.409206926027353,-0.8289591138134293,-0.6684768803052943,0.5367095404193188,-1.0396627917791494,-1.0135444435854035],[0.457528957685542,-0.6259013789457354,1.1277115152707236,0.5683872953064467,-1.2681604042649355,0.2733682372103497,0.5829688603605729,-0.4101574985769,-0.9381627036462484,-1.5839246977773347,0.7447268538470669,1.30918426528733,0.08987730080012231,0.15522466668088844,0.37683982587213793,-0.6831440322423905],[0.712771086424052,-0.6040026946480501,-0.6485667334004055,0.5065055515109553,0.35358976695973315,-0.5415788690615045,0.4907323886056433,0.014822163955461522,0.05065095324408868,-0.04424770809831276,0.5068652839862111,-0.6981463287910915,0.11065472950476571,0.6565663602492113,0.5120289421726666,-0.7996644202597798],[-1.3533289776820292,0.47804876456629153,0.22164481796887506,-0.14791744969638723,-0.28254550044470933,-0.06384926461666765,0.35713293511399635,-0.6984435659383829,0.5581858970471878,-0.20402649626726516,-1.0671765840713756,0.4704853703540288,-0.039439670281627474,1.313376433334917,-0.536457362989709,-1.115713596617208]]; const b1=[-0.7130724604923745,-0.47165281514230467,-0.9190733092493796,-0.5595571902223239,0.4257431137915984,-0.33938459017127126]; const W2=[[0.3068295911073011,-0.08732505113515548,-0.13723985138965575,0.21068650532092478,-1.2796115218603128,0.7622134472744776],[0.26263591884259735,0.17257387122765794,-0.3688856020367098,0.21023547211124788,-1.3582517844632402,-0.24798667580946873],[-0.5687766352376793,-0.43491797559847356,-0.3889633420171591,-0.7313986231575506,0.5301569660058745,-0.25054431869122307],[0.23552679727773979,0.6071945453815246,0.3954574368703037,0.6263731962548515,0.3949804321867747,-0.9477625506099264],[0.6153077912541033,-0.35599321845680926,-0.4566764626579949,0.6310624085525822,1.6789886690540223,-0.45571929444517323]]; const b2=[1.5144898953045998,0.8587178294256674,0.07151010803699295,0.000757987649649905,-0.1693903588096796];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.3701475481125757,0.8708371104791693,-0.46807061691734664,-0.2837548606047389,-0.08766031694910195,-0.4865543050574227,-0.6114223585464856,-1.12951799677212,-0.17903322852637352,-1.0403416491892725,-1.2420488604076902,-0.9407072404063931,-1.0191803253571359,1.29545285598637,0.06203096056998114,-0.3417151696794332],[1.0175144523815427,0.2324287249669578,-0.2436894760989208,-0.01937181459635369,-0.0014314248972246632,0.5333364549514653,-0.5335711145816414,-0.3305995803038563,0.639569286832845,-0.18985823434363522,0.6263822025651969,-0.01941361849022221,2.2847363083564773,0.39348668889856114,-1.2734269476240465,-0.7656057376336943],[0.29003951778272336,0.30801043137780615,-0.5763116836382149,0.9456064193847862,1.0474413629721018,-0.5682137543858266,-1.7191197840693893,0.21609189422133399,0.747824851378511,-0.06685207349210356,1.0139185284695913,0.5266867985970297,0.15093482453696247,0.8735410730734215,-0.011384221266213263,-0.18990075220350655],[-0.020365013804325878,-0.02558062186561512,-0.5218741332758546,0.46556995903431314,0.7785288305088561,-0.3327981122112378,-0.2786967747774058,1.225132125187776,0.2668034877167449,0.49079698247216996,-0.5863047365501697,1.3799076149423999,-1.097890445449355,-0.1551923548365576,0.9920406647982598,-0.2052186719938554],[-0.4114175087475904,0.3471844195996856,-0.3709570279791766,0.5871298866757365,1.1929449367096003,-0.4668721346166297,-0.5248369871686,-1.1750447630889886,-0.15970238124026234,1.7099069119180226,-0.21093735803068442,-0.37735088829994445,-0.5593423688600774,0.01794334397904044,-0.8202868258148198,-0.18953025121735118],[0.5349857631736707,-0.4330587910504436,0.37771667523731756,-0.00269996166161679,-1.7519293312139221,0.03531994168008431,1.2433131810104978,1.7722989590463214,0.5872770763572568,-0.43715520039174016,-0.8626512933902646,2.1654714425973793,-0.3177836292175763,-0.6421085304959089,0.34830273077761736,0.910325680332762]]; const b1=[0.47859074054798223,0.3189515347324967,-1.3965714309524033,-0.6106432541393155,0.9065225306216086,0.8230822366850639]; const W2=[[-0.27557508122755925,0.436765730382889,0.12443819127839469,-1.063596975748846,-0.267957859020299,-0.8112747236129789],[-0.08489813451547575,-0.7689680045032012,0.20664229995918684,1.3925119947733107,0.6588464495067393,-1.259762829344999],[1.440449535014098,0.25092807749442725,0.5117513887255832,-0.024580144512583113,0.22865962407031254,-0.6808356060104663],[-0.296036789976555,-1.0438699375857077,0.3699587302365146,-0.7166478132170868,-1.7209162723259366,0.04418319342373181],[-1.1171010540345172,-0.07737472983771874,0.17266302271224804,0.07469661844871892,1.4877303840969636,-0.22933404405811503]]; const b2=[-0.41956049123751,-0.2147539918127388,0.2814421594698704,0.5388439944872525,-1.0791125400063284];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1142075768784514,0.9211883182575467,0.874530089746542,-0.6969227849455453,-0.7717691224987697,-0.02662180981293079,0.319903842946774,-1.3864437429749883,-0.6485688881889631,0.9427184784181063,-0.6140536789552835,0.5010612721300979,0.3650645347837915,1.6975005760780466,0.12213434989104635,0.17453056048879453],[-0.02396050818426733,-0.2579362452613463,-0.10644769551278434,0.5823774338370441,-1.567645375334032,0.20216488256777956,0.45431085768449975,0.07622204092409611,0.90806751417854,-0.056180848433917276,-0.6000574893105362,0.9567281080400403,-0.9493804907267749,-0.3166268627212244,0.2215851514117738,-1.3136992337425915],[1.044765902877985,0.8163727804644505,-0.09947478664203527,0.4605013897001596,-0.8860967490874903,0.700212252326775,0.34522879142693563,1.2835193233349145,-0.13161920576695532,0.2822817841476091,1.409206926027353,-0.8289591138134293,-0.6684768803052943,0.5367095404193188,-1.0396627917791494,-1.0135444435854035],[0.457528957685542,-0.6259013789457354,1.1277115152707236,0.5683872953064467,-1.2681604042649355,0.2733682372103497,0.5829688603605729,-0.4101574985769,-0.9381627036462484,-1.5839246977773347,0.7447268538470669,1.30918426528733,0.08987730080012231,0.15522466668088844,0.37683982587213793,-0.6831440322423905],[0.712771086424052,-0.6040026946480501,-0.6485667334004055,0.5065055515109553,0.35358976695973315,-0.5415788690615045,0.4907323886056433,0.014822163955461522,0.05065095324408868,-0.04424770809831276,0.5068652839862111,-0.6981463287910915,0.11065472950476571,0.6565663602492113,0.5120289421726666,-0.7996644202597798],[-1.3533289776820292,0.47804876456629153,0.22164481796887506,-0.14791744969638723,-0.28254550044470933,-0.06384926461666765,0.35713293511399635,-0.6984435659383829,0.5581858970471878,-0.20402649626726516,-1.0671765840713756,0.4704853703540288,-0.039439670281627474,1.313376433334917,-0.536457362989709,-1.115713596617208]]; const b1=[-0.7130724604923745,-0.47165281514230467,-0.9190733092493796,-0.5595571902223239,0.4257431137915984,-0.33938459017127126]; const W2=[[0.3068295911073011,-0.08732505113515548,-0.13723985138965575,0.21068650532092478,-1.2796115218603128,0.7622134472744776],[0.26263591884259735,0.17257387122765794,-0.3688856020367098,0.21023547211124788,-1.3582517844632402,-0.24798667580946873],[-0.5687766352376793,-0.43491797559847356,-0.3889633420171591,-0.7313986231575506,0.5301569660058745,-0.25054431869122307],[0.23552679727773979,0.6071945453815246,0.3954574368703037,0.6263731962548515,0.3949804321867747,-0.9477625506099264],[0.6153077912541033,-0.35599321845680926,-0.4566764626579949,0.6310624085525822,1.6789886690540223,-0.45571929444517323]]; const b2=[1.5144898953045998,0.8587178294256674,0.07151010803699295,0.000757987649649905,-0.1693903588096796];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}