
function name(){return "Astra-T1";}
function type(){return Type.TANKER;}
// VM-persistent state per robot
let __state = { last:null, tick:0 };
function update(tank,enemies,allies,bulletInfo){
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const norm=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v;
  const hypot=Math.hypot;

  // Tunables (merged per profile and role)
  const P = {"healthWeight":1.25,"distWeight":0.12,"tieBias":0.0005,"leadCap":15,"leadWeight":1.08,"aimJitter":0.1,"aimBias":-0.27,"aimMul":0.45,"threatRadius":80,"threatHorizon":18,"threatFleeBias":14,"minRange":160,"maxRange":255,"strafeAngle":26,"allySep":62,"edgeMargin":44,"finishHP":24,"aggrRemain":4,"aggrTighten":30,"bias":-12};

  __state.tick = (__state.tick||0) + 1;

  // 1) Target selection: sort by health, then distance, then x+y for determinism
  let tgt=null; let best=1e18;
  for(const e of enemies){
    const k = e.health*P.healthWeight + e.distance*P.distWeight + (e.x+e.y)*P.tieBias;
    if(k<best){ best=k; tgt=e; }
  }

  // 2) Predictive aim with capped linear lead; slight index-based spread
  if(tgt){
    let aimX=tgt.x, aimY=tgt.y;
    if(__state.last && __state.last.x!==undefined){
      const vx=(tgt.x-__state.last.x);
      const vy=(tgt.y-__state.last.y);
      const dx=tgt.x-tank.x, dy=tgt.y-tank.y; const d=hypot(dx,dy);
      const tLead=clamp(d/8, 0, P.leadCap);
      aimX = tgt.x + vx*P.leadWeight*tLead;
      aimY = tgt.y + vy*P.leadWeight*tLead;
    }
    const jitter = (((tank.x*31+tank.y*17)%23)-11)*0.08 * P.aimJitter;
    const fireAngle = toDeg(aimX-tank.x, aimY-tank.y) + jitter + P.aimBias;
    tank.fire(fireAngle);
    __state.last = { x:tgt.x, y:tgt.y };
  }

  // Movement helper
  let tries=0; const tryMove=(a)=>{tries++; return tank.move(norm(a));};

  // 3) Bullet avoidance using nearest-approach + time-to-collision gate
  let hot=null; let minD=1e9; let eta=1e9;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=hypot(b.vx,b.vy)||1;
    const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny;
    if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const d=hypot(px-tank.x,py-tank.y);
      const ttc = proj/v; // ticks to closest point
      if(d<minD && d<P.threatRadius && ttc < P.threatHorizon){ minD=d; hot=b; eta=ttc; }
    }
  }
  if(hot){
    const a=toDeg(hot.vx,hot.vy);
    const sideBias = P.threatFleeBias + (P.aimBias*0.5);
    const cands=[a+90+sideBias, a-90-sideBias, a+120, a-120, a+70, a-70];
    for(const c of cands){ if(tryMove(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edgeMargin){ if(tryMove(0)) return; }
  if(tank.x > 900-P.edgeMargin){ if(tryMove(180)) return; }
  if(tank.y < P.edgeMargin){ if(tryMove(90)) return; }
  if(tank.y > 600-P.edgeMargin){ if(tryMove(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e9; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.allySep){
    const away = toDeg(tank.x-near.x, tank.y-near.y);
    if(tryMove(away)) return; if(tryMove(away+28)) return; if(tryMove(away-28)) return;
  }

  // 6) Engagement spacing + adaptive strafing
  if(tgt){
    const to = toDeg(tgt.x-tank.x, tgt.y-tank.y);
    const d = tgt.distance;
    let minR=P.minRange, maxR=P.maxRange;
    // tighten ring when target low or outnumbered
    if((tgt.health<=P.finishHP) || enemies.length<=P.aggrRemain){ minR-=P.aggrTighten; maxR-=P.aggrTighten*0.7; }
    if(d < minR){
      const away = to+180 + P.bias*0.4;
      if(tryMove(away)) return; if(tryMove(away+24)) return; if(tryMove(away-24)) return;
    } else if(d > maxR){
      if(tryMove(to)) return; if(tryMove(to+18)) return; if(tryMove(to-18)) return;
    } else {
      const side = to + (((tank.x*13+tank.y*7)|0)%2?P.strafeAngle:-P.strafeAngle) + P.bias*0.5;
      if(tryMove(side)) return; if(tryMove(side+18)) return; if(tryMove(side-18)) return;
    }
  }

  // 7) Fallback sweeping
  const sweep=[0,60,120,180,240,300];
  for(const s of sweep){ if(tryMove(s+P.bias)) return; }
}


// ===== 다음 로봇 =====


function name(){return "Astra-T2";}
function type(){return Type.TANKER;}
// VM-persistent state per robot
let __state = { last:null, tick:0 };
function update(tank,enemies,allies,bulletInfo){
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const norm=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v;
  const hypot=Math.hypot;

  // Tunables (merged per profile and role)
  const P = {"healthWeight":1.25,"distWeight":0.12,"tieBias":0.0005,"leadCap":15,"leadWeight":1.08,"aimJitter":0.1,"aimBias":0.27,"aimMul":0.45,"threatRadius":80,"threatHorizon":18,"threatFleeBias":14,"minRange":160,"maxRange":255,"strafeAngle":26,"allySep":62,"edgeMargin":44,"finishHP":24,"aggrRemain":4,"aggrTighten":30,"bias":12};

  __state.tick = (__state.tick||0) + 1;

  // 1) Target selection: sort by health, then distance, then x+y for determinism
  let tgt=null; let best=1e18;
  for(const e of enemies){
    const k = e.health*P.healthWeight + e.distance*P.distWeight + (e.x+e.y)*P.tieBias;
    if(k<best){ best=k; tgt=e; }
  }

  // 2) Predictive aim with capped linear lead; slight index-based spread
  if(tgt){
    let aimX=tgt.x, aimY=tgt.y;
    if(__state.last && __state.last.x!==undefined){
      const vx=(tgt.x-__state.last.x);
      const vy=(tgt.y-__state.last.y);
      const dx=tgt.x-tank.x, dy=tgt.y-tank.y; const d=hypot(dx,dy);
      const tLead=clamp(d/8, 0, P.leadCap);
      aimX = tgt.x + vx*P.leadWeight*tLead;
      aimY = tgt.y + vy*P.leadWeight*tLead;
    }
    const jitter = (((tank.x*31+tank.y*17)%23)-11)*0.08 * P.aimJitter;
    const fireAngle = toDeg(aimX-tank.x, aimY-tank.y) + jitter + P.aimBias;
    tank.fire(fireAngle);
    __state.last = { x:tgt.x, y:tgt.y };
  }

  // Movement helper
  let tries=0; const tryMove=(a)=>{tries++; return tank.move(norm(a));};

  // 3) Bullet avoidance using nearest-approach + time-to-collision gate
  let hot=null; let minD=1e9; let eta=1e9;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=hypot(b.vx,b.vy)||1;
    const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny;
    if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const d=hypot(px-tank.x,py-tank.y);
      const ttc = proj/v; // ticks to closest point
      if(d<minD && d<P.threatRadius && ttc < P.threatHorizon){ minD=d; hot=b; eta=ttc; }
    }
  }
  if(hot){
    const a=toDeg(hot.vx,hot.vy);
    const sideBias = P.threatFleeBias + (P.aimBias*0.5);
    const cands=[a+90+sideBias, a-90-sideBias, a+120, a-120, a+70, a-70];
    for(const c of cands){ if(tryMove(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edgeMargin){ if(tryMove(0)) return; }
  if(tank.x > 900-P.edgeMargin){ if(tryMove(180)) return; }
  if(tank.y < P.edgeMargin){ if(tryMove(90)) return; }
  if(tank.y > 600-P.edgeMargin){ if(tryMove(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e9; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.allySep){
    const away = toDeg(tank.x-near.x, tank.y-near.y);
    if(tryMove(away)) return; if(tryMove(away+28)) return; if(tryMove(away-28)) return;
  }

  // 6) Engagement spacing + adaptive strafing
  if(tgt){
    const to = toDeg(tgt.x-tank.x, tgt.y-tank.y);
    const d = tgt.distance;
    let minR=P.minRange, maxR=P.maxRange;
    // tighten ring when target low or outnumbered
    if((tgt.health<=P.finishHP) || enemies.length<=P.aggrRemain){ minR-=P.aggrTighten; maxR-=P.aggrTighten*0.7; }
    if(d < minR){
      const away = to+180 + P.bias*0.4;
      if(tryMove(away)) return; if(tryMove(away+24)) return; if(tryMove(away-24)) return;
    } else if(d > maxR){
      if(tryMove(to)) return; if(tryMove(to+18)) return; if(tryMove(to-18)) return;
    } else {
      const side = to + (((tank.x*13+tank.y*7)|0)%2?P.strafeAngle:-P.strafeAngle) + P.bias*0.5;
      if(tryMove(side)) return; if(tryMove(side+18)) return; if(tryMove(side-18)) return;
    }
  }

  // 7) Fallback sweeping
  const sweep=[0,60,120,180,240,300];
  for(const s of sweep){ if(tryMove(s+P.bias)) return; }
}


// ===== 다음 로봇 =====


function name(){return "Astra-D1";}
function type(){return Type.DEALER;}
// VM-persistent state per robot
let __state = { last:null, tick:0 };
function update(tank,enemies,allies,bulletInfo){
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const norm=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v;
  const hypot=Math.hypot;

  // Tunables (merged per profile and role)
  const P = {"healthWeight":1.25,"distWeight":0.12,"tieBias":0.0005,"leadCap":15,"leadWeight":1.08,"aimJitter":0.1,"aimBias":-0.1125,"aimMul":0.45,"threatRadius":80,"threatHorizon":18,"threatFleeBias":14,"minRange":225,"maxRange":335,"strafeAngle":34,"allySep":62,"edgeMargin":44,"finishHP":24,"aggrRemain":4,"aggrTighten":30,"bias":-6};

  __state.tick = (__state.tick||0) + 1;

  // 1) Target selection: sort by health, then distance, then x+y for determinism
  let tgt=null; let best=1e18;
  for(const e of enemies){
    const k = e.health*P.healthWeight + e.distance*P.distWeight + (e.x+e.y)*P.tieBias;
    if(k<best){ best=k; tgt=e; }
  }

  // 2) Predictive aim with capped linear lead; slight index-based spread
  if(tgt){
    let aimX=tgt.x, aimY=tgt.y;
    if(__state.last && __state.last.x!==undefined){
      const vx=(tgt.x-__state.last.x);
      const vy=(tgt.y-__state.last.y);
      const dx=tgt.x-tank.x, dy=tgt.y-tank.y; const d=hypot(dx,dy);
      const tLead=clamp(d/8, 0, P.leadCap);
      aimX = tgt.x + vx*P.leadWeight*tLead;
      aimY = tgt.y + vy*P.leadWeight*tLead;
    }
    const jitter = (((tank.x*31+tank.y*17)%23)-11)*0.08 * P.aimJitter;
    const fireAngle = toDeg(aimX-tank.x, aimY-tank.y) + jitter + P.aimBias;
    tank.fire(fireAngle);
    __state.last = { x:tgt.x, y:tgt.y };
  }

  // Movement helper
  let tries=0; const tryMove=(a)=>{tries++; return tank.move(norm(a));};

  // 3) Bullet avoidance using nearest-approach + time-to-collision gate
  let hot=null; let minD=1e9; let eta=1e9;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=hypot(b.vx,b.vy)||1;
    const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny;
    if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const d=hypot(px-tank.x,py-tank.y);
      const ttc = proj/v; // ticks to closest point
      if(d<minD && d<P.threatRadius && ttc < P.threatHorizon){ minD=d; hot=b; eta=ttc; }
    }
  }
  if(hot){
    const a=toDeg(hot.vx,hot.vy);
    const sideBias = P.threatFleeBias + (P.aimBias*0.5);
    const cands=[a+90+sideBias, a-90-sideBias, a+120, a-120, a+70, a-70];
    for(const c of cands){ if(tryMove(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edgeMargin){ if(tryMove(0)) return; }
  if(tank.x > 900-P.edgeMargin){ if(tryMove(180)) return; }
  if(tank.y < P.edgeMargin){ if(tryMove(90)) return; }
  if(tank.y > 600-P.edgeMargin){ if(tryMove(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e9; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.allySep){
    const away = toDeg(tank.x-near.x, tank.y-near.y);
    if(tryMove(away)) return; if(tryMove(away+28)) return; if(tryMove(away-28)) return;
  }

  // 6) Engagement spacing + adaptive strafing
  if(tgt){
    const to = toDeg(tgt.x-tank.x, tgt.y-tank.y);
    const d = tgt.distance;
    let minR=P.minRange, maxR=P.maxRange;
    // tighten ring when target low or outnumbered
    if((tgt.health<=P.finishHP) || enemies.length<=P.aggrRemain){ minR-=P.aggrTighten; maxR-=P.aggrTighten*0.7; }
    if(d < minR){
      const away = to+180 + P.bias*0.4;
      if(tryMove(away)) return; if(tryMove(away+24)) return; if(tryMove(away-24)) return;
    } else if(d > maxR){
      if(tryMove(to)) return; if(tryMove(to+18)) return; if(tryMove(to-18)) return;
    } else {
      const side = to + (((tank.x*13+tank.y*7)|0)%2?P.strafeAngle:-P.strafeAngle) + P.bias*0.5;
      if(tryMove(side)) return; if(tryMove(side+18)) return; if(tryMove(side-18)) return;
    }
  }

  // 7) Fallback sweeping
  const sweep=[0,60,120,180,240,300];
  for(const s of sweep){ if(tryMove(s+P.bias)) return; }
}


// ===== 다음 로봇 =====


function name(){return "Astra-D2";}
function type(){return Type.DEALER;}
// VM-persistent state per robot
let __state = { last:null, tick:0 };
function update(tank,enemies,allies,bulletInfo){
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const norm=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v;
  const hypot=Math.hypot;

  // Tunables (merged per profile and role)
  const P = {"healthWeight":1.25,"distWeight":0.12,"tieBias":0.0005,"leadCap":15,"leadWeight":1.08,"aimJitter":0.1,"aimBias":0.1125,"aimMul":0.45,"threatRadius":80,"threatHorizon":18,"threatFleeBias":14,"minRange":225,"maxRange":335,"strafeAngle":34,"allySep":62,"edgeMargin":44,"finishHP":24,"aggrRemain":4,"aggrTighten":30,"bias":6};

  __state.tick = (__state.tick||0) + 1;

  // 1) Target selection: sort by health, then distance, then x+y for determinism
  let tgt=null; let best=1e18;
  for(const e of enemies){
    const k = e.health*P.healthWeight + e.distance*P.distWeight + (e.x+e.y)*P.tieBias;
    if(k<best){ best=k; tgt=e; }
  }

  // 2) Predictive aim with capped linear lead; slight index-based spread
  if(tgt){
    let aimX=tgt.x, aimY=tgt.y;
    if(__state.last && __state.last.x!==undefined){
      const vx=(tgt.x-__state.last.x);
      const vy=(tgt.y-__state.last.y);
      const dx=tgt.x-tank.x, dy=tgt.y-tank.y; const d=hypot(dx,dy);
      const tLead=clamp(d/8, 0, P.leadCap);
      aimX = tgt.x + vx*P.leadWeight*tLead;
      aimY = tgt.y + vy*P.leadWeight*tLead;
    }
    const jitter = (((tank.x*31+tank.y*17)%23)-11)*0.08 * P.aimJitter;
    const fireAngle = toDeg(aimX-tank.x, aimY-tank.y) + jitter + P.aimBias;
    tank.fire(fireAngle);
    __state.last = { x:tgt.x, y:tgt.y };
  }

  // Movement helper
  let tries=0; const tryMove=(a)=>{tries++; return tank.move(norm(a));};

  // 3) Bullet avoidance using nearest-approach + time-to-collision gate
  let hot=null; let minD=1e9; let eta=1e9;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=hypot(b.vx,b.vy)||1;
    const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny;
    if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const d=hypot(px-tank.x,py-tank.y);
      const ttc = proj/v; // ticks to closest point
      if(d<minD && d<P.threatRadius && ttc < P.threatHorizon){ minD=d; hot=b; eta=ttc; }
    }
  }
  if(hot){
    const a=toDeg(hot.vx,hot.vy);
    const sideBias = P.threatFleeBias + (P.aimBias*0.5);
    const cands=[a+90+sideBias, a-90-sideBias, a+120, a-120, a+70, a-70];
    for(const c of cands){ if(tryMove(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edgeMargin){ if(tryMove(0)) return; }
  if(tank.x > 900-P.edgeMargin){ if(tryMove(180)) return; }
  if(tank.y < P.edgeMargin){ if(tryMove(90)) return; }
  if(tank.y > 600-P.edgeMargin){ if(tryMove(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e9; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.allySep){
    const away = toDeg(tank.x-near.x, tank.y-near.y);
    if(tryMove(away)) return; if(tryMove(away+28)) return; if(tryMove(away-28)) return;
  }

  // 6) Engagement spacing + adaptive strafing
  if(tgt){
    const to = toDeg(tgt.x-tank.x, tgt.y-tank.y);
    const d = tgt.distance;
    let minR=P.minRange, maxR=P.maxRange;
    // tighten ring when target low or outnumbered
    if((tgt.health<=P.finishHP) || enemies.length<=P.aggrRemain){ minR-=P.aggrTighten; maxR-=P.aggrTighten*0.7; }
    if(d < minR){
      const away = to+180 + P.bias*0.4;
      if(tryMove(away)) return; if(tryMove(away+24)) return; if(tryMove(away-24)) return;
    } else if(d > maxR){
      if(tryMove(to)) return; if(tryMove(to+18)) return; if(tryMove(to-18)) return;
    } else {
      const side = to + (((tank.x*13+tank.y*7)|0)%2?P.strafeAngle:-P.strafeAngle) + P.bias*0.5;
      if(tryMove(side)) return; if(tryMove(side+18)) return; if(tryMove(side-18)) return;
    }
  }

  // 7) Fallback sweeping
  const sweep=[0,60,120,180,240,300];
  for(const s of sweep){ if(tryMove(s+P.bias)) return; }
}


// ===== 다음 로봇 =====


function name(){return "Astra-D3";}
function type(){return Type.DEALER;}
// VM-persistent state per robot
let __state = { last:null, tick:0 };
function update(tank,enemies,allies,bulletInfo){
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const norm=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v;
  const hypot=Math.hypot;

  // Tunables (merged per profile and role)
  const P = {"healthWeight":1.25,"distWeight":0.12,"tieBias":0.0005,"leadCap":15,"leadWeight":1.08,"aimJitter":0.1,"aimBias":0,"aimMul":0.45,"threatRadius":80,"threatHorizon":18,"threatFleeBias":14,"minRange":225,"maxRange":335,"strafeAngle":32,"allySep":62,"edgeMargin":44,"finishHP":24,"aggrRemain":4,"aggrTighten":30,"bias":-3};

  __state.tick = (__state.tick||0) + 1;

  // 1) Target selection: sort by health, then distance, then x+y for determinism
  let tgt=null; let best=1e18;
  for(const e of enemies){
    const k = e.health*P.healthWeight + e.distance*P.distWeight + (e.x+e.y)*P.tieBias;
    if(k<best){ best=k; tgt=e; }
  }

  // 2) Predictive aim with capped linear lead; slight index-based spread
  if(tgt){
    let aimX=tgt.x, aimY=tgt.y;
    if(__state.last && __state.last.x!==undefined){
      const vx=(tgt.x-__state.last.x);
      const vy=(tgt.y-__state.last.y);
      const dx=tgt.x-tank.x, dy=tgt.y-tank.y; const d=hypot(dx,dy);
      const tLead=clamp(d/8, 0, P.leadCap);
      aimX = tgt.x + vx*P.leadWeight*tLead;
      aimY = tgt.y + vy*P.leadWeight*tLead;
    }
    const jitter = (((tank.x*31+tank.y*17)%23)-11)*0.08 * P.aimJitter;
    const fireAngle = toDeg(aimX-tank.x, aimY-tank.y) + jitter + P.aimBias;
    tank.fire(fireAngle);
    __state.last = { x:tgt.x, y:tgt.y };
  }

  // Movement helper
  let tries=0; const tryMove=(a)=>{tries++; return tank.move(norm(a));};

  // 3) Bullet avoidance using nearest-approach + time-to-collision gate
  let hot=null; let minD=1e9; let eta=1e9;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=hypot(b.vx,b.vy)||1;
    const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny;
    if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const d=hypot(px-tank.x,py-tank.y);
      const ttc = proj/v; // ticks to closest point
      if(d<minD && d<P.threatRadius && ttc < P.threatHorizon){ minD=d; hot=b; eta=ttc; }
    }
  }
  if(hot){
    const a=toDeg(hot.vx,hot.vy);
    const sideBias = P.threatFleeBias + (P.aimBias*0.5);
    const cands=[a+90+sideBias, a-90-sideBias, a+120, a-120, a+70, a-70];
    for(const c of cands){ if(tryMove(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edgeMargin){ if(tryMove(0)) return; }
  if(tank.x > 900-P.edgeMargin){ if(tryMove(180)) return; }
  if(tank.y < P.edgeMargin){ if(tryMove(90)) return; }
  if(tank.y > 600-P.edgeMargin){ if(tryMove(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e9; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.allySep){
    const away = toDeg(tank.x-near.x, tank.y-near.y);
    if(tryMove(away)) return; if(tryMove(away+28)) return; if(tryMove(away-28)) return;
  }

  // 6) Engagement spacing + adaptive strafing
  if(tgt){
    const to = toDeg(tgt.x-tank.x, tgt.y-tank.y);
    const d = tgt.distance;
    let minR=P.minRange, maxR=P.maxRange;
    // tighten ring when target low or outnumbered
    if((tgt.health<=P.finishHP) || enemies.length<=P.aggrRemain){ minR-=P.aggrTighten; maxR-=P.aggrTighten*0.7; }
    if(d < minR){
      const away = to+180 + P.bias*0.4;
      if(tryMove(away)) return; if(tryMove(away+24)) return; if(tryMove(away-24)) return;
    } else if(d > maxR){
      if(tryMove(to)) return; if(tryMove(to+18)) return; if(tryMove(to-18)) return;
    } else {
      const side = to + (((tank.x*13+tank.y*7)|0)%2?P.strafeAngle:-P.strafeAngle) + P.bias*0.5;
      if(tryMove(side)) return; if(tryMove(side+18)) return; if(tryMove(side-18)) return;
    }
  }

  // 7) Fallback sweeping
  const sweep=[0,60,120,180,240,300];
  for(const s of sweep){ if(tryMove(s+P.bias)) return; }
}


// ===== 다음 로봇 =====


function name(){return "Astra-N1";}
function type(){return Type.NORMAL;}
// VM-persistent state per robot
let __state = { last:null, tick:0 };
function update(tank,enemies,allies,bulletInfo){
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const norm=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v;
  const hypot=Math.hypot;

  // Tunables (merged per profile and role)
  const P = {"healthWeight":1.25,"distWeight":0.12,"tieBias":0.0005,"leadCap":15,"leadWeight":1.08,"aimJitter":0.1,"aimBias":0,"aimMul":0.45,"threatRadius":80,"threatHorizon":18,"threatFleeBias":14,"minRange":185,"maxRange":300,"strafeAngle":28,"allySep":62,"edgeMargin":44,"finishHP":24,"aggrRemain":4,"aggrTighten":30,"bias":3};

  __state.tick = (__state.tick||0) + 1;

  // 1) Target selection: sort by health, then distance, then x+y for determinism
  let tgt=null; let best=1e18;
  for(const e of enemies){
    const k = e.health*P.healthWeight + e.distance*P.distWeight + (e.x+e.y)*P.tieBias;
    if(k<best){ best=k; tgt=e; }
  }

  // 2) Predictive aim with capped linear lead; slight index-based spread
  if(tgt){
    let aimX=tgt.x, aimY=tgt.y;
    if(__state.last && __state.last.x!==undefined){
      const vx=(tgt.x-__state.last.x);
      const vy=(tgt.y-__state.last.y);
      const dx=tgt.x-tank.x, dy=tgt.y-tank.y; const d=hypot(dx,dy);
      const tLead=clamp(d/8, 0, P.leadCap);
      aimX = tgt.x + vx*P.leadWeight*tLead;
      aimY = tgt.y + vy*P.leadWeight*tLead;
    }
    const jitter = (((tank.x*31+tank.y*17)%23)-11)*0.08 * P.aimJitter;
    const fireAngle = toDeg(aimX-tank.x, aimY-tank.y) + jitter + P.aimBias;
    tank.fire(fireAngle);
    __state.last = { x:tgt.x, y:tgt.y };
  }

  // Movement helper
  let tries=0; const tryMove=(a)=>{tries++; return tank.move(norm(a));};

  // 3) Bullet avoidance using nearest-approach + time-to-collision gate
  let hot=null; let minD=1e9; let eta=1e9;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=hypot(b.vx,b.vy)||1;
    const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny;
    if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const d=hypot(px-tank.x,py-tank.y);
      const ttc = proj/v; // ticks to closest point
      if(d<minD && d<P.threatRadius && ttc < P.threatHorizon){ minD=d; hot=b; eta=ttc; }
    }
  }
  if(hot){
    const a=toDeg(hot.vx,hot.vy);
    const sideBias = P.threatFleeBias + (P.aimBias*0.5);
    const cands=[a+90+sideBias, a-90-sideBias, a+120, a-120, a+70, a-70];
    for(const c of cands){ if(tryMove(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edgeMargin){ if(tryMove(0)) return; }
  if(tank.x > 900-P.edgeMargin){ if(tryMove(180)) return; }
  if(tank.y < P.edgeMargin){ if(tryMove(90)) return; }
  if(tank.y > 600-P.edgeMargin){ if(tryMove(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e9; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.allySep){
    const away = toDeg(tank.x-near.x, tank.y-near.y);
    if(tryMove(away)) return; if(tryMove(away+28)) return; if(tryMove(away-28)) return;
  }

  // 6) Engagement spacing + adaptive strafing
  if(tgt){
    const to = toDeg(tgt.x-tank.x, tgt.y-tank.y);
    const d = tgt.distance;
    let minR=P.minRange, maxR=P.maxRange;
    // tighten ring when target low or outnumbered
    if((tgt.health<=P.finishHP) || enemies.length<=P.aggrRemain){ minR-=P.aggrTighten; maxR-=P.aggrTighten*0.7; }
    if(d < minR){
      const away = to+180 + P.bias*0.4;
      if(tryMove(away)) return; if(tryMove(away+24)) return; if(tryMove(away-24)) return;
    } else if(d > maxR){
      if(tryMove(to)) return; if(tryMove(to+18)) return; if(tryMove(to-18)) return;
    } else {
      const side = to + (((tank.x*13+tank.y*7)|0)%2?P.strafeAngle:-P.strafeAngle) + P.bias*0.5;
      if(tryMove(side)) return; if(tryMove(side+18)) return; if(tryMove(side-18)) return;
    }
  }

  // 7) Fallback sweeping
  const sweep=[0,60,120,180,240,300];
  for(const s of sweep){ if(tryMove(s+P.bias)) return; }
}
