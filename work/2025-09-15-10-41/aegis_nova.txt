function name(){return "Aegis-Nova T1";}
function type(){return Type.TANKER;}
let __state={tick:0,lastTarget:null,lvx:0,lvy:0,lastMove:undefined};
function update(tank,enemies,allies,bulletInfo){
  "use strict";
  __state.tick=(__state.tick||0)+1;
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI; const toRad=(a)=>a*Math.PI/180; const norm=(a)=>{a%=360; if(a<0)a+=360; return a|0;};
  const H=Math.hypot; const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v;
  const SPEED=(tank.type===1?3:(tank.type===2?6:5)); const BUL=8;
  // choose target: lowest HP then distance
  let tgt=null; for(const e of enemies){ if(!tgt||e.health<tgt.health-1e-6||(Math.abs(e.health-tgt.health)<1e-6&&e.distance<tgt.distance)) tgt=e; }
  // predictive aim using smoothed velocity and intercept solver
  if(tgt){ const curKey=(tgt.x|0)+":"+(tgt.y|0); let vx=0,vy=0; if(__state.lastTarget&&__state.lastTarget.key===curKey){ vx=tgt.x-__state.lastTarget.x; vy=tgt.y-__state.lastTarget.y; }
    __state.lvx=__state.lvx*0.55+vx*0.45; __state.lvy=__state.lvy*0.55+vy*0.45; const rx=tgt.x-tank.x, ry=tgt.y-tank.y; const vv=__state.lvx*__state.lvx+__state.lvy*__state.lvy; const rr=rx*rx+ry*ry; const rv=rx*__state.lvx+ry*__state.lvy; const A=vv-BUL*BUL, B=2*rv, C=rr; let t=0; if(Math.abs(A)<1e-6){ t=(B!==0?-C/B:0);} else { const disc=B*B-4*A*C; if(disc>=0){ const s=Math.sqrt(disc); const t1=(-B+s)/(2*A), t2=(-B-s)/(2*A); t=Math.max(t1,t2); if(t<0) t=Math.max(t1,t2); } }
    t=clamp(t,0,28); const ax=tgt.x+__state.lvx*t, ay=tgt.y+__state.lvy*t; const jitter=(((__state.tick*17+tank.x*13+tank.y*7)|0)%9-4)*0.18; tank.fire(toDeg(ax-tank.x,ay-tank.y)+jitter); __state.lastTarget={x:tgt.x,y:tgt.y,key:curKey}; }
  // movement params tuned for Tanker frontline
  const P={edge:52, allySep:64, bulletRad:24, horizon:7, minRange:170, maxRange:265, lowHpPad:38, finishHp:30, inertia:0.0028, bulletWeight:0.12, edgeW:0.085, rangeInW:0.014, rangeOutW:0.01, orbit:26, fleeBias:14};
  if(tgt && tgt.health<=P.finishHp){ P.minRange-=38; P.maxRange-=28; }
  if(tank.health<60) P.minRange+=P.lowHpPad;
  // risk for candidate angle with k-step rollout
  function riskForAngle(a){ const ar=toRad(a); const dx=Math.cos(ar)*SPEED, dy=Math.sin(ar)*SPEED; let risk=0; let px=tank.x, py=tank.y; for(let k=1;k<=P.horizon;k++){ px+=dx; py+=dy; // edges
      if(px<P.edge||px>900-P.edge) risk+=(P.edge-Math.min(px,900-px))*P.edgeW*0.6; if(py<P.edge||py>600-P.edge) risk+=(P.edge-Math.min(py,600-py))*P.edgeW*0.6; // allies
      for(const al of allies){ const d=H(px-al.x,py-al.y); if(d<P.allySep) risk+=(P.allySep-d)*0.03; }
      // bullets danger weighted by ETA
      for(const b of bulletInfo){ const bx=b.x+b.vx*k, by=b.y+b.vy*k; const d=H(px-bx,py-by); if(d<P.bulletRad){ const w=P.bulletWeight*(1+0.15*(P.horizon-k)); risk+=(P.bulletRad-d)*w; } }
      if(tgt){ const d=H(px-tgt.x,py-tgt.y); if(d<P.minRange) risk+=(P.minRange-d)*P.rangeInW; else if(d>P.maxRange) risk+=(d-P.maxRange)*P.rangeOutW; }
    } if(__state.lastMove!==undefined){ const da=Math.abs(((a-__state.lastMove)%360+540)%360-180); risk+=da*P.inertia; } return risk; }
  // candidate angles: orbiting, chase/retreat, bullet perpendiculars, sweep
  const cands=[]; const add=(ang)=>{ const k=norm(Math.round(ang)); if(!cands.includes(k)) cands.push(k); };
  if(tgt){ const base=toDeg(tgt.x-tank.x,tgt.y-tank.y); add(base); add(base+180); add(base+90+P.orbit); add(base-90-P.orbit); add(base+60); add(base-60); }
  let hot=null, md=1e9; for(const b of bulletInfo){ const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny; if(proj>0){ const px=b.x-proj*nx, py=b.y-proj*ny; const d=H(px-tank.x,py-tank.y); if(d<md){ md=d; hot=b; } } }
  if(hot){ const a=toDeg(hot.vx,hot.vy); add(a+90+P.fleeBias); add(a-90-P.fleeBias); add(a+135); add(a-135); }
  for(let s=0;s<360;s+=30) add(s);
  cands.sort((a,b)=>riskForAngle(a)-riskForAngle(b)); for(const a of cands){ if(tank.move(a)){ __state.lastMove=a; return; } }
  const fb=norm((__state.tick*47+tank.x+tank.y)|0); if(tank.move(fb)){ __state.lastMove=fb; return; }
}

// ===== 다음 로봇 =====

function name(){return "Aegis-Nova T2";}
function type(){return Type.TANKER;}
let __state={tick:0,lastTarget:null,lvx:0,lvy:0,lastMove:undefined};
function update(tank,enemies,allies,bulletInfo){
  "use strict";
  __state.tick=(__state.tick||0)+1;
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI; const toRad=(a)=>a*Math.PI/180; const norm=(a)=>{a%=360; if(a<0)a+=360; return a|0;};
  const H=Math.hypot; const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v; const SPEED=(tank.type===1?3:(tank.type===2?6:5)); const BUL=8;
  let tgt=null; for(const e of enemies){ if(!tgt||e.health<e.health-1e-6||(Math.abs(e.health-tgt.health)<1e-6&&e.distance<tgt.distance)) tgt=e; }
  if(tgt){ const curKey=(tgt.x|0)+":"+(tgt.y|0); let vx=0,vy=0; if(__state.lastTarget&&__state.lastTarget.key===curKey){ vx=tgt.x-__state.lastTarget.x; vy=tgt.y-__state.lastTarget.y; } __state.lvx=__state.lvx*0.55+vx*0.45; __state.lvy=__state.lvy*0.55+vy*0.45; const rx=tgt.x-tank.x, ry=tgt.y-tank.y; const vv=__state.lvx*__state.lvx+__state.lvy*__state.lvy; const rr=rx*rx+ry*ry; const rv=rx*__state.lvx+ry*__state.lvy; const A=vv-BUL*BUL, B=2*rv, C=rr; let t=0; if(Math.abs(A)<1e-6){ t=(B!==0?-C/B:0);} else { const disc=B*B-4*A*C; if(disc>=0){ const s=Math.sqrt(disc); const t1=(-B+s)/(2*A), t2=(-B-s)/(2*A); t=Math.max(t1,t2); if(t<0) t=Math.max(t1,t2); } } t=clamp(t,0,28); const ax=tgt.x+__state.lvx*t, ay=tgt.y+__state.lvy*t; const jitter=(((__state.tick*19+tank.x*11+tank.y*13)|0)%9-4)*0.15; tank.fire(toDeg(ax-tank.x,ay-tank.y)+jitter); __state.lastTarget={x:tgt.x,y:tgt.y,key:curKey}; }
  const P={edge:52, allySep:64, bulletRad:24, horizon:7, minRange:175, maxRange:270, lowHpPad:36, finishHp:30, inertia:0.0026, bulletWeight:0.12, edgeW:0.085, rangeInW:0.014, rangeOutW:0.01, orbit:28, fleeBias:14}; if(tgt&&tgt.health<=P.finishHp){ P.minRange-=40; P.maxRange-=30; } if(tank.health<60) P.minRange+=P.lowHpPad;
  function riskForAngle(a){ const ar=toRad(a); const dx=Math.cos(ar)*SPEED, dy=Math.sin(ar)*SPEED; let risk=0; let px=tank.x, py=tank.y; for(let k=1;k<=P.horizon;k++){ px+=dx; py+=dy; if(px<P.edge||px>900-P.edge) risk+=(P.edge-Math.min(px,900-px))*P.edgeW*0.6; if(py<P.edge||py>600-P.edge) risk+=(P.edge-Math.min(py,600-py))*P.edgeW*0.6; for(const al of allies){ const d=H(px-al.x,py-al.y); if(d<P.allySep) risk+=(P.allySep-d)*0.03; } for(const b of bulletInfo){ const bx=b.x+b.vx*k, by=b.y+b.vy*k; const d=H(px-bx,py-by); if(d<P.bulletRad){ const w=P.bulletWeight*(1+0.12*(P.horizon-k)); risk+=(P.bulletRad-d)*w; } } if(tgt){ const d=H(px-tgt.x,py-tgt.y); if(d<P.minRange) risk+=(P.minRange-d)*P.rangeInW; else if(d>P.maxRange) risk+=(d-P.maxRange)*P.rangeOutW; } } if(__state.lastMove!==undefined){ const da=Math.abs(((a-__state.lastMove)%360+540)%360-180); risk+=da*P.inertia; } return risk; }
  const cands=[]; const add=(ang)=>{ const k=norm(Math.round(ang)); if(!cands.includes(k)) cands.push(k); };
  if(tgt){ const base=toDeg(tgt.x-tank.x,tgt.y-tank.y); add(base); add(base+180); add(base+90+P.orbit); add(base-90-P.orbit); add(base+60); add(base-60); }
  let hot=null, md=1e9; for(const b of bulletInfo){ const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny; if(proj>0){ const px=b.x-proj*nx, py=b.y-proj*ny; const d=H(px-tank.x,py-tank.y); if(d<md){ md=d; hot=b; } } } if(hot){ const a=toDeg(hot.vx,hot.vy); add(a+90+P.fleeBias); add(a-90-P.fleeBias); add(a+135); add(a-135); }
  for(let s=0;s<360;s+=30) add(s);
  cands.sort((a,b)=>riskForAngle(a)-riskForAngle(b)); for(const a of cands){ if(tank.move(a)){ __state.lastMove=a; return; } } const fb=norm((__state.tick*43+tank.x+tank.y)|0); if(tank.move(fb)){ __state.lastMove=fb; return; }
}

// ===== 다음 로봇 =====

function name(){return "Aegis-Nova D3";}
function type(){return Type.DEALER;}
let __state={tick:0,lastTarget:null,lvx:0,lvy:0,lastMove:undefined};
function update(tank,enemies,allies,bulletInfo){
  "use strict";
  __state.tick=(__state.tick||0)+1;
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI; const toRad=(a)=>a*Math.PI/180; const norm=(a)=>{a%=360; if(a<0)a+=360; return a|0;};
  const H=Math.hypot; const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v; const SPEED=(tank.type===1?3:(tank.type===2?6:5)); const BUL=8;
  let tgt=null; for(const e of enemies){ if(!tgt||e.health<tgt.health-1e-6||(Math.abs(e.health-tgt.health)<1e-6&&e.distance<tgt.distance)) tgt=e; }
  if(tgt){ const curKey=(tgt.x|0)+":"+(tgt.y|0); let vx=0,vy=0; if(__state.lastTarget&&__state.lastTarget.key===curKey){ vx=tgt.x-__state.lastTarget.x; vy=tgt.y-__state.lastTarget.y; } __state.lvx=__state.lvx*0.6+vx*0.4; __state.lvy=__state.lvy*0.6+vy*0.4; const rx=tgt.x-tank.x, ry=tgt.y-tank.y; const vv=__state.lvx*__state.lvx+__state.lvy*__state.lvy; const rr=rx*rx+ry*ry; const rv=rx*__state.lvx+ry*__state.lvy; const A=vv-BUL*BUL, B=2*rv, C=rr; let t=0; if(Math.abs(A)<1e-6){ t=(B!==0?-C/B:0);} else { const disc=B*B-4*A*C; if(disc>=0){ const s=Math.sqrt(disc); const t1=(-B+s)/(2*A), t2=(-B-s)/(2*A); t=Math.max(t1,t2); if(t<0) t=Math.max(t1,t2); } } t=clamp(t,0,30); const ax=tgt.x+__state.lvx*t, ay=tgt.y+__state.lvy*t; const jitter=(((__state.tick*23+tank.x*19+tank.y*5)|0)%11-5)*0.12; tank.fire(toDeg(ax-tank.x,ay-tank.y)+jitter); __state.lastTarget={x:tgt.x,y:tgt.y,key:curKey}; }
  const P={edge:56, allySep:70, bulletRad:22, horizon:8, minRange:290, maxRange:420, lowHpPad:65, finishHp:26, inertia:0.002, bulletWeight:0.14, edgeW:0.09, rangeInW:0.02, rangeOutW:0.012, orbit:36, fleeBias:16}; if(tgt&&tgt.health<=P.finishHp){ P.minRange-=50; P.maxRange-=38; } if(tank.health<38) P.minRange+=P.lowHpPad;
  function riskForAngle(a){ const ar=toRad(a); const dx=Math.cos(ar)*SPEED, dy=Math.sin(ar)*SPEED; let risk=0; let px=tank.x, py=tank.y; for(let k=1;k<=P.horizon;k++){ px+=dx; py+=dy; if(px<P.edge||px>900-P.edge) risk+=(P.edge-Math.min(px,900-px))*P.edgeW*0.7; if(py<P.edge||py>600-P.edge) risk+=(P.edge-Math.min(py,600-py))*P.edgeW*0.7; for(const al of allies){ const d=H(px-al.x,py-al.y); if(d<P.allySep) risk+=(P.allySep-d)*0.03; } for(const b of bulletInfo){ const bx=b.x+b.vx*k, by=b.y+b.vy*k; const d=H(px-bx,py-by); if(d<P.bulletRad){ const w=P.bulletWeight*(1+0.2*(P.horizon-k)); risk+=(P.bulletRad-d)*w; } } if(tgt){ const d=H(px-tgt.x,py-tgt.y); if(d<P.minRange) risk+=(P.minRange-d)*P.rangeInW; else if(d>P.maxRange) risk+=(d-P.maxRange)*P.rangeOutW; } } if(__state.lastMove!==undefined){ const da=Math.abs(((a-__state.lastMove)%360+540)%360-180); risk+=da*P.inertia; } return risk; }
  const cands=[]; const add=(ang)=>{ const k=norm(Math.round(ang)); if(!cands.includes(k)) cands.push(k); };
  if(tgt){ const base=toDeg(tgt.x-tank.x,tgt.y-tank.y); add(base+90+P.orbit); add(base-90-P.orbit); add(base+60); add(base-60); add(base+180); }
  let hot=null, md=1e9; for(const b of bulletInfo){ const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny; if(proj>0){ const px=b.x-proj*nx, py=b.y-proj*ny; const d=H(px-tank.x,py-tank.y); if(d<md){ md=d; hot=b; } } } if(hot){ const a=toDeg(hot.vx,hot.vy); add(a+90+P.fleeBias); add(a-90-P.fleeBias); add(a+120); add(a-120); }
  for(let s=0;s<360;s+=30) add(s);
  cands.sort((a,b)=>riskForAngle(a)-riskForAngle(b)); for(const a of cands){ if(tank.move(a)){ __state.lastMove=a; return; } } const fb=norm((__state.tick*41+tank.x+tank.y)|0); if(tank.move(fb)){ __state.lastMove=fb; return; }
}

// ===== 다음 로봇 =====

function name(){return "Aegis-Nova D4";}
function type(){return Type.DEALER;}
let __state={tick:0,lastTarget:null,lvx:0,lvy:0,lastMove:undefined};
function update(tank,enemies,allies,bulletInfo){
  "use strict";
  __state.tick=(__state.tick||0)+1;
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI; const toRad=(a)=>a*Math.PI/180; const norm=(a)=>{a%=360; if(a<0)a+=360; return a|0;};
  const H=Math.hypot; const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v; const SPEED=(tank.type===1?3:(tank.type===2?6:5)); const BUL=8;
  let tgt=null; for(const e of enemies){ if(!tgt||e.health<tgt.health-1e-6||(Math.abs(e.health-tgt.health)<1e-6&&e.distance<tgt.distance)) tgt=e; }
  if(tgt){ const curKey=(tgt.x|0)+":"+(tgt.y|0); let vx=0,vy=0; if(__state.lastTarget&&__state.lastTarget.key===curKey){ vx=tgt.x-__state.lastTarget.x; vy=tgt.y-__state.lastTarget.y; } __state.lvx=__state.lvx*0.62+vx*0.38; __state.lvy=__state.lvy*0.62+vy*0.38; const rx=tgt.x-tank.x, ry=tgt.y-tank.y; const vv=__state.lvx*__state.lvx+__state.lvy*__state.lvy; const rr=rx*rx+ry*ry; const rv=rx*__state.lvx+ry*__state.lvy; const A=vv-BUL*BUL, B=2*rv, C=rr; let t=0; if(Math.abs(A)<1e-6){ t=(B!==0?-C/B:0);} else { const disc=B*B-4*A*C; if(disc>=0){ const s=Math.sqrt(disc); const t1=(-B+s)/(2*A), t2=(-B-s)/(2*A); t=Math.max(t1,t2); if(t<0) t=Math.max(t1,t2); } } t=clamp(t,0,30); const ax=tgt.x+__state.lvx*t, ay=tgt.y+__state.lvy*t; const jitter=(((__state.tick*29+tank.x*17+tank.y*11)|0)%11-5)*0.1; tank.fire(toDeg(ax-tank.x,ay-tank.y)+jitter); __state.lastTarget={x:tgt.x,y:tgt.y,key:curKey}; }
  const P={edge:56, allySep:70, bulletRad:22, horizon:8, minRange:300, maxRange:430, lowHpPad:66, finishHp:26, inertia:0.002, bulletWeight:0.15, edgeW:0.09, rangeInW:0.02, rangeOutW:0.012, orbit:38, fleeBias:16}; if(tgt&&tgt.health<=P.finishHp){ P.minRange-=50; P.maxRange-=38; } if(tank.health<38) P.minRange+=P.lowHpPad;
  function riskForAngle(a){ const ar=toRad(a); const dx=Math.cos(ar)*SPEED, dy=Math.sin(ar)*SPEED; let risk=0; let px=tank.x, py=tank.y; for(let k=1;k<=P.horizon;k++){ px+=dx; py+=dy; if(px<P.edge||px>900-P.edge) risk+=(P.edge-Math.min(px,900-px))*P.edgeW*0.7; if(py<P.edge||py>600-P.edge) risk+=(P.edge-Math.min(py,600-py))*P.edgeW*0.7; for(const al of allies){ const d=H(px-al.x,py-al.y); if(d<P.allySep) risk+=(P.allySep-d)*0.03; } for(const b of bulletInfo){ const bx=b.x+b.vx*k, by=b.y+b.vy*k; const d=H(px-bx,py-by); if(d<P.bulletRad){ const w=P.bulletWeight*(1+0.22*(P.horizon-k)); risk+=(P.bulletRad-d)*w; } } if(tgt){ const d=H(px-tgt.x,py-tgt.y); if(d<P.minRange) risk+=(P.minRange-d)*P.rangeInW; else if(d>P.maxRange) risk+=(d-P.maxRange)*P.rangeOutW; } } if(__state.lastMove!==undefined){ const da=Math.abs(((a-__state.lastMove)%360+540)%360-180); risk+=da*P.inertia; } return risk; }
  const cands=[]; const add=(ang)=>{ const k=norm(Math.round(ang)); if(!cands.includes(k)) cands.push(k); };
  if(tgt){ const base=toDeg(tgt.x-tank.x,tgt.y-tank.y); add(base+90+P.orbit); add(base-90-P.orbit); add(base+50); add(base-50); add(base+180); }
  let hot=null, md=1e9; for(const b of bulletInfo){ const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny; if(proj>0){ const px=b.x-proj*nx, py=b.y-proj*ny; const d=H(px-tank.x,py-tank.y); if(d<md){ md=d; hot=b; } } } if(hot){ const a=toDeg(hot.vx,hot.vy); add(a+90+P.fleeBias); add(a-90-P.fleeBias); add(a+120); add(a-120); }
  for(let s=0;s<360;s+=30) add(s);
  cands.sort((a,b)=>riskForAngle(a)-riskForAngle(b)); for(const a of cands){ if(tank.move(a)){ __state.lastMove=a; return; } } const fb=norm((__state.tick*43+tank.x+tank.y)|0); if(tank.move(fb)){ __state.lastMove=fb; return; }
}

// ===== 다음 로봇 =====

function name(){return "Aegis-Nova D5";}
function type(){return Type.DEALER;}
let __state={tick:0,lastTarget:null,lvx:0,lvy:0,lastMove:undefined};
function update(tank,enemies,allies,bulletInfo){
  "use strict";
  __state.tick=(__state.tick||0)+1;
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI; const toRad=(a)=>a*Math.PI/180; const norm=(a)=>{a%=360; if(a<0)a+=360; return a|0;};
  const H=Math.hypot; const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v; const SPEED=(tank.type===1?3:(tank.type===2?6:5)); const BUL=8;
  let tgt=null; for(const e of enemies){ if(!tgt||e.health<tgt.health-1e-6||(Math.abs(e.health-tgt.health)<1e-6&&e.distance<tgt.distance)) tgt=e; }
  if(tgt){ const curKey=(tgt.x|0)+":"+(tgt.y|0); let vx=0,vy=0; if(__state.lastTarget&&__state.lastTarget.key===curKey){ vx=tgt.x-__state.lastTarget.x; vy=tgt.y-__state.lastTarget.y; } __state.lvx=__state.lvx*0.6+vx*0.4; __state.lvy=__state.lvy*0.6+vy*0.4; const rx=tgt.x-tank.x, ry=tgt.y-tank.y; const vv=__state.lvx*__state.lvx+__state.lvy*__state.lvy; const rr=rx*rx+ry*ry; const rv=rx*__state.lvx+ry*__state.lvy; const A=vv-BUL*BUL, B=2*rv, C=rr; let t=0; if(Math.abs(A)<1e-6){ t=(B!==0?-C/B:0);} else { const disc=B*B-4*A*C; if(disc>=0){ const s=Math.sqrt(disc); const t1=(-B+s)/(2*A), t2=(-B-s)/(2*A); t=Math.max(t1,t2); if(t<0) t=Math.max(t1,t2); } } t=clamp(t,0,30); const ax=tgt.x+__state.lvx*t, ay=tgt.y+__state.lvy*t; const jitter=(((__state.tick*31+tank.x*13+tank.y*17)|0)%11-5)*0.1; tank.fire(toDeg(ax-tank.x,ay-tank.y)+jitter); __state.lastTarget={x:tgt.x,y:tgt.y,key:curKey}; }
  const P={edge:54, allySep:72, bulletRad:22, horizon:8, minRange:285, maxRange:425, lowHpPad:64, finishHp:26, inertia:0.002, bulletWeight:0.145, edgeW:0.09, rangeInW:0.02, rangeOutW:0.012, orbit:36, fleeBias:17}; if(tgt&&tgt.health<=P.finishHp){ P.minRange-=48; P.maxRange-=36; } if(tank.health<38) P.minRange+=P.lowHpPad;
  function riskForAngle(a){ const ar=toRad(a); const dx=Math.cos(ar)*SPEED, dy=Math.sin(ar)*SPEED; let risk=0; let px=tank.x, py=tank.y; for(let k=1;k<=P.horizon;k++){ px+=dx; py+=dy; if(px<P.edge||px>900-P.edge) risk+=(P.edge-Math.min(px,900-px))*P.edgeW*0.7; if(py<P.edge||py>600-P.edge) risk+=(P.edge-Math.min(py,600-py))*P.edgeW*0.7; for(const al of allies){ const d=H(px-al.x,py-al.y); if(d<P.allySep) risk+=(P.allySep-d)*0.03; } for(const b of bulletInfo){ const bx=b.x+b.vx*k, by=b.y+b.vy*k; const d=H(px-bx,py-by); if(d<P.bulletRad){ const w=P.bulletWeight*(1+0.22*(P.horizon-k)); risk+=(P.bulletRad-d)*w; } } if(tgt){ const d=H(px-tgt.x,py-tgt.y); if(d<P.minRange) risk+=(P.minRange-d)*P.rangeInW; else if(d>P.maxRange) risk+=(d-P.maxRange)*P.rangeOutW; } } if(__state.lastMove!==undefined){ const da=Math.abs(((a-__state.lastMove)%360+540)%360-180); risk+=da*P.inertia; } return risk; }
  const cands=[]; const add=(ang)=>{ const k=norm(Math.round(ang)); if(!cands.includes(k)) cands.push(k); };
  if(tgt){ const base=toDeg(tgt.x-tank.x,tgt.y-tank.y); add(base+90+P.orbit); add(base-90-P.orbit); add(base+50); add(base-50); add(base+180); }
  let hot=null, md=1e9; for(const b of bulletInfo){ const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny; if(proj>0){ const px=b.x-proj*nx, py=b.y-proj*ny; const d=H(px-tank.x,py-tank.y); if(d<md){ md=d; hot=b; } } } if(hot){ const a=toDeg(hot.vx,hot.vy); add(a+90+P.fleeBias); add(a-90-P.fleeBias); add(a+120); add(a-120); }
  for(let s=0;s<360;s+=30) add(s);
  cands.sort((a,b)=>riskForAngle(a)-riskForAngle(b)); for(const a of cands){ if(tank.move(a)){ __state.lastMove=a; return; } } const fb=norm((__state.tick*39+tank.x+tank.y)|0); if(tank.move(fb)){ __state.lastMove=fb; return; }
}

// ===== 다음 로봇 =====

function name(){return "Aegis-Nova D6";}
function type(){return Type.DEALER;}
let __state={tick:0,lastTarget:null,lvx:0,lvy:0,lastMove:undefined};
function update(tank,enemies,allies,bulletInfo){
  "use strict";
  __state.tick=(__state.tick||0)+1;
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI; const toRad=(a)=>a*Math.PI/180; const norm=(a)=>{a%=360; if(a<0)a+=360; return a|0;};
  const H=Math.hypot; const clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v; const SPEED=(tank.type===1?3:(tank.type===2?6:5)); const BUL=8;
  let tgt=null; for(const e of enemies){ if(!tgt||e.health<tgt.health-1e-6||(Math.abs(e.health-tgt.health)<1e-6&&e.distance<tgt.distance)) tgt=e; }
  if(tgt){ const curKey=(tgt.x|0)+":"+(tgt.y|0); let vx=0,vy=0; if(__state.lastTarget&&__state.lastTarget.key===curKey){ vx=tgt.x-__state.lastTarget.x; vy=tgt.y-__state.lastTarget.y; } __state.lvx=__state.lvx*0.6+vx*0.4; __state.lvy=__state.lvy*0.6+vy*0.4; const rx=tgt.x-tank.x, ry=tgt.y-tank.y; const vv=__state.lvx*__state.lvx+__state.lvy*__state.lvy; const rr=rx*rx+ry*ry; const rv=rx*__state.lvx+ry*__state.lvy; const A=vv-BUL*BUL, B=2*rv, C=rr; let t=0; if(Math.abs(A)<1e-6){ t=(B!==0?-C/B:0);} else { const disc=B*B-4*A*C; if(disc>=0){ const s=Math.sqrt(disc); const t1=(-B+s)/(2*A), t2=(-B-s)/(2*A); t=Math.max(t1,t2); if(t<0) t=Math.max(t1,t2); } } t=clamp(t,0,30); const ax=tgt.x+__state.lvx*t, ay=tgt.y+__state.lvy*t; const jitter=(((__state.tick*37+tank.x*7+tank.y*23)|0)%11-5)*0.1; tank.fire(toDeg(ax-tank.x,ay-tank.y)+jitter); __state.lastTarget={x:tgt.x,y:tgt.y,key:curKey}; }
  const P={edge:58, allySep:72, bulletRad:22, horizon:8, minRange:305, maxRange:440, lowHpPad:68, finishHp:26, inertia:0.002, bulletWeight:0.15, edgeW:0.095, rangeInW:0.02, rangeOutW:0.012, orbit:40, fleeBias:16}; if(tgt&&tgt.health<=P.finishHp){ P.minRange-=52; P.maxRange-=40; } if(tank.health<36) P.minRange+=P.lowHpPad;
  function riskForAngle(a){ const ar=toRad(a); const dx=Math.cos(ar)*SPEED, dy=Math.sin(ar)*SPEED; let risk=0; let px=tank.x, py=tank.y; for(let k=1;k<=P.horizon;k++){ px+=dx; py+=dy; if(px<P.edge||px>900-P.edge) risk+=(P.edge-Math.min(px,900-px))*P.edgeW*0.75; if(py<P.edge||py>600-P.edge) risk+=(P.edge-Math.min(py,600-py))*P.edgeW*0.75; for(const al of allies){ const d=H(px-al.x,py-al.y); if(d<P.allySep) risk+=(P.allySep-d)*0.03; } for(const b of bulletInfo){ const bx=b.x+b.vx*k, by=b.y+b.vy*k; const d=H(px-bx,py-by); if(d<P.bulletRad){ const w=P.bulletWeight*(1+0.22*(P.horizon-k)); risk+=(P.bulletRad-d)*w; } } if(tgt){ const d=H(px-tgt.x,py-tgt.y); if(d<P.minRange) risk+=(P.minRange-d)*P.rangeInW; else if(d>P.maxRange) risk+=(d-P.maxRange)*P.rangeOutW; } } if(__state.lastMove!==undefined){ const da=Math.abs(((a-__state.lastMove)%360+540)%360-180); risk+=da*P.inertia; } return risk; }
  const cands=[]; const add=(ang)=>{ const k=norm(Math.round(ang)); if(!cands.includes(k)) cands.push(k); };
  if(tgt){ const base=toDeg(tgt.x-tank.x,tgt.y-tank.y); add(base+90+P.orbit); add(base-90-P.orbit); add(base+45); add(base-45); add(base+180); }
  let hot=null, md=1e9; for(const b of bulletInfo){ const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v; const proj=dx*nx+dy*ny; if(proj>0){ const px=b.x-proj*nx, py=b.y-proj*ny; const d=H(px-tank.x,py-tank.y); if(d<md){ md=d; hot=b; } } } if(hot){ const a=toDeg(hot.vx,hot.vy); add(a+90+P.fleeBias); add(a-90-P.fleeBias); add(a+120); add(a-120); }
  for(let s=0;s<360;s+=30) add(s);
  cands.sort((a,b)=>riskForAngle(a)-riskForAngle(b)); for(const a of cands){ if(tank.move(a)){ __state.lastMove=a; return; } } const fb=norm((__state.tick*37+tank.x+tank.y)|0); if(tank.move(fb)){ __state.lastMove=fb; return; }
}

