function name(){return "Nova-9-T1";}
function type(){return Type.TANKER;}
let __s_0 = { last:null, tick:0, lastVel:null, side:-1 };
function update(tank,enemies,allies,bulletInfo){
  const H=Math.hypot, D=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const N=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const CL=(v,l,h)=>v<l?l:v>h?h:v;
  const P={"healthW":1.24,"distW":0.085,"dealerBias":-12,"tankerBias":6,"velLP":0.55,"leadCap":22,"leadW":1.1,"aimJitter":0.13,"aimBias":0,"rMin":190,"rMax":300,"strafe":22,"sep":76,"edge":60,"threatR":220,"threatH":5,"threatBonus":0,"fleeBias":16,"finisherHP":24,"aggrRemain":3,"aggrIn":28,"aggrOut":18,"bias":-6};
  const S=__s_0;
  S.tick=(S.tick||0)+1;

  // 1) Target selection with role bias (prefer dealers/low health, then distance)
  let tgt=null, best=1e18;
  for(const e of enemies){
    // infer type by size heuristic if available (dealer ~33, tanker ~45, normal ~35)
    let tBias=0; // negative -> prefer
    const sz = e.size || 0;
    if(sz>=43) tBias += P.tankerBias; // tanker
    else if(sz<=34) tBias += P.dealerBias; // dealer
    const k = e.health*P.healthW + e.distance*P.distW + tBias;
    if(k<best){best=k; tgt=e;}
  }

  // 2) Predictive aim using quadratic intercept solve (s=8 px/tick)
  if(tgt){
    let ax=tgt.x, ay=tgt.y; let vx=0, vy=0;
    if(S.last){
      const lvx=S.lastVel?S.lastVel.vx:0, lvy=S.lastVel?S.lastVel.vy:0;
      const ivx=(tgt.x-S.last.x), ivy=(tgt.y-S.last.y);
      vx = lvx*P.velLP + ivx*(1-P.velLP);
      vy = lvy*P.velLP + ivy*(1-P.velLP);
      S.lastVel={vx,vy};
      const rx = tgt.x - tank.x, ry = tgt.y - tank.y; const s2=64;
      const aa = vx*vx + vy*vy - s2;
      const bb = 2*(rx*vx + ry*vy);
      const cc = rx*rx + ry*ry;
      let tHit = 0;
      if (Math.abs(aa) < 1e-6) {
        tHit = bb !== 0 ? CL(-cc / bb, 0, P.leadCap) : 0;
      } else {
        const disc = bb*bb - 4*aa*cc;
        if (disc >= 0) {
          const sd = Math.sqrt(disc);
          const t1 = (-bb - sd) / (2*aa);
          const t2 = (-bb + sd) / (2*aa);
          const tc = t1>0 && t2>0 ? Math.min(t1,t2) : (t1>0?t1:(t2>0?t2:0));
          tHit = CL(tc, 0, P.leadCap);
        } else {
          const d = H(rx,ry); tHit = CL(d/8, 0, P.leadCap);
        }
      }
      ax = tgt.x + vx * P.leadW * tHit;
      ay = tgt.y + vy * P.leadW * tHit;
    }
    const jitter = ((((S.tick*13 + tank.x*7 + tank.y*3 + 0)%23)-11) * (P.aimJitter||0.12) * 0.07) + (P.aimBias||0);
    tank.fire(D(ax-tank.x,ay-tank.y) + jitter);
    S.last={x:tgt.x,y:tgt.y};
  }

  // Helper to attempt moves: cap attempts locally (engine caps successes to 1)
  let tried=0; const go=(a)=>{ if(tried>20) return true; tried++; return tank.move(N(a)); };

  // 3) Bullet avoidance with time-to-collision weighting
  let hot=null, score=1e18;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v;
    const proj=dx*nx+dy*ny; if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const dist=H(px-tank.x,py-tank.y);
      const tt=proj/v; // ticks to closest approach
      const s = dist + tt*P.threatH - (P.threatBonus||0);
      if(dist<P.threatR && s<score){ score=s; hot=b; }
    }
  }
  if(hot){
    const a=D(hot.vx,hot.vy);
    const side=(S.side||1)*P.fleeBias + (P.bias||0)*0.4;
    const options=[a+90+side, a-90-side, a+120, a-120, a+70, a-70, a+150, a-150];
    for(const c of options){ if(go(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edge){ if(go(0)) return; }
  if(tank.x > 900-P.edge){ if(go(180)) return; }
  if(tank.y < P.edge){ if(go(90)) return; }
  if(tank.y > 600-P.edge){ if(go(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e18; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.sep){ const away=D(tank.x-near.x,tank.y-near.y); if(go(away)) return; if(go(away+16)) return; if(go(away-16)) return; }

  // 6) Range control + strafing
  if(tgt){
    const to=D(tgt.x-tank.x,tgt.y-tank.y), d=tgt.distance;
    let r0=P.rMin, r1=P.rMax;
    if(tgt.health<=P.finisherHP || enemies.length<=P.aggrRemain){ r0=Math.max(120, r0-P.aggrIn); r1=Math.max(160, r1-P.aggrOut); }
    if(d<r0){ const aw=to+180+(P.bias||0)*0.3; if(go(aw)) return; if(go(aw+14)) return; if(go(aw-14)) return; }
    else if(d>r1){ if(go(to)) return; if(go(to+12)) return; if(go(to-12)) return; }
    else { const s=to + ((S.side||1) * P.strafe) + (P.bias||0)*0.4; if(go(s)) return; if(go(s+14)) return; if(go(s-14)) return; }
  }

  // 7) Fallback sweep
  for(const s of [0,60,120,180,240,300]){ if(go(s+(P.bias||0))) return; }
}


// ===== 다음 로봇 =====


function name(){return "Nova-9-T2";}
function type(){return Type.TANKER;}
let __s_1 = { last:null, tick:0, lastVel:null, side:1 };
function update(tank,enemies,allies,bulletInfo){
  const H=Math.hypot, D=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const N=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const CL=(v,l,h)=>v<l?l:v>h?h:v;
  const P={"healthW":1.24,"distW":0.085,"dealerBias":-12,"tankerBias":6,"velLP":0.55,"leadCap":22,"leadW":1.1,"aimJitter":0.13,"aimBias":0,"rMin":196,"rMax":308,"strafe":22,"sep":76,"edge":60,"threatR":220,"threatH":5,"threatBonus":0,"fleeBias":16,"finisherHP":24,"aggrRemain":3,"aggrIn":28,"aggrOut":18,"bias":-8};
  const S=__s_1;
  S.tick=(S.tick||0)+1;

  // 1) Target selection with role bias (prefer dealers/low health, then distance)
  let tgt=null, best=1e18;
  for(const e of enemies){
    // infer type by size heuristic if available (dealer ~33, tanker ~45, normal ~35)
    let tBias=0; // negative -> prefer
    const sz = e.size || 0;
    if(sz>=43) tBias += P.tankerBias; // tanker
    else if(sz<=34) tBias += P.dealerBias; // dealer
    const k = e.health*P.healthW + e.distance*P.distW + tBias;
    if(k<best){best=k; tgt=e;}
  }

  // 2) Predictive aim using quadratic intercept solve (s=8 px/tick)
  if(tgt){
    let ax=tgt.x, ay=tgt.y; let vx=0, vy=0;
    if(S.last){
      const lvx=S.lastVel?S.lastVel.vx:0, lvy=S.lastVel?S.lastVel.vy:0;
      const ivx=(tgt.x-S.last.x), ivy=(tgt.y-S.last.y);
      vx = lvx*P.velLP + ivx*(1-P.velLP);
      vy = lvy*P.velLP + ivy*(1-P.velLP);
      S.lastVel={vx,vy};
      const rx = tgt.x - tank.x, ry = tgt.y - tank.y; const s2=64;
      const aa = vx*vx + vy*vy - s2;
      const bb = 2*(rx*vx + ry*vy);
      const cc = rx*rx + ry*ry;
      let tHit = 0;
      if (Math.abs(aa) < 1e-6) {
        tHit = bb !== 0 ? CL(-cc / bb, 0, P.leadCap) : 0;
      } else {
        const disc = bb*bb - 4*aa*cc;
        if (disc >= 0) {
          const sd = Math.sqrt(disc);
          const t1 = (-bb - sd) / (2*aa);
          const t2 = (-bb + sd) / (2*aa);
          const tc = t1>0 && t2>0 ? Math.min(t1,t2) : (t1>0?t1:(t2>0?t2:0));
          tHit = CL(tc, 0, P.leadCap);
        } else {
          const d = H(rx,ry); tHit = CL(d/8, 0, P.leadCap);
        }
      }
      ax = tgt.x + vx * P.leadW * tHit;
      ay = tgt.y + vy * P.leadW * tHit;
    }
    const jitter = ((((S.tick*13 + tank.x*7 + tank.y*3 + 11)%23)-11) * (P.aimJitter||0.12) * 0.07) + (P.aimBias||0);
    tank.fire(D(ax-tank.x,ay-tank.y) + jitter);
    S.last={x:tgt.x,y:tgt.y};
  }

  // Helper to attempt moves: cap attempts locally (engine caps successes to 1)
  let tried=0; const go=(a)=>{ if(tried>20) return true; tried++; return tank.move(N(a)); };

  // 3) Bullet avoidance with time-to-collision weighting
  let hot=null, score=1e18;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v;
    const proj=dx*nx+dy*ny; if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const dist=H(px-tank.x,py-tank.y);
      const tt=proj/v; // ticks to closest approach
      const s = dist + tt*P.threatH - (P.threatBonus||0);
      if(dist<P.threatR && s<score){ score=s; hot=b; }
    }
  }
  if(hot){
    const a=D(hot.vx,hot.vy);
    const side=(S.side||1)*P.fleeBias + (P.bias||0)*0.4;
    const options=[a+90+side, a-90-side, a+120, a-120, a+70, a-70, a+150, a-150];
    for(const c of options){ if(go(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edge){ if(go(0)) return; }
  if(tank.x > 900-P.edge){ if(go(180)) return; }
  if(tank.y < P.edge){ if(go(90)) return; }
  if(tank.y > 600-P.edge){ if(go(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e18; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.sep){ const away=D(tank.x-near.x,tank.y-near.y); if(go(away)) return; if(go(away+16)) return; if(go(away-16)) return; }

  // 6) Range control + strafing
  if(tgt){
    const to=D(tgt.x-tank.x,tgt.y-tank.y), d=tgt.distance;
    let r0=P.rMin, r1=P.rMax;
    if(tgt.health<=P.finisherHP || enemies.length<=P.aggrRemain){ r0=Math.max(120, r0-P.aggrIn); r1=Math.max(160, r1-P.aggrOut); }
    if(d<r0){ const aw=to+180+(P.bias||0)*0.3; if(go(aw)) return; if(go(aw+14)) return; if(go(aw-14)) return; }
    else if(d>r1){ if(go(to)) return; if(go(to+12)) return; if(go(to-12)) return; }
    else { const s=to + ((S.side||1) * P.strafe) + (P.bias||0)*0.4; if(go(s)) return; if(go(s+14)) return; if(go(s-14)) return; }
  }

  // 7) Fallback sweep
  for(const s of [0,60,120,180,240,300]){ if(go(s+(P.bias||0))) return; }
}


// ===== 다음 로봇 =====


function name(){return "Nova-9-D1";}
function type(){return Type.DEALER;}
let __s_2 = { last:null, tick:0, lastVel:null, side:-1 };
function update(tank,enemies,allies,bulletInfo){
  const H=Math.hypot, D=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const N=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const CL=(v,l,h)=>v<l?l:v>h?h:v;
  const P={"healthW":1.24,"distW":0.085,"dealerBias":-16,"tankerBias":8,"velLP":0.55,"leadCap":22,"leadW":1.12,"aimJitter":0.13,"aimBias":-0.5,"rMin":280,"rMax":440,"strafe":28,"sep":72,"edge":64,"threatR":200,"threatH":5,"threatBonus":0,"fleeBias":16,"finisherHP":24,"aggrRemain":3,"aggrIn":28,"aggrOut":18,"bias":0};
  const S=__s_2;
  S.tick=(S.tick||0)+1;

  // 1) Target selection with role bias (prefer dealers/low health, then distance)
  let tgt=null, best=1e18;
  for(const e of enemies){
    // infer type by size heuristic if available (dealer ~33, tanker ~45, normal ~35)
    let tBias=0; // negative -> prefer
    const sz = e.size || 0;
    if(sz>=43) tBias += P.tankerBias; // tanker
    else if(sz<=34) tBias += P.dealerBias; // dealer
    const k = e.health*P.healthW + e.distance*P.distW + tBias;
    if(k<best){best=k; tgt=e;}
  }

  // 2) Predictive aim using quadratic intercept solve (s=8 px/tick)
  if(tgt){
    let ax=tgt.x, ay=tgt.y; let vx=0, vy=0;
    if(S.last){
      const lvx=S.lastVel?S.lastVel.vx:0, lvy=S.lastVel?S.lastVel.vy:0;
      const ivx=(tgt.x-S.last.x), ivy=(tgt.y-S.last.y);
      vx = lvx*P.velLP + ivx*(1-P.velLP);
      vy = lvy*P.velLP + ivy*(1-P.velLP);
      S.lastVel={vx,vy};
      const rx = tgt.x - tank.x, ry = tgt.y - tank.y; const s2=64;
      const aa = vx*vx + vy*vy - s2;
      const bb = 2*(rx*vx + ry*vy);
      const cc = rx*rx + ry*ry;
      let tHit = 0;
      if (Math.abs(aa) < 1e-6) {
        tHit = bb !== 0 ? CL(-cc / bb, 0, P.leadCap) : 0;
      } else {
        const disc = bb*bb - 4*aa*cc;
        if (disc >= 0) {
          const sd = Math.sqrt(disc);
          const t1 = (-bb - sd) / (2*aa);
          const t2 = (-bb + sd) / (2*aa);
          const tc = t1>0 && t2>0 ? Math.min(t1,t2) : (t1>0?t1:(t2>0?t2:0));
          tHit = CL(tc, 0, P.leadCap);
        } else {
          const d = H(rx,ry); tHit = CL(d/8, 0, P.leadCap);
        }
      }
      ax = tgt.x + vx * P.leadW * tHit;
      ay = tgt.y + vy * P.leadW * tHit;
    }
    const jitter = ((((S.tick*13 + tank.x*7 + tank.y*3 + 22)%23)-11) * (P.aimJitter||0.12) * 0.07) + (P.aimBias||0);
    tank.fire(D(ax-tank.x,ay-tank.y) + jitter);
    S.last={x:tgt.x,y:tgt.y};
  }

  // Helper to attempt moves: cap attempts locally (engine caps successes to 1)
  let tried=0; const go=(a)=>{ if(tried>20) return true; tried++; return tank.move(N(a)); };

  // 3) Bullet avoidance with time-to-collision weighting
  let hot=null, score=1e18;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v;
    const proj=dx*nx+dy*ny; if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const dist=H(px-tank.x,py-tank.y);
      const tt=proj/v; // ticks to closest approach
      const s = dist + tt*P.threatH - (P.threatBonus||0);
      if(dist<P.threatR && s<score){ score=s; hot=b; }
    }
  }
  if(hot){
    const a=D(hot.vx,hot.vy);
    const side=(S.side||1)*P.fleeBias + (P.bias||0)*0.4;
    const options=[a+90+side, a-90-side, a+120, a-120, a+70, a-70, a+150, a-150];
    for(const c of options){ if(go(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edge){ if(go(0)) return; }
  if(tank.x > 900-P.edge){ if(go(180)) return; }
  if(tank.y < P.edge){ if(go(90)) return; }
  if(tank.y > 600-P.edge){ if(go(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e18; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.sep){ const away=D(tank.x-near.x,tank.y-near.y); if(go(away)) return; if(go(away+16)) return; if(go(away-16)) return; }

  // 6) Range control + strafing
  if(tgt){
    const to=D(tgt.x-tank.x,tgt.y-tank.y), d=tgt.distance;
    let r0=P.rMin, r1=P.rMax;
    if(tgt.health<=P.finisherHP || enemies.length<=P.aggrRemain){ r0=Math.max(120, r0-P.aggrIn); r1=Math.max(160, r1-P.aggrOut); }
    if(d<r0){ const aw=to+180+(P.bias||0)*0.3; if(go(aw)) return; if(go(aw+14)) return; if(go(aw-14)) return; }
    else if(d>r1){ if(go(to)) return; if(go(to+12)) return; if(go(to-12)) return; }
    else { const s=to + ((S.side||1) * P.strafe) + (P.bias||0)*0.4; if(go(s)) return; if(go(s+14)) return; if(go(s-14)) return; }
  }

  // 7) Fallback sweep
  for(const s of [0,60,120,180,240,300]){ if(go(s+(P.bias||0))) return; }
}


// ===== 다음 로봇 =====


function name(){return "Nova-9-D2";}
function type(){return Type.DEALER;}
let __s_3 = { last:null, tick:0, lastVel:null, side:1 };
function update(tank,enemies,allies,bulletInfo){
  const H=Math.hypot, D=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const N=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const CL=(v,l,h)=>v<l?l:v>h?h:v;
  const P={"healthW":1.24,"distW":0.085,"dealerBias":-16,"tankerBias":8,"velLP":0.55,"leadCap":22,"leadW":1.12,"aimJitter":0.13,"aimBias":-0.7,"rMin":294,"rMax":456,"strafe":28,"sep":72,"edge":64,"threatR":200,"threatH":5,"threatBonus":0,"fleeBias":16,"finisherHP":24,"aggrRemain":3,"aggrIn":28,"aggrOut":18,"bias":0};
  const S=__s_3;
  S.tick=(S.tick||0)+1;

  // 1) Target selection with role bias (prefer dealers/low health, then distance)
  let tgt=null, best=1e18;
  for(const e of enemies){
    // infer type by size heuristic if available (dealer ~33, tanker ~45, normal ~35)
    let tBias=0; // negative -> prefer
    const sz = e.size || 0;
    if(sz>=43) tBias += P.tankerBias; // tanker
    else if(sz<=34) tBias += P.dealerBias; // dealer
    const k = e.health*P.healthW + e.distance*P.distW + tBias;
    if(k<best){best=k; tgt=e;}
  }

  // 2) Predictive aim using quadratic intercept solve (s=8 px/tick)
  if(tgt){
    let ax=tgt.x, ay=tgt.y; let vx=0, vy=0;
    if(S.last){
      const lvx=S.lastVel?S.lastVel.vx:0, lvy=S.lastVel?S.lastVel.vy:0;
      const ivx=(tgt.x-S.last.x), ivy=(tgt.y-S.last.y);
      vx = lvx*P.velLP + ivx*(1-P.velLP);
      vy = lvy*P.velLP + ivy*(1-P.velLP);
      S.lastVel={vx,vy};
      const rx = tgt.x - tank.x, ry = tgt.y - tank.y; const s2=64;
      const aa = vx*vx + vy*vy - s2;
      const bb = 2*(rx*vx + ry*vy);
      const cc = rx*rx + ry*ry;
      let tHit = 0;
      if (Math.abs(aa) < 1e-6) {
        tHit = bb !== 0 ? CL(-cc / bb, 0, P.leadCap) : 0;
      } else {
        const disc = bb*bb - 4*aa*cc;
        if (disc >= 0) {
          const sd = Math.sqrt(disc);
          const t1 = (-bb - sd) / (2*aa);
          const t2 = (-bb + sd) / (2*aa);
          const tc = t1>0 && t2>0 ? Math.min(t1,t2) : (t1>0?t1:(t2>0?t2:0));
          tHit = CL(tc, 0, P.leadCap);
        } else {
          const d = H(rx,ry); tHit = CL(d/8, 0, P.leadCap);
        }
      }
      ax = tgt.x + vx * P.leadW * tHit;
      ay = tgt.y + vy * P.leadW * tHit;
    }
    const jitter = ((((S.tick*13 + tank.x*7 + tank.y*3 + 33)%23)-11) * (P.aimJitter||0.12) * 0.07) + (P.aimBias||0);
    tank.fire(D(ax-tank.x,ay-tank.y) + jitter);
    S.last={x:tgt.x,y:tgt.y};
  }

  // Helper to attempt moves: cap attempts locally (engine caps successes to 1)
  let tried=0; const go=(a)=>{ if(tried>20) return true; tried++; return tank.move(N(a)); };

  // 3) Bullet avoidance with time-to-collision weighting
  let hot=null, score=1e18;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v;
    const proj=dx*nx+dy*ny; if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const dist=H(px-tank.x,py-tank.y);
      const tt=proj/v; // ticks to closest approach
      const s = dist + tt*P.threatH - (P.threatBonus||0);
      if(dist<P.threatR && s<score){ score=s; hot=b; }
    }
  }
  if(hot){
    const a=D(hot.vx,hot.vy);
    const side=(S.side||1)*P.fleeBias + (P.bias||0)*0.4;
    const options=[a+90+side, a-90-side, a+120, a-120, a+70, a-70, a+150, a-150];
    for(const c of options){ if(go(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edge){ if(go(0)) return; }
  if(tank.x > 900-P.edge){ if(go(180)) return; }
  if(tank.y < P.edge){ if(go(90)) return; }
  if(tank.y > 600-P.edge){ if(go(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e18; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.sep){ const away=D(tank.x-near.x,tank.y-near.y); if(go(away)) return; if(go(away+16)) return; if(go(away-16)) return; }

  // 6) Range control + strafing
  if(tgt){
    const to=D(tgt.x-tank.x,tgt.y-tank.y), d=tgt.distance;
    let r0=P.rMin, r1=P.rMax;
    if(tgt.health<=P.finisherHP || enemies.length<=P.aggrRemain){ r0=Math.max(120, r0-P.aggrIn); r1=Math.max(160, r1-P.aggrOut); }
    if(d<r0){ const aw=to+180+(P.bias||0)*0.3; if(go(aw)) return; if(go(aw+14)) return; if(go(aw-14)) return; }
    else if(d>r1){ if(go(to)) return; if(go(to+12)) return; if(go(to-12)) return; }
    else { const s=to + ((S.side||1) * P.strafe) + (P.bias||0)*0.4; if(go(s)) return; if(go(s+14)) return; if(go(s-14)) return; }
  }

  // 7) Fallback sweep
  for(const s of [0,60,120,180,240,300]){ if(go(s+(P.bias||0))) return; }
}


// ===== 다음 로봇 =====


function name(){return "Nova-9-N1";}
function type(){return Type.NORMAL;}
let __s_4 = { last:null, tick:0, lastVel:null, side:-1 };
function update(tank,enemies,allies,bulletInfo){
  const H=Math.hypot, D=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const N=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const CL=(v,l,h)=>v<l?l:v>h?h:v;
  const P={"healthW":1.24,"distW":0.085,"dealerBias":-12,"tankerBias":6,"velLP":0.55,"leadCap":22,"leadW":1.1,"aimJitter":0.13,"aimBias":0,"rMin":220,"rMax":350,"strafe":24,"sep":76,"edge":60,"threatR":220,"threatH":5,"threatBonus":0,"fleeBias":16,"finisherHP":24,"aggrRemain":3,"aggrIn":28,"aggrOut":18,"bias":4};
  const S=__s_4;
  S.tick=(S.tick||0)+1;

  // 1) Target selection with role bias (prefer dealers/low health, then distance)
  let tgt=null, best=1e18;
  for(const e of enemies){
    // infer type by size heuristic if available (dealer ~33, tanker ~45, normal ~35)
    let tBias=0; // negative -> prefer
    const sz = e.size || 0;
    if(sz>=43) tBias += P.tankerBias; // tanker
    else if(sz<=34) tBias += P.dealerBias; // dealer
    const k = e.health*P.healthW + e.distance*P.distW + tBias;
    if(k<best){best=k; tgt=e;}
  }

  // 2) Predictive aim using quadratic intercept solve (s=8 px/tick)
  if(tgt){
    let ax=tgt.x, ay=tgt.y; let vx=0, vy=0;
    if(S.last){
      const lvx=S.lastVel?S.lastVel.vx:0, lvy=S.lastVel?S.lastVel.vy:0;
      const ivx=(tgt.x-S.last.x), ivy=(tgt.y-S.last.y);
      vx = lvx*P.velLP + ivx*(1-P.velLP);
      vy = lvy*P.velLP + ivy*(1-P.velLP);
      S.lastVel={vx,vy};
      const rx = tgt.x - tank.x, ry = tgt.y - tank.y; const s2=64;
      const aa = vx*vx + vy*vy - s2;
      const bb = 2*(rx*vx + ry*vy);
      const cc = rx*rx + ry*ry;
      let tHit = 0;
      if (Math.abs(aa) < 1e-6) {
        tHit = bb !== 0 ? CL(-cc / bb, 0, P.leadCap) : 0;
      } else {
        const disc = bb*bb - 4*aa*cc;
        if (disc >= 0) {
          const sd = Math.sqrt(disc);
          const t1 = (-bb - sd) / (2*aa);
          const t2 = (-bb + sd) / (2*aa);
          const tc = t1>0 && t2>0 ? Math.min(t1,t2) : (t1>0?t1:(t2>0?t2:0));
          tHit = CL(tc, 0, P.leadCap);
        } else {
          const d = H(rx,ry); tHit = CL(d/8, 0, P.leadCap);
        }
      }
      ax = tgt.x + vx * P.leadW * tHit;
      ay = tgt.y + vy * P.leadW * tHit;
    }
    const jitter = ((((S.tick*13 + tank.x*7 + tank.y*3 + 44)%23)-11) * (P.aimJitter||0.12) * 0.07) + (P.aimBias||0);
    tank.fire(D(ax-tank.x,ay-tank.y) + jitter);
    S.last={x:tgt.x,y:tgt.y};
  }

  // Helper to attempt moves: cap attempts locally (engine caps successes to 1)
  let tried=0; const go=(a)=>{ if(tried>20) return true; tried++; return tank.move(N(a)); };

  // 3) Bullet avoidance with time-to-collision weighting
  let hot=null, score=1e18;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v;
    const proj=dx*nx+dy*ny; if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const dist=H(px-tank.x,py-tank.y);
      const tt=proj/v; // ticks to closest approach
      const s = dist + tt*P.threatH - (P.threatBonus||0);
      if(dist<P.threatR && s<score){ score=s; hot=b; }
    }
  }
  if(hot){
    const a=D(hot.vx,hot.vy);
    const side=(S.side||1)*P.fleeBias + (P.bias||0)*0.4;
    const options=[a+90+side, a-90-side, a+120, a-120, a+70, a-70, a+150, a-150];
    for(const c of options){ if(go(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edge){ if(go(0)) return; }
  if(tank.x > 900-P.edge){ if(go(180)) return; }
  if(tank.y < P.edge){ if(go(90)) return; }
  if(tank.y > 600-P.edge){ if(go(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e18; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.sep){ const away=D(tank.x-near.x,tank.y-near.y); if(go(away)) return; if(go(away+16)) return; if(go(away-16)) return; }

  // 6) Range control + strafing
  if(tgt){
    const to=D(tgt.x-tank.x,tgt.y-tank.y), d=tgt.distance;
    let r0=P.rMin, r1=P.rMax;
    if(tgt.health<=P.finisherHP || enemies.length<=P.aggrRemain){ r0=Math.max(120, r0-P.aggrIn); r1=Math.max(160, r1-P.aggrOut); }
    if(d<r0){ const aw=to+180+(P.bias||0)*0.3; if(go(aw)) return; if(go(aw+14)) return; if(go(aw-14)) return; }
    else if(d>r1){ if(go(to)) return; if(go(to+12)) return; if(go(to-12)) return; }
    else { const s=to + ((S.side||1) * P.strafe) + (P.bias||0)*0.4; if(go(s)) return; if(go(s+14)) return; if(go(s-14)) return; }
  }

  // 7) Fallback sweep
  for(const s of [0,60,120,180,240,300]){ if(go(s+(P.bias||0))) return; }
}


// ===== 다음 로봇 =====


function name(){return "Nova-9-N2";}
function type(){return Type.NORMAL;}
let __s_5 = { last:null, tick:0, lastVel:null, side:1 };
function update(tank,enemies,allies,bulletInfo){
  const H=Math.hypot, D=(x,y)=>Math.atan2(y,x)*180/Math.PI;
  const N=(a)=>{a%=360; if(a<0)a+=360; return a;};
  const CL=(v,l,h)=>v<l?l:v>h?h:v;
  const P={"healthW":1.24,"distW":0.085,"dealerBias":-12,"tankerBias":6,"velLP":0.55,"leadCap":22,"leadW":1.1,"aimJitter":0.13,"aimBias":0,"rMin":220,"rMax":350,"strafe":24,"sep":76,"edge":60,"threatR":220,"threatH":5,"threatBonus":0,"fleeBias":16,"finisherHP":24,"aggrRemain":3,"aggrIn":28,"aggrOut":18,"bias":6};
  const S=__s_5;
  S.tick=(S.tick||0)+1;

  // 1) Target selection with role bias (prefer dealers/low health, then distance)
  let tgt=null, best=1e18;
  for(const e of enemies){
    // infer type by size heuristic if available (dealer ~33, tanker ~45, normal ~35)
    let tBias=0; // negative -> prefer
    const sz = e.size || 0;
    if(sz>=43) tBias += P.tankerBias; // tanker
    else if(sz<=34) tBias += P.dealerBias; // dealer
    const k = e.health*P.healthW + e.distance*P.distW + tBias;
    if(k<best){best=k; tgt=e;}
  }

  // 2) Predictive aim using quadratic intercept solve (s=8 px/tick)
  if(tgt){
    let ax=tgt.x, ay=tgt.y; let vx=0, vy=0;
    if(S.last){
      const lvx=S.lastVel?S.lastVel.vx:0, lvy=S.lastVel?S.lastVel.vy:0;
      const ivx=(tgt.x-S.last.x), ivy=(tgt.y-S.last.y);
      vx = lvx*P.velLP + ivx*(1-P.velLP);
      vy = lvy*P.velLP + ivy*(1-P.velLP);
      S.lastVel={vx,vy};
      const rx = tgt.x - tank.x, ry = tgt.y - tank.y; const s2=64;
      const aa = vx*vx + vy*vy - s2;
      const bb = 2*(rx*vx + ry*vy);
      const cc = rx*rx + ry*ry;
      let tHit = 0;
      if (Math.abs(aa) < 1e-6) {
        tHit = bb !== 0 ? CL(-cc / bb, 0, P.leadCap) : 0;
      } else {
        const disc = bb*bb - 4*aa*cc;
        if (disc >= 0) {
          const sd = Math.sqrt(disc);
          const t1 = (-bb - sd) / (2*aa);
          const t2 = (-bb + sd) / (2*aa);
          const tc = t1>0 && t2>0 ? Math.min(t1,t2) : (t1>0?t1:(t2>0?t2:0));
          tHit = CL(tc, 0, P.leadCap);
        } else {
          const d = H(rx,ry); tHit = CL(d/8, 0, P.leadCap);
        }
      }
      ax = tgt.x + vx * P.leadW * tHit;
      ay = tgt.y + vy * P.leadW * tHit;
    }
    const jitter = ((((S.tick*13 + tank.x*7 + tank.y*3 + 55)%23)-11) * (P.aimJitter||0.12) * 0.07) + (P.aimBias||0);
    tank.fire(D(ax-tank.x,ay-tank.y) + jitter);
    S.last={x:tgt.x,y:tgt.y};
  }

  // Helper to attempt moves: cap attempts locally (engine caps successes to 1)
  let tried=0; const go=(a)=>{ if(tried>20) return true; tried++; return tank.move(N(a)); };

  // 3) Bullet avoidance with time-to-collision weighting
  let hot=null, score=1e18;
  for(const b of bulletInfo){
    const dx=b.x-tank.x, dy=b.y-tank.y; const v=H(b.vx,b.vy)||1; const nx=b.vx/v, ny=b.vy/v;
    const proj=dx*nx+dy*ny; if(proj>0){
      const px=b.x-proj*nx, py=b.y-proj*ny; const dist=H(px-tank.x,py-tank.y);
      const tt=proj/v; // ticks to closest approach
      const s = dist + tt*P.threatH - (P.threatBonus||0);
      if(dist<P.threatR && s<score){ score=s; hot=b; }
    }
  }
  if(hot){
    const a=D(hot.vx,hot.vy);
    const side=(S.side||1)*P.fleeBias + (P.bias||0)*0.4;
    const options=[a+90+side, a-90-side, a+120, a-120, a+70, a-70, a+150, a-150];
    for(const c of options){ if(go(c)) return; }
  }

  // 4) Edge avoidance
  if(tank.x < P.edge){ if(go(0)) return; }
  if(tank.x > 900-P.edge){ if(go(180)) return; }
  if(tank.y < P.edge){ if(go(90)) return; }
  if(tank.y > 600-P.edge){ if(go(270)) return; }

  // 5) Ally separation
  let near=null, ad=1e18; for(const a of allies){ if(a.distance<ad){ ad=a.distance; near=a; } }
  if(near && ad < P.sep){ const away=D(tank.x-near.x,tank.y-near.y); if(go(away)) return; if(go(away+16)) return; if(go(away-16)) return; }

  // 6) Range control + strafing
  if(tgt){
    const to=D(tgt.x-tank.x,tgt.y-tank.y), d=tgt.distance;
    let r0=P.rMin, r1=P.rMax;
    if(tgt.health<=P.finisherHP || enemies.length<=P.aggrRemain){ r0=Math.max(120, r0-P.aggrIn); r1=Math.max(160, r1-P.aggrOut); }
    if(d<r0){ const aw=to+180+(P.bias||0)*0.3; if(go(aw)) return; if(go(aw+14)) return; if(go(aw-14)) return; }
    else if(d>r1){ if(go(to)) return; if(go(to+12)) return; if(go(to-12)) return; }
    else { const s=to + ((S.side||1) * P.strafe) + (P.bias||0)*0.4; if(go(s)) return; if(go(s+14)) return; if(go(s-14)) return; }
  }

  // 7) Fallback sweep
  for(const s of [0,60,120,180,240,300]){ if(go(s+(P.bias||0))) return; }
}