function name(){return "Valkyrie-E1";}
function type(){return Type.TANKER;}
let __state={last:null,lastVel:null};
function update(tank,enemies,allies,bulletInfo){
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI, norm=(a)=>{a%=360; if(a<0)a+=360; return a;}, clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v, H=Math.hypot; const rnd=((tank.x*97+tank.y*131+71)|0)%2?1:-1;
  const P={rMin:190,rMax:280,strafe:34,threatR:170,fleeBias:16,sep:66,edge:56,leadCap:12,leadW:0.92,aimJ:0.2,healthW:1.1,distW:0.16,finHP:24,aggrRemain:3,aggrMin:28,aggrMax:20,bias:-14};
  let tgt=null,b=1e9; for(const e of enemies){ const k=e.health*P.healthW+e.distance*P.distW; if(k<b){b=k;tgt=e;} }
  if(tgt){ let ax=tgt.x, ay=tgt.y; if(__state.last){ const vx=tgt.x-__state.last.x, vy=tgt.y-__state.last.y; const lvx=__state.lastVel?__state.lastVel.vx:0, lvy=__state.lastVel?__state.lastVel.vy:0; const svx=lvx*0.6+vx*0.4, svy=lvy*0.6+vy*0.4; __state.lastVel={vx:svx,vy:svy}; const d=H(tgt.x-tank.x,tgt.y-tank.y); const t=clamp(d/8,0,P.leadCap); ax=tgt.x+svx*P.leadW*t; ay=tgt.y+svy*P.leadW*t; } const jitter=((((tank.x*31+tank.y*17+3)%23)-11)*0.08)*P.aimJ; tank.fire(toDeg(ax-tank.x,ay-tank.y)+jitter); __state.last={x:tgt.x,y:tgt.y}; }
  let tries=0; const tryM=(a)=>{tries++;return tank.move(norm(a));}; let hot=null,minR=1e9; for(const bu of bulletInfo){ const dx=bu.x-tank.x, dy=bu.y-tank.y; const v=H(bu.vx,bu.vy)||1; const nx=bu.vx/v, ny=bu.vy/v; const proj=dx*nx+dy*ny; if(proj>0){ const px=bu.x-proj*nx, py=bu.y-proj*ny; const d=H(px-tank.x,py-tank.y); if(d<minR && d<P.threatR){minR=d;hot=bu;} } }
  if(hot){ const a=toDeg(hot.vx,hot.vy); const c=[a+110+rnd*P.fleeBias,a-110-rnd*P.fleeBias,a+140,a-140,a+80,a-80]; for(const k of c){ if(tryM(k+P.bias*0.6)) return; } }
  if(tank.x<P.edge){ if(tryM(0))return; } if(tank.x>900-P.edge){ if(tryM(180))return; } if(tank.y<P.edge){ if(tryM(90))return; } if(tank.y>600-P.edge){ if(tryM(270))return; }
  let near=null,ad=1e9; for(const a of allies){ if(a.distance<ad){ad=a.distance;near=a;} } if(near && ad<P.sep){ const away=toDeg(tank.x-near.x,tank.y-near.y); if(tryM(away))return; if(tryM(away+24))return; if(tryM(away-24))return; }
  if(tgt){ const to=toDeg(tgt.x-tank.x,tgt.y-tank.y), d=tgt.distance; let minR=P.rMin, maxR=P.rMax; if((tgt.health<=P.finHP)||enemies.length<=P.aggrRemain){minR-=P.aggrMin; maxR-=P.aggrMax;} if(d<minR){ const away=to+180+P.bias*0.4; if(tryM(away))return; if(tryM(away+20))return; if(tryM(away-20))return; } else if(d>maxR){ if(tryM(to))return; if(tryM(to+16))return; if(tryM(to-16))return; } else { const side=to + ((((tank.x*13+tank.y*7+1)|0)%2)?P.strafe:-P.strafe) + P.bias*0.5; if(tryM(side))return; if(tryM(side+16))return; if(tryM(side-16))return; } }
  const sweep=[0,50,100,150,200,250,300,350]; for(const s of sweep){ if(tryM(s+P.bias)) return; }
}

function name(){return "Valkyrie-E2";}
function type(){return Type.TANKER;}
let __state={last:null,lastVel:null};
function update(tank,enemies,allies,bulletInfo){
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI, norm=(a)=>{a%=360; if(a<0)a+=360; return a;}, clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v, H=Math.hypot; const rnd=((tank.x*97+tank.y*131+73)|0)%2?1:-1;
  const P={rMin:190,rMax:280,strafe:34,threatR:170,fleeBias:16,sep:66,edge:56,leadCap:12,leadW:0.92,aimJ:0.2,healthW:1.1,distW:0.16,finHP:24,aggrRemain:3,aggrMin:28,aggrMax:20,bias:16};
  let tgt=null,b=1e9; for(const e of enemies){ const k=e.health*P.healthW+e.distance*P.distW; if(k<b){b=k;tgt=e;} }
  if(tgt){ let ax=tgt.x, ay=tgt.y; if(__state.last){ const vx=tgt.x-__state.last.x, vy=tgt.y-__state.last.y; const lvx=__state.lastVel?__state.lastVel.vx:0, lvy=__state.lastVel?__state.lastVel.vy:0; const svx=lvx*0.6+vx*0.4, svy=lvy*0.6+vy*0.4; __state.lastVel={vx:svx,vy:svy}; const d=H(tgt.x-tank.x,tgt.y-tank.y); const t=clamp(d/8,0,P.leadCap); ax=tgt.x+svx*P.leadW*t; ay=tgt.y+svy*P.leadW*t; } const jitter=((((tank.x*31+tank.y*17+7)%23)-11)*0.08)*P.aimJ; tank.fire(toDeg(ax-tank.x,ay-tank.y)+jitter); __state.last={x:tgt.x,y:tgt.y}; }
  let tries=0; const tryM=(a)=>{tries++;return tank.move(norm(a));}; let hot=null,minR=1e9; for(const bu of bulletInfo){ const dx=bu.x-tank.x, dy=bu.y-tank.y; const v=H(bu.vx,bu.vy)||1; const nx=bu.vx/v, ny=bu.vy/v; const proj=dx*nx+dy*ny; if(proj>0){ const px=bu.x-proj*nx, py=bu.y-proj*ny; const d=H(px-tank.x,py-tank.y); if(d<minR && d<P.threatR){minR=d;hot=bu;} } }
  if(hot){ const a=toDeg(hot.vx,hot.vy); const c=[a+110+rnd*P.fleeBias,a-110-rnd*P.fleeBias,a+140,a-140,a+80,a-80]; for(const k of c){ if(tryM(k+P.bias*0.6)) return; } }
  if(tank.x<P.edge){ if(tryM(0))return; } if(tank.x>900-P.edge){ if(tryM(180))return; } if(tank.y<P.edge){ if(tryM(90))return; } if(tank.y>600-P.edge){ if(tryM(270))return; }
  let near=null,ad=1e9; for(const a of allies){ if(a.distance<ad){ad=a.distance;near=a;} } if(near && ad<P.sep){ const away=toDeg(tank.x-near.x,tank.y-near.y); if(tryM(away))return; if(tryM(away+24))return; if(tryM(away-24))return; }
  if(tgt){ const to=toDeg(tgt.x-tank.x,tgt.y-tank.y), d=tgt.distance; let minR=P.rMin, maxR=P.rMax; if((tgt.health<=P.finHP)||enemies.length<=P.aggrRemain){minR-=P.aggrMin; maxR-=P.aggrMax;} if(d<minR){ const away=to+180+P.bias*0.4; if(tryM(away))return; if(tryM(away+20))return; if(tryM(away-20))return; } else if(d>maxR){ if(tryM(to))return; if(tryM(to+16))return; if(tryM(to-16))return; } else { const side=to + ((((tank.x*13+tank.y*7+5)|0)%2)?P.strafe:-P.strafe) + P.bias*0.5; if(tryM(side))return; if(tryM(side+16))return; if(tryM(side-16))return; } }
  const sweep=[0,50,100,150,200,250,300,350]; for(const s of sweep){ if(tryM(s+P.bias)) return; }
}

function name(){return "Valkyrie-E3";}
function type(){return Type.DEALER;}
let __state={last:null,lastVel:null};
function update(tank,enemies,allies,bulletInfo){
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI, norm=(a)=>{a%=360; if(a<0)a+=360; return a;}, clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v, H=Math.hypot; const rnd=((tank.x*97+tank.y*131+79)|0)%2?1:-1;
  const P={rMin:240,rMax:380,strafe:28,threatR:165,fleeBias:14,sep:62,edge:56,leadCap:14,leadW:1.02,aimJ:0.15,healthW:1.2,distW:0.1,finHP:18,aggrRemain:3,aggrMin:36,aggrMax:26,bias:-10};
  let tgt=null,b=1e9; for(const e of enemies){ const k=e.health*P.healthW+e.distance*P.distW; if(k<b){b=k;tgt=e;} }
  if(tgt){ let ax=tgt.x, ay=tgt.y; if(__state.last){ const vx=tgt.x-__state.last.x, vy=tgt.y-__state.last.y; const lvx=__state.lastVel?__state.lastVel.vx:0, lvy=__state.lastVel?__state.lastVel.vy:0; const svx=lvx*0.55+vx*0.45, svy=lvy*0.55+vy*0.45; __state.lastVel={vx:svx,vy:svy}; const d=H(tgt.x-tank.x,tgt.y-tank.y); const t=clamp(d/8,0,P.leadCap); ax=tgt.x+svx*P.leadW*t; ay=tgt.y+svy*P.leadW*t; } const jitter=((((tank.x*31+tank.y*17+11)%23)-11)*0.06)*P.aimJ; tank.fire(toDeg(ax-tank.x,ay-tank.y)+jitter); __state.last={x:tgt.x,y:tgt.y}; }
  let tries=0; const tryM=(a)=>{tries++;return tank.move(norm(a));}; let hot=null,minR=1e9; for(const bu of bulletInfo){ const dx=bu.x-tank.x, dy=bu.y-tank.y; const v=H(bu.vx,bu.vy)||1; const nx=bu.vx/v, ny=bu.vy/v; const proj=dx*nx+dy*ny; if(proj>0){ const px=bu.x-proj*nx, py=bu.y-proj*ny; const d=H(px-tank.x,py-tank.y); if(d<minR && d<P.threatR){minR=d;hot=bu;} } }
  if(hot){ const a=toDeg(hot.vx,hot.vy); const c=[a+110+rnd*P.fleeBias,a-110-rnd*P.fleeBias,a+140,a-140,a+80,a-80]; for(const k of c){ if(tryM(k+P.bias*0.6)) return; } }
  if(tank.x<P.edge){ if(tryM(0))return; } if(tank.x>900-P.edge){ if(tryM(180))return; } if(tank.y<P.edge){ if(tryM(90))return; } if(tank.y>600-P.edge){ if(tryM(270))return; }
  if(tgt){ const to=toDeg(tgt.x-tank.x,tgt.y-tank.y), d=tgt.distance; let minR=P.rMin, maxR=P.rMax; if((tgt.health<=P.finHP)||enemies.length<=P.aggrRemain){minR-=P.aggrMin; maxR-=P.aggrMax;} if(d<minR){ const away=to+180+P.bias*0.4; if(tryM(away))return; if(tryM(away+18))return; if(tryM(away-18))return; } else if(d>maxR){ if(tryM(to))return; if(tryM(to+12))return; if(tryM(to-12))return; } else { const side=to + ((((tank.x*13+tank.y*7+9)|0)%2)?P.strafe:-P.strafe) + P.bias*0.45; if(tryM(side))return; if(tryM(side+12))return; if(tryM(side-12))return; } }
  const sweep=[0,40,80,120,160,200,240,280,320]; for(const s of sweep){ if(tryM(s+P.bias)) return; }
}

function name(){return "Valkyrie-E4";}
function type(){return Type.DEALER;}
let __state={last:null,lastVel:null};
function update(tank,enemies,allies,bulletInfo){
  const toDeg=(x,y)=>Math.atan2(y,x)*180/Math.PI, norm=(a)=>{a%=360; if(a<0)a+=360; return a;}, clamp=(v,lo,hi)=>v<lo?lo:v>hi?hi:v, H=Math.hypot; const rnd=((tank.x*97+tank.y*131+83)|0)%2?1:-1;
  const P={rMin:245,rMax:385,strafe:28,threatR:165,fleeBias:14,sep:62,edge:56,leadCap:14,leadW:1.02,aimJ:0.15,healthW:1.2,distW:0.1,finHP:18,aggrRemain:3,aggrMin:36,aggrMax:26,bias:8};
  let tgt=null,b=1e9; for(const e of enemies){ const k=e.health*P.healthW+e.distance*P.distW; if(k<b){b=k;tgt=e;} }
  if(tgt){ let ax=tgt.x, ay=tgt.y; if(__state.last){ const vx=tgt.x-__state.last.x, vy=tgt.y-__state.last.y; const lvx=__state.lastVel?__state.lastVel.vx:0, lvy=__state.lastVel?__state.lastVel.vy:0; const svx=lvx*0.55+vx*0.45, svy=lvy*0.55+vy*0.45; __state.lastVel={vx:svx,vy:svy}; const d=H(tgt.x-tank.x,tgt.y-tank.y); const t=clamp(d/8,0,P.leadCap); ax=tgt.x+svx*P.leadW*t; ay=tgt.y+svy*P.leadW*t; } const jitter=((((tank.x*31+tank.y*17+15)%23)-11)*0.06)*P.aimJ; tank.fire(toDeg(ax-tank.x,ay-tank.y)+jitter); __state.last={x:tgt.x,y:tgt.y}; }
  let tries=0; const tryM=(a)=>{tries++;return tank.move(norm(a));}; let hot=null,minR=1e9; for(const bu of bulletInfo){ const dx=bu.x-tank.x, dy=bu.y-tank.y; const v=H(bu.vx,bu.vy)||1; const nx=bu.vx/v, ny=bu.vy/v; const proj=dx*nx+dy*ny; if(proj>0){ const px=bu.x-proj*nx, py=bu.y-proj*ny; const d=H(px-tank.x,py-tank.y); if(d<minR && d<P.threatR){minR=d;hot=bu;} } }
  if(hot){ const a=toDeg(hot.vx,hot.vy); const c=[a+110+rnd*P.fleeBias,a-110-rnd*P.fleeBias,a+140,a-140,a+80,a-80]; for(const k of c){ if(tryM(k+P.bias*0.6)) return; } }
  if(tank.x<P.edge){ if(tryM(0))return; } if(tank.x>900-P.edge){ if(tryM(180))return; } if(tank.y<P.edge){ if(tryM(90))return; } if(tank.y>600-P.edge){ if(tryM(270))return; }
  if(tgt){ const to=toDeg(tgt.x-tank.x,tgt.y-tank.y), d=tgt.distance; let minR=P.rMin, maxR=P.rMax; if((tgt.health<=P.finHP)||enemies.length<=P.aggrRemain){minR-=P.aggrMin; maxR-=P.aggrMax;} if(d<minR){ const away=to+180+P.bias*0.4; if(tryM(away))return; if(tryM(away+18))return; if(tryM(away-18))return; } else if(d>maxR){ if(tryM(to))return; if(tryM(to+12))return; if(tryM(to-12))return; } else { const side=to + ((((tank.x*13+tank.y*7+13)|0)%2)?P.strafe:-P.strafe) + P.bias*0.45; if(tryM(side))return; if(tryM(side+12))return; if(tryM(side-12))return; } }
  const sweep=[0,40,80,120,160,200,240,280,320]; for(const s of sweep){ if(tryM(s+P.bias)) return; }
}
