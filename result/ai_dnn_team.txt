const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  -0.082074,-0.097393,0.054331,0.006246,0.200401,0.060197,0.050761,0.006415,-0.115532,0.089795,0.095389,-0.021985,-0.149150,0.293931,0.119786,-0.019684,
  0.018257,-0.073354,0.141419,0.182874,-0.123309,-0.053747,-0.184390,-0.187361,0.045642,0.070351,-0.135492,0.056440,-0.176969,0.220035,0.192019,-0.164066,
  -0.073105,0.136757,-0.042528,0.086479,-0.055961,0.014834,0.082169,-0.036203,0.060178,-0.090294,-0.026150,-0.035297,-0.088275,0.050345,-0.071589,0.121931,
  -0.016938,-0.166170,-0.180802,0.050063,0.086339,0.091154,0.104155,0.155894,-0.007485,-0.010427,-0.030897,0.003879,0.079514,-0.010787,0.150601,0.101676,
  -0.080144,-0.013522,0.032400,0.171040,-0.043342,0.073492,0.134146,-0.010469,0.102534,-0.106946,0.029443,-0.034095,0.045164,-0.152090,0.120457,0.023415,
  -0.079512,0.196322,0.098731,0.005189,-0.058405,-0.100928,0.039421,-0.008401,-0.118319,0.100397,0.139015,0.039038,-0.145794,-0.053497,-0.048113,-0.035740,
  -0.207083,0.049565,0.129691,0.034773,-0.127064,-0.042628,0.045300,-0.095071,0.098610,0.158106,0.038006,-0.064368,0.031214,-0.222284,-0.107125,0.165698,
  0.016070,-0.035620,0.173601,-0.237848,0.179527,0.188997,0.094459,0.043952,0.058164,-0.072930,-0.000024,-0.210464,0.063881,0.263908,0.123911,0.035210,
  0.135009,-0.108024,0.009255,0.061388,-0.231107,-0.051594,0.226763,0.020695,0.157340,-0.093565,0.069997,-0.104172,-0.003953,-0.110217,-0.088116,-0.148652,
  0.072992,-0.096695,-0.090883,0.139198,0.004850,-0.104845,-0.045347,-0.174512,0.013422,-0.018554,-0.034899,0.117306,0.058639,-0.031225,0.136307,-0.036070,
  -0.018854,-0.184841,0.043438,-0.066537,-0.023642,0.185911,0.115524,-0.023715,0.057020,-0.061495,-0.083205,0.041031,-0.042744,0.042035,0.020485,0.092255,
  0.110339,-0.170435,-0.349784,-0.027439,-0.032205,0.178640,-0.087445,0.112239,-0.119229,0.063544,-0.130245,0.040367,0.160652,-0.135876,0.204548,-0.075057,
  0.023860,0.050925,-0.104341,-0.109567,-0.052708,-0.112448,0.179479,0.112788,0.055922,0.079060,-0.023055,0.269228,0.118577,-0.031285,-0.082294,-0.086199,
  -0.008207,0.256337,-0.078407,-0.040734,-0.215432,-0.144677,0.062848,-0.015824,-0.119412,0.031286,0.143954,0.097237,-0.086161,0.173774,0.134561,-0.064278,
  -0.010012,0.078707,-0.028838,-0.095144,-0.289526,0.142204,0.089730,-0.084441,0.157625,0.162129,-0.123790,0.131727,-0.176088,0.052331,0.092074,-0.008534,
  0.131365,-0.018453,-0.122727,0.208801,0.094049,0.175627,-0.044578,0.127074,-0.093522,0.168617,-0.048722,-0.153703,-0.165726,-0.110127,-0.127721,0.068852,
  -0.158211,0.000608,-0.171792,-0.216812,0.108645,0.057994,0.095085,0.122256,-0.006393,0.118356,-0.099496,-0.149262,-0.283970,-0.023194,0.112891,0.317225,
  0.087716,0.002696,0.191043,0.119212,0.028426,-0.205124,-0.100067,-0.033600,0.067964,-0.063798,-0.247619,-0.056086,-0.005151,-0.077518,-0.147957,-0.087395,
  0.160362,-0.028973,0.085432,-0.052900,-0.078915,0.129359,0.077758,0.074000,-0.196849,0.022394,0.145729,-0.125671,-0.108158,-0.141122,0.101578,0.153152,
  0.023117,0.103607,-0.270037,0.219581,0.073994,0.059273,0.013658,0.136805,-0.114921,-0.208015,-0.092434,0.024306,-0.166840,-0.166029,0.007979,0.131815,
  -0.053934,0.183716,-0.059152,0.170247,-0.161148,-0.043638,-0.150087,-0.137628,0.150858,0.001858,0.035967,0.166671,-0.071167,-0.005226,-0.160675,-0.210114,
  -0.094568,-0.071320,-0.156448,0.065485,0.034556,0.341019,-0.141702,-0.020872,-0.057194,0.153676,0.115281,0.034080,0.132486,0.071027,0.150017,0.107334,
  -0.111398,-0.151948,-0.010772,0.192337,0.047975,-0.303804,-0.045837,0.164003,0.239450,0.207772,-0.002037,0.073553,-0.379522,-0.028282,0.032625,-0.014988,
  -0.153892,-0.205115,0.266805,-0.074326,0.142664,0.099246,-0.022450,0.047735,0.138121,0.163215,0.185825,0.074994,0.004883,0.023075,-0.112780,-0.071678,
  0.088214,-0.190165,0.025928,0.022729,-0.173865,-0.047034,0.136636,0.022845,0.064284,0.254597,-0.070506,0.127193,0.046229,-0.183525,0.240912,-0.050028,
  -0.109204,-0.045925,0.065744,-0.040551,0.091627,-0.086349,0.162626,-0.113335,-0.234229,-0.166431,-0.301527,0.006779,-0.037876,0.002533,-0.250100,-0.174988,
  0.178006,-0.079339,-0.100732,-0.025869,0.121941,-0.010659,-0.168039,0.045235,0.088174,-0.173461,0.157029,-0.036010,-0.244082,-0.157451,-0.207062,-0.038211,
  0.042514,-0.105549,-0.150663,0.013915,-0.106391,0.052886,0.022910,0.214404,0.110630,-0.146493,0.135893,0.075456,-0.016040,-0.333308,0.001567,-0.257586,
  0.074067,0.163742,-0.167761,-0.040575,0.049044,-0.064677,0.041211,0.025500,0.037886,0.042067,0.022586,0.041418,-0.141770,0.001833,-0.021478,0.150991,
  0.164907,-0.129160,-0.227836,0.043723,0.069057,-0.069007,0.146469,-0.134330,0.052862,-0.093791,0.065788,-0.121749,0.054711,-0.146045,-0.013120,0.108104,
  0.217375,-0.067687,0.071811,-0.001165,0.013391,-0.072135,-0.063470,0.299581,-0.065777,-0.023219,0.178366,-0.066688,0.187999,0.035176,-0.056560,-0.164263,
  -0.311203,0.190030,0.116792,0.029426,0.143395,-0.131410,0.023025,0.017825,-0.123254,0.092327,-0.157185,0.048027,-0.011256,-0.005479,0.241825,-0.307118,
  0.052904,0.029200,0.120054,0.016507,0.058482,-0.025942,0.048343,-0.018954,-0.107731,0.009371,-0.045291,-0.203866,0.030326,-0.077397,-0.014640,0.042870,
  -0.104064,-0.020557,-0.181475,0.023020,-0.232835,0.308911,0.104499,-0.014756,0.090619,0.048062,-0.183602,-0.053319,-0.251849,0.169196,-0.068964,0.329820,
  0.169982,-0.125576,0.289365,-0.158353,-0.158846,0.053386,0.060231,0.176882,0.037609,-0.184526,0.180258,-0.025647,-0.035633,-0.048098,-0.030781,-0.023076,
  0.021854,0.082428,-0.014240,-0.194508,-0.011144,-0.129332,-0.056041,0.015530,0.090069,-0.157087,-0.077227,-0.096212,0.052530,0.054626,0.110033,-0.254684
];

const b1 = [0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-N1"; }

function type(){ return Type.NORMAL; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}

// ===== 다음 로봇 =====

const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  -0.082074,-0.097393,0.054331,0.006246,0.200401,0.060197,0.050761,0.006415,-0.115532,0.089795,0.095389,-0.021985,-0.149150,0.293931,0.119786,-0.019684,
  0.018257,-0.073354,0.141419,0.182874,-0.123309,-0.053747,-0.184390,-0.187361,0.045642,0.070351,-0.135492,0.056440,-0.176969,0.220035,0.192019,-0.164066,
  -0.073105,0.136757,-0.042528,0.086479,-0.055961,0.014834,0.082169,-0.036203,0.060178,-0.090294,-0.026150,-0.035297,-0.088275,0.050345,-0.071589,0.121931,
  -0.016938,-0.166170,-0.180802,0.050063,0.086339,0.091154,0.104155,0.155894,-0.007485,-0.010427,-0.030897,0.003879,0.079514,-0.010787,0.150601,0.101676,
  -0.080144,-0.013522,0.032400,0.171040,-0.043342,0.073492,0.134146,-0.010469,0.102534,-0.106946,0.029443,-0.034095,0.045164,-0.152090,0.120457,0.023415,
  -0.079512,0.196322,0.098731,0.005189,-0.058405,-0.100928,0.039421,-0.008401,-0.118319,0.100397,0.139015,0.039038,-0.145794,-0.053497,-0.048113,-0.035740,
  -0.207083,0.049565,0.129691,0.034773,-0.127064,-0.042628,0.045300,-0.095071,0.098610,0.158106,0.038006,-0.064368,0.031214,-0.222284,-0.107125,0.165698,
  0.016070,-0.035620,0.173601,-0.237848,0.179527,0.188997,0.094459,0.043952,0.058164,-0.072930,-0.000024,-0.210464,0.063881,0.263908,0.123911,0.035210,
  0.135009,-0.108024,0.009255,0.061388,-0.231107,-0.051594,0.226763,0.020695,0.157340,-0.093565,0.069997,-0.104172,-0.003953,-0.110217,-0.088116,-0.148652,
  0.072992,-0.096695,-0.090883,0.139198,0.004850,-0.104845,-0.045347,-0.174512,0.013422,-0.018554,-0.034899,0.117306,0.058639,-0.031225,0.136307,-0.036070,
  -0.018854,-0.184841,0.043438,-0.066537,-0.023642,0.185911,0.115524,-0.023715,0.057020,-0.061495,-0.083205,0.041031,-0.042744,0.042035,0.020485,0.092255,
  0.110339,-0.170435,-0.349784,-0.027439,-0.032205,0.178640,-0.087445,0.112239,-0.119229,0.063544,-0.130245,0.040367,0.160652,-0.135876,0.204548,-0.075057,
  0.023860,0.050925,-0.104341,-0.109567,-0.052708,-0.112448,0.179479,0.112788,0.055922,0.079060,-0.023055,0.269228,0.118577,-0.031285,-0.082294,-0.086199,
  -0.008207,0.256337,-0.078407,-0.040734,-0.215432,-0.144677,0.062848,-0.015824,-0.119412,0.031286,0.143954,0.097237,-0.086161,0.173774,0.134561,-0.064278,
  -0.010012,0.078707,-0.028838,-0.095144,-0.289526,0.142204,0.089730,-0.084441,0.157625,0.162129,-0.123790,0.131727,-0.176088,0.052331,0.092074,-0.008534,
  0.131365,-0.018453,-0.122727,0.208801,0.094049,0.175627,-0.044578,0.127074,-0.093522,0.168617,-0.048722,-0.153703,-0.165726,-0.110127,-0.127721,0.068852,
  -0.158211,0.000608,-0.171792,-0.216812,0.108645,0.057994,0.095085,0.122256,-0.006393,0.118356,-0.099496,-0.149262,-0.283970,-0.023194,0.112891,0.317225,
  0.087716,0.002696,0.191043,0.119212,0.028426,-0.205124,-0.100067,-0.033600,0.067964,-0.063798,-0.247619,-0.056086,-0.005151,-0.077518,-0.147957,-0.087395,
  0.160362,-0.028973,0.085432,-0.052900,-0.078915,0.129359,0.077758,0.074000,-0.196849,0.022394,0.145729,-0.125671,-0.108158,-0.141122,0.101578,0.153152,
  0.023117,0.103607,-0.270037,0.219581,0.073994,0.059273,0.013658,0.136805,-0.114921,-0.208015,-0.092434,0.024306,-0.166840,-0.166029,0.007979,0.131815,
  -0.053934,0.183716,-0.059152,0.170247,-0.161148,-0.043638,-0.150087,-0.137628,0.150858,0.001858,0.035967,0.166671,-0.071167,-0.005226,-0.160675,-0.210114,
  -0.094568,-0.071320,-0.156448,0.065485,0.034556,0.341019,-0.141702,-0.020872,-0.057194,0.153676,0.115281,0.034080,0.132486,0.071027,0.150017,0.107334,
  -0.111398,-0.151948,-0.010772,0.192337,0.047975,-0.303804,-0.045837,0.164003,0.239450,0.207772,-0.002037,0.073553,-0.379522,-0.028282,0.032625,-0.014988,
  -0.153892,-0.205115,0.266805,-0.074326,0.142664,0.099246,-0.022450,0.047735,0.138121,0.163215,0.185825,0.074994,0.004883,0.023075,-0.112780,-0.071678,
  0.088214,-0.190165,0.025928,0.022729,-0.173865,-0.047034,0.136636,0.022845,0.064284,0.254597,-0.070506,0.127193,0.046229,-0.183525,0.240912,-0.050028,
  -0.109204,-0.045925,0.065744,-0.040551,0.091627,-0.086349,0.162626,-0.113335,-0.234229,-0.166431,-0.301527,0.006779,-0.037876,0.002533,-0.250100,-0.174988,
  0.178006,-0.079339,-0.100732,-0.025869,0.121941,-0.010659,-0.168039,0.045235,0.088174,-0.173461,0.157029,-0.036010,-0.244082,-0.157451,-0.207062,-0.038211,
  0.042514,-0.105549,-0.150663,0.013915,-0.106391,0.052886,0.022910,0.214404,0.110630,-0.146493,0.135893,0.075456,-0.016040,-0.333308,0.001567,-0.257586,
  0.074067,0.163742,-0.167761,-0.040575,0.049044,-0.064677,0.041211,0.025500,0.037886,0.042067,0.022586,0.041418,-0.141770,0.001833,-0.021478,0.150991,
  0.164907,-0.129160,-0.227836,0.043723,0.069057,-0.069007,0.146469,-0.134330,0.052862,-0.093791,0.065788,-0.121749,0.054711,-0.146045,-0.013120,0.108104,
  0.217375,-0.067687,0.071811,-0.001165,0.013391,-0.072135,-0.063470,0.299581,-0.065777,-0.023219,0.178366,-0.066688,0.187999,0.035176,-0.056560,-0.164263,
  -0.311203,0.190030,0.116792,0.029426,0.143395,-0.131410,0.023025,0.017825,-0.123254,0.092327,-0.157185,0.048027,-0.011256,-0.005479,0.241825,-0.307118,
  0.052904,0.029200,0.120054,0.016507,0.058482,-0.025942,0.048343,-0.018954,-0.107731,0.009371,-0.045291,-0.203866,0.030326,-0.077397,-0.014640,0.042870,
  -0.104064,-0.020557,-0.181475,0.023020,-0.232835,0.308911,0.104499,-0.014756,0.090619,0.048062,-0.183602,-0.053319,-0.251849,0.169196,-0.068964,0.329820,
  0.169982,-0.125576,0.289365,-0.158353,-0.158846,0.053386,0.060231,0.176882,0.037609,-0.184526,0.180258,-0.025647,-0.035633,-0.048098,-0.030781,-0.023076,
  0.021854,0.082428,-0.014240,-0.194508,-0.011144,-0.129332,-0.056041,0.015530,0.090069,-0.157087,-0.077227,-0.096212,0.052530,0.054626,0.110033,-0.254684
];

const b1 = [0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-D2"; }

function type(){ return Type.DEALER; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}

// ===== 다음 로봇 =====

const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  -0.082074,-0.097393,0.054331,0.006246,0.200401,0.060197,0.050761,0.006415,-0.115532,0.089795,0.095389,-0.021985,-0.149150,0.293931,0.119786,-0.019684,
  0.018257,-0.073354,0.141419,0.182874,-0.123309,-0.053747,-0.184390,-0.187361,0.045642,0.070351,-0.135492,0.056440,-0.176969,0.220035,0.192019,-0.164066,
  -0.073105,0.136757,-0.042528,0.086479,-0.055961,0.014834,0.082169,-0.036203,0.060178,-0.090294,-0.026150,-0.035297,-0.088275,0.050345,-0.071589,0.121931,
  -0.016938,-0.166170,-0.180802,0.050063,0.086339,0.091154,0.104155,0.155894,-0.007485,-0.010427,-0.030897,0.003879,0.079514,-0.010787,0.150601,0.101676,
  -0.080144,-0.013522,0.032400,0.171040,-0.043342,0.073492,0.134146,-0.010469,0.102534,-0.106946,0.029443,-0.034095,0.045164,-0.152090,0.120457,0.023415,
  -0.079512,0.196322,0.098731,0.005189,-0.058405,-0.100928,0.039421,-0.008401,-0.118319,0.100397,0.139015,0.039038,-0.145794,-0.053497,-0.048113,-0.035740,
  -0.207083,0.049565,0.129691,0.034773,-0.127064,-0.042628,0.045300,-0.095071,0.098610,0.158106,0.038006,-0.064368,0.031214,-0.222284,-0.107125,0.165698,
  0.016070,-0.035620,0.173601,-0.237848,0.179527,0.188997,0.094459,0.043952,0.058164,-0.072930,-0.000024,-0.210464,0.063881,0.263908,0.123911,0.035210,
  0.135009,-0.108024,0.009255,0.061388,-0.231107,-0.051594,0.226763,0.020695,0.157340,-0.093565,0.069997,-0.104172,-0.003953,-0.110217,-0.088116,-0.148652,
  0.072992,-0.096695,-0.090883,0.139198,0.004850,-0.104845,-0.045347,-0.174512,0.013422,-0.018554,-0.034899,0.117306,0.058639,-0.031225,0.136307,-0.036070,
  -0.018854,-0.184841,0.043438,-0.066537,-0.023642,0.185911,0.115524,-0.023715,0.057020,-0.061495,-0.083205,0.041031,-0.042744,0.042035,0.020485,0.092255,
  0.110339,-0.170435,-0.349784,-0.027439,-0.032205,0.178640,-0.087445,0.112239,-0.119229,0.063544,-0.130245,0.040367,0.160652,-0.135876,0.204548,-0.075057,
  0.023860,0.050925,-0.104341,-0.109567,-0.052708,-0.112448,0.179479,0.112788,0.055922,0.079060,-0.023055,0.269228,0.118577,-0.031285,-0.082294,-0.086199,
  -0.008207,0.256337,-0.078407,-0.040734,-0.215432,-0.144677,0.062848,-0.015824,-0.119412,0.031286,0.143954,0.097237,-0.086161,0.173774,0.134561,-0.064278,
  -0.010012,0.078707,-0.028838,-0.095144,-0.289526,0.142204,0.089730,-0.084441,0.157625,0.162129,-0.123790,0.131727,-0.176088,0.052331,0.092074,-0.008534,
  0.131365,-0.018453,-0.122727,0.208801,0.094049,0.175627,-0.044578,0.127074,-0.093522,0.168617,-0.048722,-0.153703,-0.165726,-0.110127,-0.127721,0.068852,
  -0.158211,0.000608,-0.171792,-0.216812,0.108645,0.057994,0.095085,0.122256,-0.006393,0.118356,-0.099496,-0.149262,-0.283970,-0.023194,0.112891,0.317225,
  0.087716,0.002696,0.191043,0.119212,0.028426,-0.205124,-0.100067,-0.033600,0.067964,-0.063798,-0.247619,-0.056086,-0.005151,-0.077518,-0.147957,-0.087395,
  0.160362,-0.028973,0.085432,-0.052900,-0.078915,0.129359,0.077758,0.074000,-0.196849,0.022394,0.145729,-0.125671,-0.108158,-0.141122,0.101578,0.153152,
  0.023117,0.103607,-0.270037,0.219581,0.073994,0.059273,0.013658,0.136805,-0.114921,-0.208015,-0.092434,0.024306,-0.166840,-0.166029,0.007979,0.131815,
  -0.053934,0.183716,-0.059152,0.170247,-0.161148,-0.043638,-0.150087,-0.137628,0.150858,0.001858,0.035967,0.166671,-0.071167,-0.005226,-0.160675,-0.210114,
  -0.094568,-0.071320,-0.156448,0.065485,0.034556,0.341019,-0.141702,-0.020872,-0.057194,0.153676,0.115281,0.034080,0.132486,0.071027,0.150017,0.107334,
  -0.111398,-0.151948,-0.010772,0.192337,0.047975,-0.303804,-0.045837,0.164003,0.239450,0.207772,-0.002037,0.073553,-0.379522,-0.028282,0.032625,-0.014988,
  -0.153892,-0.205115,0.266805,-0.074326,0.142664,0.099246,-0.022450,0.047735,0.138121,0.163215,0.185825,0.074994,0.004883,0.023075,-0.112780,-0.071678,
  0.088214,-0.190165,0.025928,0.022729,-0.173865,-0.047034,0.136636,0.022845,0.064284,0.254597,-0.070506,0.127193,0.046229,-0.183525,0.240912,-0.050028,
  -0.109204,-0.045925,0.065744,-0.040551,0.091627,-0.086349,0.162626,-0.113335,-0.234229,-0.166431,-0.301527,0.006779,-0.037876,0.002533,-0.250100,-0.174988,
  0.178006,-0.079339,-0.100732,-0.025869,0.121941,-0.010659,-0.168039,0.045235,0.088174,-0.173461,0.157029,-0.036010,-0.244082,-0.157451,-0.207062,-0.038211,
  0.042514,-0.105549,-0.150663,0.013915,-0.106391,0.052886,0.022910,0.214404,0.110630,-0.146493,0.135893,0.075456,-0.016040,-0.333308,0.001567,-0.257586,
  0.074067,0.163742,-0.167761,-0.040575,0.049044,-0.064677,0.041211,0.025500,0.037886,0.042067,0.022586,0.041418,-0.141770,0.001833,-0.021478,0.150991,
  0.164907,-0.129160,-0.227836,0.043723,0.069057,-0.069007,0.146469,-0.134330,0.052862,-0.093791,0.065788,-0.121749,0.054711,-0.146045,-0.013120,0.108104,
  0.217375,-0.067687,0.071811,-0.001165,0.013391,-0.072135,-0.063470,0.299581,-0.065777,-0.023219,0.178366,-0.066688,0.187999,0.035176,-0.056560,-0.164263,
  -0.311203,0.190030,0.116792,0.029426,0.143395,-0.131410,0.023025,0.017825,-0.123254,0.092327,-0.157185,0.048027,-0.011256,-0.005479,0.241825,-0.307118,
  0.052904,0.029200,0.120054,0.016507,0.058482,-0.025942,0.048343,-0.018954,-0.107731,0.009371,-0.045291,-0.203866,0.030326,-0.077397,-0.014640,0.042870,
  -0.104064,-0.020557,-0.181475,0.023020,-0.232835,0.308911,0.104499,-0.014756,0.090619,0.048062,-0.183602,-0.053319,-0.251849,0.169196,-0.068964,0.329820,
  0.169982,-0.125576,0.289365,-0.158353,-0.158846,0.053386,0.060231,0.176882,0.037609,-0.184526,0.180258,-0.025647,-0.035633,-0.048098,-0.030781,-0.023076,
  0.021854,0.082428,-0.014240,-0.194508,-0.011144,-0.129332,-0.056041,0.015530,0.090069,-0.157087,-0.077227,-0.096212,0.052530,0.054626,0.110033,-0.254684
];

const b1 = [0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-T3"; }

function type(){ return Type.TANKER; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}

// ===== 다음 로봇 =====

const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  -0.082074,-0.097393,0.054331,0.006246,0.200401,0.060197,0.050761,0.006415,-0.115532,0.089795,0.095389,-0.021985,-0.149150,0.293931,0.119786,-0.019684,
  0.018257,-0.073354,0.141419,0.182874,-0.123309,-0.053747,-0.184390,-0.187361,0.045642,0.070351,-0.135492,0.056440,-0.176969,0.220035,0.192019,-0.164066,
  -0.073105,0.136757,-0.042528,0.086479,-0.055961,0.014834,0.082169,-0.036203,0.060178,-0.090294,-0.026150,-0.035297,-0.088275,0.050345,-0.071589,0.121931,
  -0.016938,-0.166170,-0.180802,0.050063,0.086339,0.091154,0.104155,0.155894,-0.007485,-0.010427,-0.030897,0.003879,0.079514,-0.010787,0.150601,0.101676,
  -0.080144,-0.013522,0.032400,0.171040,-0.043342,0.073492,0.134146,-0.010469,0.102534,-0.106946,0.029443,-0.034095,0.045164,-0.152090,0.120457,0.023415,
  -0.079512,0.196322,0.098731,0.005189,-0.058405,-0.100928,0.039421,-0.008401,-0.118319,0.100397,0.139015,0.039038,-0.145794,-0.053497,-0.048113,-0.035740,
  -0.207083,0.049565,0.129691,0.034773,-0.127064,-0.042628,0.045300,-0.095071,0.098610,0.158106,0.038006,-0.064368,0.031214,-0.222284,-0.107125,0.165698,
  0.016070,-0.035620,0.173601,-0.237848,0.179527,0.188997,0.094459,0.043952,0.058164,-0.072930,-0.000024,-0.210464,0.063881,0.263908,0.123911,0.035210,
  0.135009,-0.108024,0.009255,0.061388,-0.231107,-0.051594,0.226763,0.020695,0.157340,-0.093565,0.069997,-0.104172,-0.003953,-0.110217,-0.088116,-0.148652,
  0.072992,-0.096695,-0.090883,0.139198,0.004850,-0.104845,-0.045347,-0.174512,0.013422,-0.018554,-0.034899,0.117306,0.058639,-0.031225,0.136307,-0.036070,
  -0.018854,-0.184841,0.043438,-0.066537,-0.023642,0.185911,0.115524,-0.023715,0.057020,-0.061495,-0.083205,0.041031,-0.042744,0.042035,0.020485,0.092255,
  0.110339,-0.170435,-0.349784,-0.027439,-0.032205,0.178640,-0.087445,0.112239,-0.119229,0.063544,-0.130245,0.040367,0.160652,-0.135876,0.204548,-0.075057,
  0.023860,0.050925,-0.104341,-0.109567,-0.052708,-0.112448,0.179479,0.112788,0.055922,0.079060,-0.023055,0.269228,0.118577,-0.031285,-0.082294,-0.086199,
  -0.008207,0.256337,-0.078407,-0.040734,-0.215432,-0.144677,0.062848,-0.015824,-0.119412,0.031286,0.143954,0.097237,-0.086161,0.173774,0.134561,-0.064278,
  -0.010012,0.078707,-0.028838,-0.095144,-0.289526,0.142204,0.089730,-0.084441,0.157625,0.162129,-0.123790,0.131727,-0.176088,0.052331,0.092074,-0.008534,
  0.131365,-0.018453,-0.122727,0.208801,0.094049,0.175627,-0.044578,0.127074,-0.093522,0.168617,-0.048722,-0.153703,-0.165726,-0.110127,-0.127721,0.068852,
  -0.158211,0.000608,-0.171792,-0.216812,0.108645,0.057994,0.095085,0.122256,-0.006393,0.118356,-0.099496,-0.149262,-0.283970,-0.023194,0.112891,0.317225,
  0.087716,0.002696,0.191043,0.119212,0.028426,-0.205124,-0.100067,-0.033600,0.067964,-0.063798,-0.247619,-0.056086,-0.005151,-0.077518,-0.147957,-0.087395,
  0.160362,-0.028973,0.085432,-0.052900,-0.078915,0.129359,0.077758,0.074000,-0.196849,0.022394,0.145729,-0.125671,-0.108158,-0.141122,0.101578,0.153152,
  0.023117,0.103607,-0.270037,0.219581,0.073994,0.059273,0.013658,0.136805,-0.114921,-0.208015,-0.092434,0.024306,-0.166840,-0.166029,0.007979,0.131815,
  -0.053934,0.183716,-0.059152,0.170247,-0.161148,-0.043638,-0.150087,-0.137628,0.150858,0.001858,0.035967,0.166671,-0.071167,-0.005226,-0.160675,-0.210114,
  -0.094568,-0.071320,-0.156448,0.065485,0.034556,0.341019,-0.141702,-0.020872,-0.057194,0.153676,0.115281,0.034080,0.132486,0.071027,0.150017,0.107334,
  -0.111398,-0.151948,-0.010772,0.192337,0.047975,-0.303804,-0.045837,0.164003,0.239450,0.207772,-0.002037,0.073553,-0.379522,-0.028282,0.032625,-0.014988,
  -0.153892,-0.205115,0.266805,-0.074326,0.142664,0.099246,-0.022450,0.047735,0.138121,0.163215,0.185825,0.074994,0.004883,0.023075,-0.112780,-0.071678,
  0.088214,-0.190165,0.025928,0.022729,-0.173865,-0.047034,0.136636,0.022845,0.064284,0.254597,-0.070506,0.127193,0.046229,-0.183525,0.240912,-0.050028,
  -0.109204,-0.045925,0.065744,-0.040551,0.091627,-0.086349,0.162626,-0.113335,-0.234229,-0.166431,-0.301527,0.006779,-0.037876,0.002533,-0.250100,-0.174988,
  0.178006,-0.079339,-0.100732,-0.025869,0.121941,-0.010659,-0.168039,0.045235,0.088174,-0.173461,0.157029,-0.036010,-0.244082,-0.157451,-0.207062,-0.038211,
  0.042514,-0.105549,-0.150663,0.013915,-0.106391,0.052886,0.022910,0.214404,0.110630,-0.146493,0.135893,0.075456,-0.016040,-0.333308,0.001567,-0.257586,
  0.074067,0.163742,-0.167761,-0.040575,0.049044,-0.064677,0.041211,0.025500,0.037886,0.042067,0.022586,0.041418,-0.141770,0.001833,-0.021478,0.150991,
  0.164907,-0.129160,-0.227836,0.043723,0.069057,-0.069007,0.146469,-0.134330,0.052862,-0.093791,0.065788,-0.121749,0.054711,-0.146045,-0.013120,0.108104,
  0.217375,-0.067687,0.071811,-0.001165,0.013391,-0.072135,-0.063470,0.299581,-0.065777,-0.023219,0.178366,-0.066688,0.187999,0.035176,-0.056560,-0.164263,
  -0.311203,0.190030,0.116792,0.029426,0.143395,-0.131410,0.023025,0.017825,-0.123254,0.092327,-0.157185,0.048027,-0.011256,-0.005479,0.241825,-0.307118,
  0.052904,0.029200,0.120054,0.016507,0.058482,-0.025942,0.048343,-0.018954,-0.107731,0.009371,-0.045291,-0.203866,0.030326,-0.077397,-0.014640,0.042870,
  -0.104064,-0.020557,-0.181475,0.023020,-0.232835,0.308911,0.104499,-0.014756,0.090619,0.048062,-0.183602,-0.053319,-0.251849,0.169196,-0.068964,0.329820,
  0.169982,-0.125576,0.289365,-0.158353,-0.158846,0.053386,0.060231,0.176882,0.037609,-0.184526,0.180258,-0.025647,-0.035633,-0.048098,-0.030781,-0.023076,
  0.021854,0.082428,-0.014240,-0.194508,-0.011144,-0.129332,-0.056041,0.015530,0.090069,-0.157087,-0.077227,-0.096212,0.052530,0.054626,0.110033,-0.254684
];

const b1 = [0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-D4"; }

function type(){ return Type.DEALER; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}

// ===== 다음 로봇 =====

const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  -0.082074,-0.097393,0.054331,0.006246,0.200401,0.060197,0.050761,0.006415,-0.115532,0.089795,0.095389,-0.021985,-0.149150,0.293931,0.119786,-0.019684,
  0.018257,-0.073354,0.141419,0.182874,-0.123309,-0.053747,-0.184390,-0.187361,0.045642,0.070351,-0.135492,0.056440,-0.176969,0.220035,0.192019,-0.164066,
  -0.073105,0.136757,-0.042528,0.086479,-0.055961,0.014834,0.082169,-0.036203,0.060178,-0.090294,-0.026150,-0.035297,-0.088275,0.050345,-0.071589,0.121931,
  -0.016938,-0.166170,-0.180802,0.050063,0.086339,0.091154,0.104155,0.155894,-0.007485,-0.010427,-0.030897,0.003879,0.079514,-0.010787,0.150601,0.101676,
  -0.080144,-0.013522,0.032400,0.171040,-0.043342,0.073492,0.134146,-0.010469,0.102534,-0.106946,0.029443,-0.034095,0.045164,-0.152090,0.120457,0.023415,
  -0.079512,0.196322,0.098731,0.005189,-0.058405,-0.100928,0.039421,-0.008401,-0.118319,0.100397,0.139015,0.039038,-0.145794,-0.053497,-0.048113,-0.035740,
  -0.207083,0.049565,0.129691,0.034773,-0.127064,-0.042628,0.045300,-0.095071,0.098610,0.158106,0.038006,-0.064368,0.031214,-0.222284,-0.107125,0.165698,
  0.016070,-0.035620,0.173601,-0.237848,0.179527,0.188997,0.094459,0.043952,0.058164,-0.072930,-0.000024,-0.210464,0.063881,0.263908,0.123911,0.035210,
  0.135009,-0.108024,0.009255,0.061388,-0.231107,-0.051594,0.226763,0.020695,0.157340,-0.093565,0.069997,-0.104172,-0.003953,-0.110217,-0.088116,-0.148652,
  0.072992,-0.096695,-0.090883,0.139198,0.004850,-0.104845,-0.045347,-0.174512,0.013422,-0.018554,-0.034899,0.117306,0.058639,-0.031225,0.136307,-0.036070,
  -0.018854,-0.184841,0.043438,-0.066537,-0.023642,0.185911,0.115524,-0.023715,0.057020,-0.061495,-0.083205,0.041031,-0.042744,0.042035,0.020485,0.092255,
  0.110339,-0.170435,-0.349784,-0.027439,-0.032205,0.178640,-0.087445,0.112239,-0.119229,0.063544,-0.130245,0.040367,0.160652,-0.135876,0.204548,-0.075057,
  0.023860,0.050925,-0.104341,-0.109567,-0.052708,-0.112448,0.179479,0.112788,0.055922,0.079060,-0.023055,0.269228,0.118577,-0.031285,-0.082294,-0.086199,
  -0.008207,0.256337,-0.078407,-0.040734,-0.215432,-0.144677,0.062848,-0.015824,-0.119412,0.031286,0.143954,0.097237,-0.086161,0.173774,0.134561,-0.064278,
  -0.010012,0.078707,-0.028838,-0.095144,-0.289526,0.142204,0.089730,-0.084441,0.157625,0.162129,-0.123790,0.131727,-0.176088,0.052331,0.092074,-0.008534,
  0.131365,-0.018453,-0.122727,0.208801,0.094049,0.175627,-0.044578,0.127074,-0.093522,0.168617,-0.048722,-0.153703,-0.165726,-0.110127,-0.127721,0.068852,
  -0.158211,0.000608,-0.171792,-0.216812,0.108645,0.057994,0.095085,0.122256,-0.006393,0.118356,-0.099496,-0.149262,-0.283970,-0.023194,0.112891,0.317225,
  0.087716,0.002696,0.191043,0.119212,0.028426,-0.205124,-0.100067,-0.033600,0.067964,-0.063798,-0.247619,-0.056086,-0.005151,-0.077518,-0.147957,-0.087395,
  0.160362,-0.028973,0.085432,-0.052900,-0.078915,0.129359,0.077758,0.074000,-0.196849,0.022394,0.145729,-0.125671,-0.108158,-0.141122,0.101578,0.153152,
  0.023117,0.103607,-0.270037,0.219581,0.073994,0.059273,0.013658,0.136805,-0.114921,-0.208015,-0.092434,0.024306,-0.166840,-0.166029,0.007979,0.131815,
  -0.053934,0.183716,-0.059152,0.170247,-0.161148,-0.043638,-0.150087,-0.137628,0.150858,0.001858,0.035967,0.166671,-0.071167,-0.005226,-0.160675,-0.210114,
  -0.094568,-0.071320,-0.156448,0.065485,0.034556,0.341019,-0.141702,-0.020872,-0.057194,0.153676,0.115281,0.034080,0.132486,0.071027,0.150017,0.107334,
  -0.111398,-0.151948,-0.010772,0.192337,0.047975,-0.303804,-0.045837,0.164003,0.239450,0.207772,-0.002037,0.073553,-0.379522,-0.028282,0.032625,-0.014988,
  -0.153892,-0.205115,0.266805,-0.074326,0.142664,0.099246,-0.022450,0.047735,0.138121,0.163215,0.185825,0.074994,0.004883,0.023075,-0.112780,-0.071678,
  0.088214,-0.190165,0.025928,0.022729,-0.173865,-0.047034,0.136636,0.022845,0.064284,0.254597,-0.070506,0.127193,0.046229,-0.183525,0.240912,-0.050028,
  -0.109204,-0.045925,0.065744,-0.040551,0.091627,-0.086349,0.162626,-0.113335,-0.234229,-0.166431,-0.301527,0.006779,-0.037876,0.002533,-0.250100,-0.174988,
  0.178006,-0.079339,-0.100732,-0.025869,0.121941,-0.010659,-0.168039,0.045235,0.088174,-0.173461,0.157029,-0.036010,-0.244082,-0.157451,-0.207062,-0.038211,
  0.042514,-0.105549,-0.150663,0.013915,-0.106391,0.052886,0.022910,0.214404,0.110630,-0.146493,0.135893,0.075456,-0.016040,-0.333308,0.001567,-0.257586,
  0.074067,0.163742,-0.167761,-0.040575,0.049044,-0.064677,0.041211,0.025500,0.037886,0.042067,0.022586,0.041418,-0.141770,0.001833,-0.021478,0.150991,
  0.164907,-0.129160,-0.227836,0.043723,0.069057,-0.069007,0.146469,-0.134330,0.052862,-0.093791,0.065788,-0.121749,0.054711,-0.146045,-0.013120,0.108104,
  0.217375,-0.067687,0.071811,-0.001165,0.013391,-0.072135,-0.063470,0.299581,-0.065777,-0.023219,0.178366,-0.066688,0.187999,0.035176,-0.056560,-0.164263,
  -0.311203,0.190030,0.116792,0.029426,0.143395,-0.131410,0.023025,0.017825,-0.123254,0.092327,-0.157185,0.048027,-0.011256,-0.005479,0.241825,-0.307118,
  0.052904,0.029200,0.120054,0.016507,0.058482,-0.025942,0.048343,-0.018954,-0.107731,0.009371,-0.045291,-0.203866,0.030326,-0.077397,-0.014640,0.042870,
  -0.104064,-0.020557,-0.181475,0.023020,-0.232835,0.308911,0.104499,-0.014756,0.090619,0.048062,-0.183602,-0.053319,-0.251849,0.169196,-0.068964,0.329820,
  0.169982,-0.125576,0.289365,-0.158353,-0.158846,0.053386,0.060231,0.176882,0.037609,-0.184526,0.180258,-0.025647,-0.035633,-0.048098,-0.030781,-0.023076,
  0.021854,0.082428,-0.014240,-0.194508,-0.011144,-0.129332,-0.056041,0.015530,0.090069,-0.157087,-0.077227,-0.096212,0.052530,0.054626,0.110033,-0.254684
];

const b1 = [0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-T5"; }

function type(){ return Type.TANKER; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}

// ===== 다음 로봇 =====

const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  -0.082074,-0.097393,0.054331,0.006246,0.200401,0.060197,0.050761,0.006415,-0.115532,0.089795,0.095389,-0.021985,-0.149150,0.293931,0.119786,-0.019684,
  0.018257,-0.073354,0.141419,0.182874,-0.123309,-0.053747,-0.184390,-0.187361,0.045642,0.070351,-0.135492,0.056440,-0.176969,0.220035,0.192019,-0.164066,
  -0.073105,0.136757,-0.042528,0.086479,-0.055961,0.014834,0.082169,-0.036203,0.060178,-0.090294,-0.026150,-0.035297,-0.088275,0.050345,-0.071589,0.121931,
  -0.016938,-0.166170,-0.180802,0.050063,0.086339,0.091154,0.104155,0.155894,-0.007485,-0.010427,-0.030897,0.003879,0.079514,-0.010787,0.150601,0.101676,
  -0.080144,-0.013522,0.032400,0.171040,-0.043342,0.073492,0.134146,-0.010469,0.102534,-0.106946,0.029443,-0.034095,0.045164,-0.152090,0.120457,0.023415,
  -0.079512,0.196322,0.098731,0.005189,-0.058405,-0.100928,0.039421,-0.008401,-0.118319,0.100397,0.139015,0.039038,-0.145794,-0.053497,-0.048113,-0.035740,
  -0.207083,0.049565,0.129691,0.034773,-0.127064,-0.042628,0.045300,-0.095071,0.098610,0.158106,0.038006,-0.064368,0.031214,-0.222284,-0.107125,0.165698,
  0.016070,-0.035620,0.173601,-0.237848,0.179527,0.188997,0.094459,0.043952,0.058164,-0.072930,-0.000024,-0.210464,0.063881,0.263908,0.123911,0.035210,
  0.135009,-0.108024,0.009255,0.061388,-0.231107,-0.051594,0.226763,0.020695,0.157340,-0.093565,0.069997,-0.104172,-0.003953,-0.110217,-0.088116,-0.148652,
  0.072992,-0.096695,-0.090883,0.139198,0.004850,-0.104845,-0.045347,-0.174512,0.013422,-0.018554,-0.034899,0.117306,0.058639,-0.031225,0.136307,-0.036070,
  -0.018854,-0.184841,0.043438,-0.066537,-0.023642,0.185911,0.115524,-0.023715,0.057020,-0.061495,-0.083205,0.041031,-0.042744,0.042035,0.020485,0.092255,
  0.110339,-0.170435,-0.349784,-0.027439,-0.032205,0.178640,-0.087445,0.112239,-0.119229,0.063544,-0.130245,0.040367,0.160652,-0.135876,0.204548,-0.075057,
  0.023860,0.050925,-0.104341,-0.109567,-0.052708,-0.112448,0.179479,0.112788,0.055922,0.079060,-0.023055,0.269228,0.118577,-0.031285,-0.082294,-0.086199,
  -0.008207,0.256337,-0.078407,-0.040734,-0.215432,-0.144677,0.062848,-0.015824,-0.119412,0.031286,0.143954,0.097237,-0.086161,0.173774,0.134561,-0.064278,
  -0.010012,0.078707,-0.028838,-0.095144,-0.289526,0.142204,0.089730,-0.084441,0.157625,0.162129,-0.123790,0.131727,-0.176088,0.052331,0.092074,-0.008534,
  0.131365,-0.018453,-0.122727,0.208801,0.094049,0.175627,-0.044578,0.127074,-0.093522,0.168617,-0.048722,-0.153703,-0.165726,-0.110127,-0.127721,0.068852,
  -0.158211,0.000608,-0.171792,-0.216812,0.108645,0.057994,0.095085,0.122256,-0.006393,0.118356,-0.099496,-0.149262,-0.283970,-0.023194,0.112891,0.317225,
  0.087716,0.002696,0.191043,0.119212,0.028426,-0.205124,-0.100067,-0.033600,0.067964,-0.063798,-0.247619,-0.056086,-0.005151,-0.077518,-0.147957,-0.087395,
  0.160362,-0.028973,0.085432,-0.052900,-0.078915,0.129359,0.077758,0.074000,-0.196849,0.022394,0.145729,-0.125671,-0.108158,-0.141122,0.101578,0.153152,
  0.023117,0.103607,-0.270037,0.219581,0.073994,0.059273,0.013658,0.136805,-0.114921,-0.208015,-0.092434,0.024306,-0.166840,-0.166029,0.007979,0.131815,
  -0.053934,0.183716,-0.059152,0.170247,-0.161148,-0.043638,-0.150087,-0.137628,0.150858,0.001858,0.035967,0.166671,-0.071167,-0.005226,-0.160675,-0.210114,
  -0.094568,-0.071320,-0.156448,0.065485,0.034556,0.341019,-0.141702,-0.020872,-0.057194,0.153676,0.115281,0.034080,0.132486,0.071027,0.150017,0.107334,
  -0.111398,-0.151948,-0.010772,0.192337,0.047975,-0.303804,-0.045837,0.164003,0.239450,0.207772,-0.002037,0.073553,-0.379522,-0.028282,0.032625,-0.014988,
  -0.153892,-0.205115,0.266805,-0.074326,0.142664,0.099246,-0.022450,0.047735,0.138121,0.163215,0.185825,0.074994,0.004883,0.023075,-0.112780,-0.071678,
  0.088214,-0.190165,0.025928,0.022729,-0.173865,-0.047034,0.136636,0.022845,0.064284,0.254597,-0.070506,0.127193,0.046229,-0.183525,0.240912,-0.050028,
  -0.109204,-0.045925,0.065744,-0.040551,0.091627,-0.086349,0.162626,-0.113335,-0.234229,-0.166431,-0.301527,0.006779,-0.037876,0.002533,-0.250100,-0.174988,
  0.178006,-0.079339,-0.100732,-0.025869,0.121941,-0.010659,-0.168039,0.045235,0.088174,-0.173461,0.157029,-0.036010,-0.244082,-0.157451,-0.207062,-0.038211,
  0.042514,-0.105549,-0.150663,0.013915,-0.106391,0.052886,0.022910,0.214404,0.110630,-0.146493,0.135893,0.075456,-0.016040,-0.333308,0.001567,-0.257586,
  0.074067,0.163742,-0.167761,-0.040575,0.049044,-0.064677,0.041211,0.025500,0.037886,0.042067,0.022586,0.041418,-0.141770,0.001833,-0.021478,0.150991,
  0.164907,-0.129160,-0.227836,0.043723,0.069057,-0.069007,0.146469,-0.134330,0.052862,-0.093791,0.065788,-0.121749,0.054711,-0.146045,-0.013120,0.108104,
  0.217375,-0.067687,0.071811,-0.001165,0.013391,-0.072135,-0.063470,0.299581,-0.065777,-0.023219,0.178366,-0.066688,0.187999,0.035176,-0.056560,-0.164263,
  -0.311203,0.190030,0.116792,0.029426,0.143395,-0.131410,0.023025,0.017825,-0.123254,0.092327,-0.157185,0.048027,-0.011256,-0.005479,0.241825,-0.307118,
  0.052904,0.029200,0.120054,0.016507,0.058482,-0.025942,0.048343,-0.018954,-0.107731,0.009371,-0.045291,-0.203866,0.030326,-0.077397,-0.014640,0.042870,
  -0.104064,-0.020557,-0.181475,0.023020,-0.232835,0.308911,0.104499,-0.014756,0.090619,0.048062,-0.183602,-0.053319,-0.251849,0.169196,-0.068964,0.329820,
  0.169982,-0.125576,0.289365,-0.158353,-0.158846,0.053386,0.060231,0.176882,0.037609,-0.184526,0.180258,-0.025647,-0.035633,-0.048098,-0.030781,-0.023076,
  0.021854,0.082428,-0.014240,-0.194508,-0.011144,-0.129332,-0.056041,0.015530,0.090069,-0.157087,-0.077227,-0.096212,0.052530,0.054626,0.110033,-0.254684
];

const b1 = [0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-D6"; }

function type(){ return Type.DEALER; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}