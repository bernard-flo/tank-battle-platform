const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  0.582062,-0.004422,0.101912,-0.430240,-0.323511,0.160446,-0.243630,0.502214,-0.538493,0.572980,-0.579084,-0.555837,-0.314886,0.149704,-0.236549,0.490733,
  0.193279,-0.506214,0.205202,0.795497,-0.937471,-0.129365,0.211468,0.078928,-0.591651,0.541104,0.295569,0.181637,-0.562802,0.055355,-1.401205,-0.098183,
  0.766045,-0.789744,0.734987,-0.469149,-0.515390,0.038221,0.910620,0.072962,0.852209,-0.191945,-0.775526,0.387219,1.022315,0.432086,0.982431,0.128955,
  -0.421020,0.181648,0.042514,-0.620478,-0.388093,0.052371,-0.829469,0.283862,-0.255894,0.138712,-0.019862,0.381414,0.127852,-0.305071,-0.314089,0.170891,
  -0.774249,0.499462,-1.335115,-0.110844,0.888480,-0.169166,-0.394411,-0.529109,0.035638,0.119353,0.302066,-0.120061,-0.573342,-0.723741,0.428766,-0.354678,
  -0.484436,-0.401648,-0.669118,0.508881,0.713702,-0.348717,-0.692296,-0.023702,-0.419307,0.024801,0.037246,0.616603,-0.591039,0.232280,0.864077,0.289554,
  -0.092454,0.193354,0.051298,0.041596,0.175466,0.887342,-0.211591,0.206063,0.722596,0.040132,-0.296409,0.118351,0.837529,-0.501453,0.195126,0.140649,
  -0.484001,-0.651431,1.496470,0.219145,-0.923754,1.249911,-0.116518,-0.226720,0.511533,-0.400736,0.008513,0.532310,0.690911,-0.341246,-0.297463,-0.286734,
  0.884389,0.276661,-0.028769,0.020964,-0.139725,-0.668166,0.753836,0.388281,0.545360,-0.786872,0.310995,0.232900,-0.464213,-0.096886,-0.376019,-0.408304,
  -1.407049,-1.628496,-0.728540,0.815620,0.785486,0.617528,-0.348468,-0.264519,0.157112,0.045363,0.481111,0.006569,-0.618466,0.690492,0.335508,-0.438631,
  0.084113,0.049626,-0.007769,-0.494998,-0.922592,0.687242,0.505174,-0.259546,0.394189,0.065423,0.718090,0.351648,-0.160495,-1.170300,-0.451668,-0.293333,
  0.410349,-0.686014,0.397738,0.055458,-0.434350,0.525390,0.027632,-0.307475,-0.119387,0.512893,1.370692,0.603172,0.503966,-0.172408,0.588777,-0.112825,
  -0.959814,0.366846,-1.350021,-0.515003,-0.954013,0.243608,-0.845882,0.314087,-0.361902,0.753449,-0.091477,-0.232034,0.224488,-0.145186,0.044008,-0.383193,
  0.108602,-0.644410,0.735074,-0.275522,-0.191044,-0.262677,-0.224960,0.657585,-0.418572,0.466193,0.797486,-0.002735,-0.797761,0.487525,-0.734620,-0.145386,
  -0.682036,2.057983,0.530829,0.741340,-1.161418,0.565787,-0.470370,-0.432940,0.278912,0.327345,0.292702,-0.954710,0.863639,-0.148246,0.222380,0.061524,
  0.149784,-0.661839,-0.508995,-0.844734,-0.119577,-0.122905,0.088489,-0.026509,0.246047,0.183438,0.036203,0.364293,0.160082,0.892785,-0.416688,0.716591,
  -0.553074,-0.339740,0.744403,-0.242244,0.611656,-0.315259,-0.705644,0.573383,-0.942220,-0.014276,1.137555,0.250492,0.363836,-0.515134,-0.388958,-0.025327,
  0.107794,-0.325835,0.493816,-0.957294,0.482511,-0.598320,0.261332,-0.133945,0.050289,-0.794864,-0.597970,0.046099,-0.680280,-1.042992,-0.346744,0.333740,
  -0.409415,0.946970,-0.206467,0.381909,-0.732609,0.670435,0.425805,-0.798814,0.411748,0.238774,-0.055827,-0.345188,-0.238435,0.230271,0.079484,0.058332,
  0.136781,0.800240,-0.965033,0.680490,0.820711,0.028623,-0.192743,0.318330,-0.618961,0.245783,-0.347366,0.447863,-0.852766,-0.195658,-0.196525,-0.312063,
  0.774837,0.331559,0.312780,-0.699010,0.905042,0.342059,-0.820639,0.675179,0.099354,0.020517,-0.058167,-0.668288,0.566887,0.075239,0.888284,-0.331061,
  -0.391025,0.067179,0.547773,0.377415,0.373199,0.468164,-0.566051,0.558130,-0.002290,-0.032695,-0.086308,0.503436,0.395000,0.320712,-0.321783,-0.080087,
  0.369599,0.747902,-0.595936,-0.268095,0.480359,0.242208,0.377960,-0.152831,0.298842,0.112888,-0.045804,0.568891,-0.351660,-0.233747,-0.228629,-1.182515,
  -0.031129,0.395997,-0.077291,0.148540,0.935341,0.116215,0.384909,0.464537,0.080425,-0.483801,0.112319,-0.161811,-1.559460,-0.293568,0.250379,0.037966,
  -0.305633,0.235945,-0.452988,-0.233777,0.193076,0.436121,0.740187,-0.786886,-0.596475,-0.034620,-0.542967,0.380716,0.146877,0.073923,0.240407,-0.549821,
  -0.830013,-0.376709,-0.172201,-0.086069,0.938401,0.750696,-0.267689,0.529876,-0.834561,-0.930679,-0.456880,-0.520149,-0.525783,-0.071602,0.581421,0.348330,
  0.009448,-1.006441,0.455655,0.059129,-0.227334,-1.710709,-0.028895,-0.717813,0.669504,0.350325,0.627015,-0.395535,0.084958,0.636106,0.090661,0.425707,
  -0.329949,-0.844492,1.004622,-0.697727,-0.544209,1.013037,0.249640,-0.397750,0.185004,-0.311922,-0.352535,0.135461,-0.168631,-0.357523,-0.479592,-0.007449,
  -0.881531,0.100952,0.273318,0.288692,0.081563,-0.756385,0.287003,-0.576641,0.026740,-0.154622,-0.237603,0.141127,0.119939,0.142369,-0.613860,0.076851,
  0.563006,0.100588,0.305109,0.373276,0.379365,0.327895,0.057712,0.673928,-1.071739,-0.160195,-0.136493,0.360125,0.278608,0.816856,0.301355,-0.679121,
  -0.111854,-0.765044,0.045541,-0.006350,0.198591,0.180553,1.678023,-0.536974,0.051090,0.276422,1.147829,-0.141654,-0.526853,-0.807602,0.372153,0.391616,
  0.286973,-0.441691,-0.587669,0.122311,-0.964645,0.770359,0.380876,-0.011208,0.527312,1.037601,0.384112,0.099111,-0.410752,0.482081,0.156506,-0.896721,
  0.145228,-0.079874,-0.134795,-0.760887,0.501502,-0.810319,-0.772861,-0.381676,-1.214050,-0.186594,1.195540,-0.096930,-0.006662,-0.072906,-0.311136,-0.042058,
  -0.437500,0.407620,-0.241092,-0.550357,-0.346396,-0.081852,-0.383459,-0.331868,0.469906,-0.136112,0.195800,0.539267,-0.298656,0.606850,-0.220002,-0.085684,
  0.445626,0.029589,0.131467,0.256895,-0.190586,0.401739,-0.240558,0.000117,-0.123205,0.453095,-0.204023,0.357607,-0.290686,0.979865,-0.844095,1.080282,
  0.624254,0.621692,0.432497,-0.008166,-0.834926,-0.569418,0.077179,-0.408343,0.670390,-0.317654,0.247608,-0.453237,0.797817,-0.039162,0.785596,-0.211637
];

const b1 = [0.210916,0.382110,1.147780,-0.336713,-0.646360,-0.801532,-1.232648,-0.244900,0.053362];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-N1"; }

function type(){ return Type.NORMAL; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}

// ===== 다음 로봇 =====

const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  0.582062,-0.004422,0.101912,-0.430240,-0.323511,0.160446,-0.243630,0.502214,-0.538493,0.572980,-0.579084,-0.555837,-0.314886,0.149704,-0.236549,0.490733,
  0.193279,-0.506214,0.205202,0.795497,-0.937471,-0.129365,0.211468,0.078928,-0.591651,0.541104,0.295569,0.181637,-0.562802,0.055355,-1.401205,-0.098183,
  0.766045,-0.789744,0.734987,-0.469149,-0.515390,0.038221,0.910620,0.072962,0.852209,-0.191945,-0.775526,0.387219,1.022315,0.432086,0.982431,0.128955,
  -0.421020,0.181648,0.042514,-0.620478,-0.388093,0.052371,-0.829469,0.283862,-0.255894,0.138712,-0.019862,0.381414,0.127852,-0.305071,-0.314089,0.170891,
  -0.774249,0.499462,-1.335115,-0.110844,0.888480,-0.169166,-0.394411,-0.529109,0.035638,0.119353,0.302066,-0.120061,-0.573342,-0.723741,0.428766,-0.354678,
  -0.484436,-0.401648,-0.669118,0.508881,0.713702,-0.348717,-0.692296,-0.023702,-0.419307,0.024801,0.037246,0.616603,-0.591039,0.232280,0.864077,0.289554,
  -0.092454,0.193354,0.051298,0.041596,0.175466,0.887342,-0.211591,0.206063,0.722596,0.040132,-0.296409,0.118351,0.837529,-0.501453,0.195126,0.140649,
  -0.484001,-0.651431,1.496470,0.219145,-0.923754,1.249911,-0.116518,-0.226720,0.511533,-0.400736,0.008513,0.532310,0.690911,-0.341246,-0.297463,-0.286734,
  0.884389,0.276661,-0.028769,0.020964,-0.139725,-0.668166,0.753836,0.388281,0.545360,-0.786872,0.310995,0.232900,-0.464213,-0.096886,-0.376019,-0.408304,
  -1.407049,-1.628496,-0.728540,0.815620,0.785486,0.617528,-0.348468,-0.264519,0.157112,0.045363,0.481111,0.006569,-0.618466,0.690492,0.335508,-0.438631,
  0.084113,0.049626,-0.007769,-0.494998,-0.922592,0.687242,0.505174,-0.259546,0.394189,0.065423,0.718090,0.351648,-0.160495,-1.170300,-0.451668,-0.293333,
  0.410349,-0.686014,0.397738,0.055458,-0.434350,0.525390,0.027632,-0.307475,-0.119387,0.512893,1.370692,0.603172,0.503966,-0.172408,0.588777,-0.112825,
  -0.959814,0.366846,-1.350021,-0.515003,-0.954013,0.243608,-0.845882,0.314087,-0.361902,0.753449,-0.091477,-0.232034,0.224488,-0.145186,0.044008,-0.383193,
  0.108602,-0.644410,0.735074,-0.275522,-0.191044,-0.262677,-0.224960,0.657585,-0.418572,0.466193,0.797486,-0.002735,-0.797761,0.487525,-0.734620,-0.145386,
  -0.682036,2.057983,0.530829,0.741340,-1.161418,0.565787,-0.470370,-0.432940,0.278912,0.327345,0.292702,-0.954710,0.863639,-0.148246,0.222380,0.061524,
  0.149784,-0.661839,-0.508995,-0.844734,-0.119577,-0.122905,0.088489,-0.026509,0.246047,0.183438,0.036203,0.364293,0.160082,0.892785,-0.416688,0.716591,
  -0.553074,-0.339740,0.744403,-0.242244,0.611656,-0.315259,-0.705644,0.573383,-0.942220,-0.014276,1.137555,0.250492,0.363836,-0.515134,-0.388958,-0.025327,
  0.107794,-0.325835,0.493816,-0.957294,0.482511,-0.598320,0.261332,-0.133945,0.050289,-0.794864,-0.597970,0.046099,-0.680280,-1.042992,-0.346744,0.333740,
  -0.409415,0.946970,-0.206467,0.381909,-0.732609,0.670435,0.425805,-0.798814,0.411748,0.238774,-0.055827,-0.345188,-0.238435,0.230271,0.079484,0.058332,
  0.136781,0.800240,-0.965033,0.680490,0.820711,0.028623,-0.192743,0.318330,-0.618961,0.245783,-0.347366,0.447863,-0.852766,-0.195658,-0.196525,-0.312063,
  0.774837,0.331559,0.312780,-0.699010,0.905042,0.342059,-0.820639,0.675179,0.099354,0.020517,-0.058167,-0.668288,0.566887,0.075239,0.888284,-0.331061,
  -0.391025,0.067179,0.547773,0.377415,0.373199,0.468164,-0.566051,0.558130,-0.002290,-0.032695,-0.086308,0.503436,0.395000,0.320712,-0.321783,-0.080087,
  0.369599,0.747902,-0.595936,-0.268095,0.480359,0.242208,0.377960,-0.152831,0.298842,0.112888,-0.045804,0.568891,-0.351660,-0.233747,-0.228629,-1.182515,
  -0.031129,0.395997,-0.077291,0.148540,0.935341,0.116215,0.384909,0.464537,0.080425,-0.483801,0.112319,-0.161811,-1.559460,-0.293568,0.250379,0.037966,
  -0.305633,0.235945,-0.452988,-0.233777,0.193076,0.436121,0.740187,-0.786886,-0.596475,-0.034620,-0.542967,0.380716,0.146877,0.073923,0.240407,-0.549821,
  -0.830013,-0.376709,-0.172201,-0.086069,0.938401,0.750696,-0.267689,0.529876,-0.834561,-0.930679,-0.456880,-0.520149,-0.525783,-0.071602,0.581421,0.348330,
  0.009448,-1.006441,0.455655,0.059129,-0.227334,-1.710709,-0.028895,-0.717813,0.669504,0.350325,0.627015,-0.395535,0.084958,0.636106,0.090661,0.425707,
  -0.329949,-0.844492,1.004622,-0.697727,-0.544209,1.013037,0.249640,-0.397750,0.185004,-0.311922,-0.352535,0.135461,-0.168631,-0.357523,-0.479592,-0.007449,
  -0.881531,0.100952,0.273318,0.288692,0.081563,-0.756385,0.287003,-0.576641,0.026740,-0.154622,-0.237603,0.141127,0.119939,0.142369,-0.613860,0.076851,
  0.563006,0.100588,0.305109,0.373276,0.379365,0.327895,0.057712,0.673928,-1.071739,-0.160195,-0.136493,0.360125,0.278608,0.816856,0.301355,-0.679121,
  -0.111854,-0.765044,0.045541,-0.006350,0.198591,0.180553,1.678023,-0.536974,0.051090,0.276422,1.147829,-0.141654,-0.526853,-0.807602,0.372153,0.391616,
  0.286973,-0.441691,-0.587669,0.122311,-0.964645,0.770359,0.380876,-0.011208,0.527312,1.037601,0.384112,0.099111,-0.410752,0.482081,0.156506,-0.896721,
  0.145228,-0.079874,-0.134795,-0.760887,0.501502,-0.810319,-0.772861,-0.381676,-1.214050,-0.186594,1.195540,-0.096930,-0.006662,-0.072906,-0.311136,-0.042058,
  -0.437500,0.407620,-0.241092,-0.550357,-0.346396,-0.081852,-0.383459,-0.331868,0.469906,-0.136112,0.195800,0.539267,-0.298656,0.606850,-0.220002,-0.085684,
  0.445626,0.029589,0.131467,0.256895,-0.190586,0.401739,-0.240558,0.000117,-0.123205,0.453095,-0.204023,0.357607,-0.290686,0.979865,-0.844095,1.080282,
  0.624254,0.621692,0.432497,-0.008166,-0.834926,-0.569418,0.077179,-0.408343,0.670390,-0.317654,0.247608,-0.453237,0.797817,-0.039162,0.785596,-0.211637
];

const b1 = [0.210916,0.382110,1.147780,-0.336713,-0.646360,-0.801532,-1.232648,-0.244900,0.053362];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-D2"; }

function type(){ return Type.DEALER; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}

// ===== 다음 로봇 =====

const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  0.582062,-0.004422,0.101912,-0.430240,-0.323511,0.160446,-0.243630,0.502214,-0.538493,0.572980,-0.579084,-0.555837,-0.314886,0.149704,-0.236549,0.490733,
  0.193279,-0.506214,0.205202,0.795497,-0.937471,-0.129365,0.211468,0.078928,-0.591651,0.541104,0.295569,0.181637,-0.562802,0.055355,-1.401205,-0.098183,
  0.766045,-0.789744,0.734987,-0.469149,-0.515390,0.038221,0.910620,0.072962,0.852209,-0.191945,-0.775526,0.387219,1.022315,0.432086,0.982431,0.128955,
  -0.421020,0.181648,0.042514,-0.620478,-0.388093,0.052371,-0.829469,0.283862,-0.255894,0.138712,-0.019862,0.381414,0.127852,-0.305071,-0.314089,0.170891,
  -0.774249,0.499462,-1.335115,-0.110844,0.888480,-0.169166,-0.394411,-0.529109,0.035638,0.119353,0.302066,-0.120061,-0.573342,-0.723741,0.428766,-0.354678,
  -0.484436,-0.401648,-0.669118,0.508881,0.713702,-0.348717,-0.692296,-0.023702,-0.419307,0.024801,0.037246,0.616603,-0.591039,0.232280,0.864077,0.289554,
  -0.092454,0.193354,0.051298,0.041596,0.175466,0.887342,-0.211591,0.206063,0.722596,0.040132,-0.296409,0.118351,0.837529,-0.501453,0.195126,0.140649,
  -0.484001,-0.651431,1.496470,0.219145,-0.923754,1.249911,-0.116518,-0.226720,0.511533,-0.400736,0.008513,0.532310,0.690911,-0.341246,-0.297463,-0.286734,
  0.884389,0.276661,-0.028769,0.020964,-0.139725,-0.668166,0.753836,0.388281,0.545360,-0.786872,0.310995,0.232900,-0.464213,-0.096886,-0.376019,-0.408304,
  -1.407049,-1.628496,-0.728540,0.815620,0.785486,0.617528,-0.348468,-0.264519,0.157112,0.045363,0.481111,0.006569,-0.618466,0.690492,0.335508,-0.438631,
  0.084113,0.049626,-0.007769,-0.494998,-0.922592,0.687242,0.505174,-0.259546,0.394189,0.065423,0.718090,0.351648,-0.160495,-1.170300,-0.451668,-0.293333,
  0.410349,-0.686014,0.397738,0.055458,-0.434350,0.525390,0.027632,-0.307475,-0.119387,0.512893,1.370692,0.603172,0.503966,-0.172408,0.588777,-0.112825,
  -0.959814,0.366846,-1.350021,-0.515003,-0.954013,0.243608,-0.845882,0.314087,-0.361902,0.753449,-0.091477,-0.232034,0.224488,-0.145186,0.044008,-0.383193,
  0.108602,-0.644410,0.735074,-0.275522,-0.191044,-0.262677,-0.224960,0.657585,-0.418572,0.466193,0.797486,-0.002735,-0.797761,0.487525,-0.734620,-0.145386,
  -0.682036,2.057983,0.530829,0.741340,-1.161418,0.565787,-0.470370,-0.432940,0.278912,0.327345,0.292702,-0.954710,0.863639,-0.148246,0.222380,0.061524,
  0.149784,-0.661839,-0.508995,-0.844734,-0.119577,-0.122905,0.088489,-0.026509,0.246047,0.183438,0.036203,0.364293,0.160082,0.892785,-0.416688,0.716591,
  -0.553074,-0.339740,0.744403,-0.242244,0.611656,-0.315259,-0.705644,0.573383,-0.942220,-0.014276,1.137555,0.250492,0.363836,-0.515134,-0.388958,-0.025327,
  0.107794,-0.325835,0.493816,-0.957294,0.482511,-0.598320,0.261332,-0.133945,0.050289,-0.794864,-0.597970,0.046099,-0.680280,-1.042992,-0.346744,0.333740,
  -0.409415,0.946970,-0.206467,0.381909,-0.732609,0.670435,0.425805,-0.798814,0.411748,0.238774,-0.055827,-0.345188,-0.238435,0.230271,0.079484,0.058332,
  0.136781,0.800240,-0.965033,0.680490,0.820711,0.028623,-0.192743,0.318330,-0.618961,0.245783,-0.347366,0.447863,-0.852766,-0.195658,-0.196525,-0.312063,
  0.774837,0.331559,0.312780,-0.699010,0.905042,0.342059,-0.820639,0.675179,0.099354,0.020517,-0.058167,-0.668288,0.566887,0.075239,0.888284,-0.331061,
  -0.391025,0.067179,0.547773,0.377415,0.373199,0.468164,-0.566051,0.558130,-0.002290,-0.032695,-0.086308,0.503436,0.395000,0.320712,-0.321783,-0.080087,
  0.369599,0.747902,-0.595936,-0.268095,0.480359,0.242208,0.377960,-0.152831,0.298842,0.112888,-0.045804,0.568891,-0.351660,-0.233747,-0.228629,-1.182515,
  -0.031129,0.395997,-0.077291,0.148540,0.935341,0.116215,0.384909,0.464537,0.080425,-0.483801,0.112319,-0.161811,-1.559460,-0.293568,0.250379,0.037966,
  -0.305633,0.235945,-0.452988,-0.233777,0.193076,0.436121,0.740187,-0.786886,-0.596475,-0.034620,-0.542967,0.380716,0.146877,0.073923,0.240407,-0.549821,
  -0.830013,-0.376709,-0.172201,-0.086069,0.938401,0.750696,-0.267689,0.529876,-0.834561,-0.930679,-0.456880,-0.520149,-0.525783,-0.071602,0.581421,0.348330,
  0.009448,-1.006441,0.455655,0.059129,-0.227334,-1.710709,-0.028895,-0.717813,0.669504,0.350325,0.627015,-0.395535,0.084958,0.636106,0.090661,0.425707,
  -0.329949,-0.844492,1.004622,-0.697727,-0.544209,1.013037,0.249640,-0.397750,0.185004,-0.311922,-0.352535,0.135461,-0.168631,-0.357523,-0.479592,-0.007449,
  -0.881531,0.100952,0.273318,0.288692,0.081563,-0.756385,0.287003,-0.576641,0.026740,-0.154622,-0.237603,0.141127,0.119939,0.142369,-0.613860,0.076851,
  0.563006,0.100588,0.305109,0.373276,0.379365,0.327895,0.057712,0.673928,-1.071739,-0.160195,-0.136493,0.360125,0.278608,0.816856,0.301355,-0.679121,
  -0.111854,-0.765044,0.045541,-0.006350,0.198591,0.180553,1.678023,-0.536974,0.051090,0.276422,1.147829,-0.141654,-0.526853,-0.807602,0.372153,0.391616,
  0.286973,-0.441691,-0.587669,0.122311,-0.964645,0.770359,0.380876,-0.011208,0.527312,1.037601,0.384112,0.099111,-0.410752,0.482081,0.156506,-0.896721,
  0.145228,-0.079874,-0.134795,-0.760887,0.501502,-0.810319,-0.772861,-0.381676,-1.214050,-0.186594,1.195540,-0.096930,-0.006662,-0.072906,-0.311136,-0.042058,
  -0.437500,0.407620,-0.241092,-0.550357,-0.346396,-0.081852,-0.383459,-0.331868,0.469906,-0.136112,0.195800,0.539267,-0.298656,0.606850,-0.220002,-0.085684,
  0.445626,0.029589,0.131467,0.256895,-0.190586,0.401739,-0.240558,0.000117,-0.123205,0.453095,-0.204023,0.357607,-0.290686,0.979865,-0.844095,1.080282,
  0.624254,0.621692,0.432497,-0.008166,-0.834926,-0.569418,0.077179,-0.408343,0.670390,-0.317654,0.247608,-0.453237,0.797817,-0.039162,0.785596,-0.211637
];

const b1 = [0.210916,0.382110,1.147780,-0.336713,-0.646360,-0.801532,-1.232648,-0.244900,0.053362];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-T3"; }

function type(){ return Type.TANKER; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}

// ===== 다음 로봇 =====

const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  0.582062,-0.004422,0.101912,-0.430240,-0.323511,0.160446,-0.243630,0.502214,-0.538493,0.572980,-0.579084,-0.555837,-0.314886,0.149704,-0.236549,0.490733,
  0.193279,-0.506214,0.205202,0.795497,-0.937471,-0.129365,0.211468,0.078928,-0.591651,0.541104,0.295569,0.181637,-0.562802,0.055355,-1.401205,-0.098183,
  0.766045,-0.789744,0.734987,-0.469149,-0.515390,0.038221,0.910620,0.072962,0.852209,-0.191945,-0.775526,0.387219,1.022315,0.432086,0.982431,0.128955,
  -0.421020,0.181648,0.042514,-0.620478,-0.388093,0.052371,-0.829469,0.283862,-0.255894,0.138712,-0.019862,0.381414,0.127852,-0.305071,-0.314089,0.170891,
  -0.774249,0.499462,-1.335115,-0.110844,0.888480,-0.169166,-0.394411,-0.529109,0.035638,0.119353,0.302066,-0.120061,-0.573342,-0.723741,0.428766,-0.354678,
  -0.484436,-0.401648,-0.669118,0.508881,0.713702,-0.348717,-0.692296,-0.023702,-0.419307,0.024801,0.037246,0.616603,-0.591039,0.232280,0.864077,0.289554,
  -0.092454,0.193354,0.051298,0.041596,0.175466,0.887342,-0.211591,0.206063,0.722596,0.040132,-0.296409,0.118351,0.837529,-0.501453,0.195126,0.140649,
  -0.484001,-0.651431,1.496470,0.219145,-0.923754,1.249911,-0.116518,-0.226720,0.511533,-0.400736,0.008513,0.532310,0.690911,-0.341246,-0.297463,-0.286734,
  0.884389,0.276661,-0.028769,0.020964,-0.139725,-0.668166,0.753836,0.388281,0.545360,-0.786872,0.310995,0.232900,-0.464213,-0.096886,-0.376019,-0.408304,
  -1.407049,-1.628496,-0.728540,0.815620,0.785486,0.617528,-0.348468,-0.264519,0.157112,0.045363,0.481111,0.006569,-0.618466,0.690492,0.335508,-0.438631,
  0.084113,0.049626,-0.007769,-0.494998,-0.922592,0.687242,0.505174,-0.259546,0.394189,0.065423,0.718090,0.351648,-0.160495,-1.170300,-0.451668,-0.293333,
  0.410349,-0.686014,0.397738,0.055458,-0.434350,0.525390,0.027632,-0.307475,-0.119387,0.512893,1.370692,0.603172,0.503966,-0.172408,0.588777,-0.112825,
  -0.959814,0.366846,-1.350021,-0.515003,-0.954013,0.243608,-0.845882,0.314087,-0.361902,0.753449,-0.091477,-0.232034,0.224488,-0.145186,0.044008,-0.383193,
  0.108602,-0.644410,0.735074,-0.275522,-0.191044,-0.262677,-0.224960,0.657585,-0.418572,0.466193,0.797486,-0.002735,-0.797761,0.487525,-0.734620,-0.145386,
  -0.682036,2.057983,0.530829,0.741340,-1.161418,0.565787,-0.470370,-0.432940,0.278912,0.327345,0.292702,-0.954710,0.863639,-0.148246,0.222380,0.061524,
  0.149784,-0.661839,-0.508995,-0.844734,-0.119577,-0.122905,0.088489,-0.026509,0.246047,0.183438,0.036203,0.364293,0.160082,0.892785,-0.416688,0.716591,
  -0.553074,-0.339740,0.744403,-0.242244,0.611656,-0.315259,-0.705644,0.573383,-0.942220,-0.014276,1.137555,0.250492,0.363836,-0.515134,-0.388958,-0.025327,
  0.107794,-0.325835,0.493816,-0.957294,0.482511,-0.598320,0.261332,-0.133945,0.050289,-0.794864,-0.597970,0.046099,-0.680280,-1.042992,-0.346744,0.333740,
  -0.409415,0.946970,-0.206467,0.381909,-0.732609,0.670435,0.425805,-0.798814,0.411748,0.238774,-0.055827,-0.345188,-0.238435,0.230271,0.079484,0.058332,
  0.136781,0.800240,-0.965033,0.680490,0.820711,0.028623,-0.192743,0.318330,-0.618961,0.245783,-0.347366,0.447863,-0.852766,-0.195658,-0.196525,-0.312063,
  0.774837,0.331559,0.312780,-0.699010,0.905042,0.342059,-0.820639,0.675179,0.099354,0.020517,-0.058167,-0.668288,0.566887,0.075239,0.888284,-0.331061,
  -0.391025,0.067179,0.547773,0.377415,0.373199,0.468164,-0.566051,0.558130,-0.002290,-0.032695,-0.086308,0.503436,0.395000,0.320712,-0.321783,-0.080087,
  0.369599,0.747902,-0.595936,-0.268095,0.480359,0.242208,0.377960,-0.152831,0.298842,0.112888,-0.045804,0.568891,-0.351660,-0.233747,-0.228629,-1.182515,
  -0.031129,0.395997,-0.077291,0.148540,0.935341,0.116215,0.384909,0.464537,0.080425,-0.483801,0.112319,-0.161811,-1.559460,-0.293568,0.250379,0.037966,
  -0.305633,0.235945,-0.452988,-0.233777,0.193076,0.436121,0.740187,-0.786886,-0.596475,-0.034620,-0.542967,0.380716,0.146877,0.073923,0.240407,-0.549821,
  -0.830013,-0.376709,-0.172201,-0.086069,0.938401,0.750696,-0.267689,0.529876,-0.834561,-0.930679,-0.456880,-0.520149,-0.525783,-0.071602,0.581421,0.348330,
  0.009448,-1.006441,0.455655,0.059129,-0.227334,-1.710709,-0.028895,-0.717813,0.669504,0.350325,0.627015,-0.395535,0.084958,0.636106,0.090661,0.425707,
  -0.329949,-0.844492,1.004622,-0.697727,-0.544209,1.013037,0.249640,-0.397750,0.185004,-0.311922,-0.352535,0.135461,-0.168631,-0.357523,-0.479592,-0.007449,
  -0.881531,0.100952,0.273318,0.288692,0.081563,-0.756385,0.287003,-0.576641,0.026740,-0.154622,-0.237603,0.141127,0.119939,0.142369,-0.613860,0.076851,
  0.563006,0.100588,0.305109,0.373276,0.379365,0.327895,0.057712,0.673928,-1.071739,-0.160195,-0.136493,0.360125,0.278608,0.816856,0.301355,-0.679121,
  -0.111854,-0.765044,0.045541,-0.006350,0.198591,0.180553,1.678023,-0.536974,0.051090,0.276422,1.147829,-0.141654,-0.526853,-0.807602,0.372153,0.391616,
  0.286973,-0.441691,-0.587669,0.122311,-0.964645,0.770359,0.380876,-0.011208,0.527312,1.037601,0.384112,0.099111,-0.410752,0.482081,0.156506,-0.896721,
  0.145228,-0.079874,-0.134795,-0.760887,0.501502,-0.810319,-0.772861,-0.381676,-1.214050,-0.186594,1.195540,-0.096930,-0.006662,-0.072906,-0.311136,-0.042058,
  -0.437500,0.407620,-0.241092,-0.550357,-0.346396,-0.081852,-0.383459,-0.331868,0.469906,-0.136112,0.195800,0.539267,-0.298656,0.606850,-0.220002,-0.085684,
  0.445626,0.029589,0.131467,0.256895,-0.190586,0.401739,-0.240558,0.000117,-0.123205,0.453095,-0.204023,0.357607,-0.290686,0.979865,-0.844095,1.080282,
  0.624254,0.621692,0.432497,-0.008166,-0.834926,-0.569418,0.077179,-0.408343,0.670390,-0.317654,0.247608,-0.453237,0.797817,-0.039162,0.785596,-0.211637
];

const b1 = [0.210916,0.382110,1.147780,-0.336713,-0.646360,-0.801532,-1.232648,-0.244900,0.053362];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-D4"; }

function type(){ return Type.DEALER; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}

// ===== 다음 로봇 =====

const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  0.582062,-0.004422,0.101912,-0.430240,-0.323511,0.160446,-0.243630,0.502214,-0.538493,0.572980,-0.579084,-0.555837,-0.314886,0.149704,-0.236549,0.490733,
  0.193279,-0.506214,0.205202,0.795497,-0.937471,-0.129365,0.211468,0.078928,-0.591651,0.541104,0.295569,0.181637,-0.562802,0.055355,-1.401205,-0.098183,
  0.766045,-0.789744,0.734987,-0.469149,-0.515390,0.038221,0.910620,0.072962,0.852209,-0.191945,-0.775526,0.387219,1.022315,0.432086,0.982431,0.128955,
  -0.421020,0.181648,0.042514,-0.620478,-0.388093,0.052371,-0.829469,0.283862,-0.255894,0.138712,-0.019862,0.381414,0.127852,-0.305071,-0.314089,0.170891,
  -0.774249,0.499462,-1.335115,-0.110844,0.888480,-0.169166,-0.394411,-0.529109,0.035638,0.119353,0.302066,-0.120061,-0.573342,-0.723741,0.428766,-0.354678,
  -0.484436,-0.401648,-0.669118,0.508881,0.713702,-0.348717,-0.692296,-0.023702,-0.419307,0.024801,0.037246,0.616603,-0.591039,0.232280,0.864077,0.289554,
  -0.092454,0.193354,0.051298,0.041596,0.175466,0.887342,-0.211591,0.206063,0.722596,0.040132,-0.296409,0.118351,0.837529,-0.501453,0.195126,0.140649,
  -0.484001,-0.651431,1.496470,0.219145,-0.923754,1.249911,-0.116518,-0.226720,0.511533,-0.400736,0.008513,0.532310,0.690911,-0.341246,-0.297463,-0.286734,
  0.884389,0.276661,-0.028769,0.020964,-0.139725,-0.668166,0.753836,0.388281,0.545360,-0.786872,0.310995,0.232900,-0.464213,-0.096886,-0.376019,-0.408304,
  -1.407049,-1.628496,-0.728540,0.815620,0.785486,0.617528,-0.348468,-0.264519,0.157112,0.045363,0.481111,0.006569,-0.618466,0.690492,0.335508,-0.438631,
  0.084113,0.049626,-0.007769,-0.494998,-0.922592,0.687242,0.505174,-0.259546,0.394189,0.065423,0.718090,0.351648,-0.160495,-1.170300,-0.451668,-0.293333,
  0.410349,-0.686014,0.397738,0.055458,-0.434350,0.525390,0.027632,-0.307475,-0.119387,0.512893,1.370692,0.603172,0.503966,-0.172408,0.588777,-0.112825,
  -0.959814,0.366846,-1.350021,-0.515003,-0.954013,0.243608,-0.845882,0.314087,-0.361902,0.753449,-0.091477,-0.232034,0.224488,-0.145186,0.044008,-0.383193,
  0.108602,-0.644410,0.735074,-0.275522,-0.191044,-0.262677,-0.224960,0.657585,-0.418572,0.466193,0.797486,-0.002735,-0.797761,0.487525,-0.734620,-0.145386,
  -0.682036,2.057983,0.530829,0.741340,-1.161418,0.565787,-0.470370,-0.432940,0.278912,0.327345,0.292702,-0.954710,0.863639,-0.148246,0.222380,0.061524,
  0.149784,-0.661839,-0.508995,-0.844734,-0.119577,-0.122905,0.088489,-0.026509,0.246047,0.183438,0.036203,0.364293,0.160082,0.892785,-0.416688,0.716591,
  -0.553074,-0.339740,0.744403,-0.242244,0.611656,-0.315259,-0.705644,0.573383,-0.942220,-0.014276,1.137555,0.250492,0.363836,-0.515134,-0.388958,-0.025327,
  0.107794,-0.325835,0.493816,-0.957294,0.482511,-0.598320,0.261332,-0.133945,0.050289,-0.794864,-0.597970,0.046099,-0.680280,-1.042992,-0.346744,0.333740,
  -0.409415,0.946970,-0.206467,0.381909,-0.732609,0.670435,0.425805,-0.798814,0.411748,0.238774,-0.055827,-0.345188,-0.238435,0.230271,0.079484,0.058332,
  0.136781,0.800240,-0.965033,0.680490,0.820711,0.028623,-0.192743,0.318330,-0.618961,0.245783,-0.347366,0.447863,-0.852766,-0.195658,-0.196525,-0.312063,
  0.774837,0.331559,0.312780,-0.699010,0.905042,0.342059,-0.820639,0.675179,0.099354,0.020517,-0.058167,-0.668288,0.566887,0.075239,0.888284,-0.331061,
  -0.391025,0.067179,0.547773,0.377415,0.373199,0.468164,-0.566051,0.558130,-0.002290,-0.032695,-0.086308,0.503436,0.395000,0.320712,-0.321783,-0.080087,
  0.369599,0.747902,-0.595936,-0.268095,0.480359,0.242208,0.377960,-0.152831,0.298842,0.112888,-0.045804,0.568891,-0.351660,-0.233747,-0.228629,-1.182515,
  -0.031129,0.395997,-0.077291,0.148540,0.935341,0.116215,0.384909,0.464537,0.080425,-0.483801,0.112319,-0.161811,-1.559460,-0.293568,0.250379,0.037966,
  -0.305633,0.235945,-0.452988,-0.233777,0.193076,0.436121,0.740187,-0.786886,-0.596475,-0.034620,-0.542967,0.380716,0.146877,0.073923,0.240407,-0.549821,
  -0.830013,-0.376709,-0.172201,-0.086069,0.938401,0.750696,-0.267689,0.529876,-0.834561,-0.930679,-0.456880,-0.520149,-0.525783,-0.071602,0.581421,0.348330,
  0.009448,-1.006441,0.455655,0.059129,-0.227334,-1.710709,-0.028895,-0.717813,0.669504,0.350325,0.627015,-0.395535,0.084958,0.636106,0.090661,0.425707,
  -0.329949,-0.844492,1.004622,-0.697727,-0.544209,1.013037,0.249640,-0.397750,0.185004,-0.311922,-0.352535,0.135461,-0.168631,-0.357523,-0.479592,-0.007449,
  -0.881531,0.100952,0.273318,0.288692,0.081563,-0.756385,0.287003,-0.576641,0.026740,-0.154622,-0.237603,0.141127,0.119939,0.142369,-0.613860,0.076851,
  0.563006,0.100588,0.305109,0.373276,0.379365,0.327895,0.057712,0.673928,-1.071739,-0.160195,-0.136493,0.360125,0.278608,0.816856,0.301355,-0.679121,
  -0.111854,-0.765044,0.045541,-0.006350,0.198591,0.180553,1.678023,-0.536974,0.051090,0.276422,1.147829,-0.141654,-0.526853,-0.807602,0.372153,0.391616,
  0.286973,-0.441691,-0.587669,0.122311,-0.964645,0.770359,0.380876,-0.011208,0.527312,1.037601,0.384112,0.099111,-0.410752,0.482081,0.156506,-0.896721,
  0.145228,-0.079874,-0.134795,-0.760887,0.501502,-0.810319,-0.772861,-0.381676,-1.214050,-0.186594,1.195540,-0.096930,-0.006662,-0.072906,-0.311136,-0.042058,
  -0.437500,0.407620,-0.241092,-0.550357,-0.346396,-0.081852,-0.383459,-0.331868,0.469906,-0.136112,0.195800,0.539267,-0.298656,0.606850,-0.220002,-0.085684,
  0.445626,0.029589,0.131467,0.256895,-0.190586,0.401739,-0.240558,0.000117,-0.123205,0.453095,-0.204023,0.357607,-0.290686,0.979865,-0.844095,1.080282,
  0.624254,0.621692,0.432497,-0.008166,-0.834926,-0.569418,0.077179,-0.408343,0.670390,-0.317654,0.247608,-0.453237,0.797817,-0.039162,0.785596,-0.211637
];

const b1 = [0.210916,0.382110,1.147780,-0.336713,-0.646360,-0.801532,-1.232648,-0.244900,0.053362];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-T5"; }

function type(){ return Type.TANKER; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}

// ===== 다음 로봇 =====

const INPUT_SIZE = 64;
const H1 = 64;
const H2 = 64;
const OUTPUT_SIZE = 9;

const W1 = [
  0.582062,-0.004422,0.101912,-0.430240,-0.323511,0.160446,-0.243630,0.502214,-0.538493,0.572980,-0.579084,-0.555837,-0.314886,0.149704,-0.236549,0.490733,
  0.193279,-0.506214,0.205202,0.795497,-0.937471,-0.129365,0.211468,0.078928,-0.591651,0.541104,0.295569,0.181637,-0.562802,0.055355,-1.401205,-0.098183,
  0.766045,-0.789744,0.734987,-0.469149,-0.515390,0.038221,0.910620,0.072962,0.852209,-0.191945,-0.775526,0.387219,1.022315,0.432086,0.982431,0.128955,
  -0.421020,0.181648,0.042514,-0.620478,-0.388093,0.052371,-0.829469,0.283862,-0.255894,0.138712,-0.019862,0.381414,0.127852,-0.305071,-0.314089,0.170891,
  -0.774249,0.499462,-1.335115,-0.110844,0.888480,-0.169166,-0.394411,-0.529109,0.035638,0.119353,0.302066,-0.120061,-0.573342,-0.723741,0.428766,-0.354678,
  -0.484436,-0.401648,-0.669118,0.508881,0.713702,-0.348717,-0.692296,-0.023702,-0.419307,0.024801,0.037246,0.616603,-0.591039,0.232280,0.864077,0.289554,
  -0.092454,0.193354,0.051298,0.041596,0.175466,0.887342,-0.211591,0.206063,0.722596,0.040132,-0.296409,0.118351,0.837529,-0.501453,0.195126,0.140649,
  -0.484001,-0.651431,1.496470,0.219145,-0.923754,1.249911,-0.116518,-0.226720,0.511533,-0.400736,0.008513,0.532310,0.690911,-0.341246,-0.297463,-0.286734,
  0.884389,0.276661,-0.028769,0.020964,-0.139725,-0.668166,0.753836,0.388281,0.545360,-0.786872,0.310995,0.232900,-0.464213,-0.096886,-0.376019,-0.408304,
  -1.407049,-1.628496,-0.728540,0.815620,0.785486,0.617528,-0.348468,-0.264519,0.157112,0.045363,0.481111,0.006569,-0.618466,0.690492,0.335508,-0.438631,
  0.084113,0.049626,-0.007769,-0.494998,-0.922592,0.687242,0.505174,-0.259546,0.394189,0.065423,0.718090,0.351648,-0.160495,-1.170300,-0.451668,-0.293333,
  0.410349,-0.686014,0.397738,0.055458,-0.434350,0.525390,0.027632,-0.307475,-0.119387,0.512893,1.370692,0.603172,0.503966,-0.172408,0.588777,-0.112825,
  -0.959814,0.366846,-1.350021,-0.515003,-0.954013,0.243608,-0.845882,0.314087,-0.361902,0.753449,-0.091477,-0.232034,0.224488,-0.145186,0.044008,-0.383193,
  0.108602,-0.644410,0.735074,-0.275522,-0.191044,-0.262677,-0.224960,0.657585,-0.418572,0.466193,0.797486,-0.002735,-0.797761,0.487525,-0.734620,-0.145386,
  -0.682036,2.057983,0.530829,0.741340,-1.161418,0.565787,-0.470370,-0.432940,0.278912,0.327345,0.292702,-0.954710,0.863639,-0.148246,0.222380,0.061524,
  0.149784,-0.661839,-0.508995,-0.844734,-0.119577,-0.122905,0.088489,-0.026509,0.246047,0.183438,0.036203,0.364293,0.160082,0.892785,-0.416688,0.716591,
  -0.553074,-0.339740,0.744403,-0.242244,0.611656,-0.315259,-0.705644,0.573383,-0.942220,-0.014276,1.137555,0.250492,0.363836,-0.515134,-0.388958,-0.025327,
  0.107794,-0.325835,0.493816,-0.957294,0.482511,-0.598320,0.261332,-0.133945,0.050289,-0.794864,-0.597970,0.046099,-0.680280,-1.042992,-0.346744,0.333740,
  -0.409415,0.946970,-0.206467,0.381909,-0.732609,0.670435,0.425805,-0.798814,0.411748,0.238774,-0.055827,-0.345188,-0.238435,0.230271,0.079484,0.058332,
  0.136781,0.800240,-0.965033,0.680490,0.820711,0.028623,-0.192743,0.318330,-0.618961,0.245783,-0.347366,0.447863,-0.852766,-0.195658,-0.196525,-0.312063,
  0.774837,0.331559,0.312780,-0.699010,0.905042,0.342059,-0.820639,0.675179,0.099354,0.020517,-0.058167,-0.668288,0.566887,0.075239,0.888284,-0.331061,
  -0.391025,0.067179,0.547773,0.377415,0.373199,0.468164,-0.566051,0.558130,-0.002290,-0.032695,-0.086308,0.503436,0.395000,0.320712,-0.321783,-0.080087,
  0.369599,0.747902,-0.595936,-0.268095,0.480359,0.242208,0.377960,-0.152831,0.298842,0.112888,-0.045804,0.568891,-0.351660,-0.233747,-0.228629,-1.182515,
  -0.031129,0.395997,-0.077291,0.148540,0.935341,0.116215,0.384909,0.464537,0.080425,-0.483801,0.112319,-0.161811,-1.559460,-0.293568,0.250379,0.037966,
  -0.305633,0.235945,-0.452988,-0.233777,0.193076,0.436121,0.740187,-0.786886,-0.596475,-0.034620,-0.542967,0.380716,0.146877,0.073923,0.240407,-0.549821,
  -0.830013,-0.376709,-0.172201,-0.086069,0.938401,0.750696,-0.267689,0.529876,-0.834561,-0.930679,-0.456880,-0.520149,-0.525783,-0.071602,0.581421,0.348330,
  0.009448,-1.006441,0.455655,0.059129,-0.227334,-1.710709,-0.028895,-0.717813,0.669504,0.350325,0.627015,-0.395535,0.084958,0.636106,0.090661,0.425707,
  -0.329949,-0.844492,1.004622,-0.697727,-0.544209,1.013037,0.249640,-0.397750,0.185004,-0.311922,-0.352535,0.135461,-0.168631,-0.357523,-0.479592,-0.007449,
  -0.881531,0.100952,0.273318,0.288692,0.081563,-0.756385,0.287003,-0.576641,0.026740,-0.154622,-0.237603,0.141127,0.119939,0.142369,-0.613860,0.076851,
  0.563006,0.100588,0.305109,0.373276,0.379365,0.327895,0.057712,0.673928,-1.071739,-0.160195,-0.136493,0.360125,0.278608,0.816856,0.301355,-0.679121,
  -0.111854,-0.765044,0.045541,-0.006350,0.198591,0.180553,1.678023,-0.536974,0.051090,0.276422,1.147829,-0.141654,-0.526853,-0.807602,0.372153,0.391616,
  0.286973,-0.441691,-0.587669,0.122311,-0.964645,0.770359,0.380876,-0.011208,0.527312,1.037601,0.384112,0.099111,-0.410752,0.482081,0.156506,-0.896721,
  0.145228,-0.079874,-0.134795,-0.760887,0.501502,-0.810319,-0.772861,-0.381676,-1.214050,-0.186594,1.195540,-0.096930,-0.006662,-0.072906,-0.311136,-0.042058,
  -0.437500,0.407620,-0.241092,-0.550357,-0.346396,-0.081852,-0.383459,-0.331868,0.469906,-0.136112,0.195800,0.539267,-0.298656,0.606850,-0.220002,-0.085684,
  0.445626,0.029589,0.131467,0.256895,-0.190586,0.401739,-0.240558,0.000117,-0.123205,0.453095,-0.204023,0.357607,-0.290686,0.979865,-0.844095,1.080282,
  0.624254,0.621692,0.432497,-0.008166,-0.834926,-0.569418,0.077179,-0.408343,0.670390,-0.317654,0.247608,-0.453237,0.797817,-0.039162,0.785596,-0.211637
];

const b1 = [0.210916,0.382110,1.147780,-0.336713,-0.646360,-0.801532,-1.232648,-0.244900,0.053362];

const W2 = [
  
];

const b2 = [];

const W3 = [];

const b3 = [];


function clamp01(x){return x<0?0:(x>1?1:x);} 
function norm(x,a,b){return (x-a)/Math.max(1e-6,(b-a));}
function relu(x){return x>0?x:0;}
function tanh(x){const e=Math.exp; const a=e(x), b=e(-x); return (a-b)/(a+b);} 
function sigmoid(x){return 1/(1+Math.exp(-x));}
function gemv(W, x, outDim, inDim, b){
  const y = new Array(outDim).fill(0);
  for(let o=0;o<outDim;o++){
    let s = b?b[o]:0; const base=o*inDim;
    for(let i=0;i<inDim;i++) s += W[base+i]*x[i];
    y[o]=s;
  }
  return y;
}
function mlpForward(x){
  const h1 = gemv(W1, x, H1, INPUT_SIZE, b1).map(relu);
  const h2 = gemv(W2, h1, H2, H1, b2).map(relu);
  const o = gemv(W3, h2, OUTPUT_SIZE, H2, b3);
  const mv1 = Math.atan2(o[1], o[0]) * 180/Math.PI;
  const mv2 = Math.atan2(o[3], o[2]) * 180/Math.PI;
  const fireAngle = Math.atan2(o[5], o[4]) * 180/Math.PI;
  const fireP = sigmoid(o[6]);
  const mv3 = Math.atan2(o[8], o[7]) * 180/Math.PI;
  return { mv1, mv2, mv3, fireAngle, fireP };
}



function buildFeatures(tank, enemies, allies, bulletInfo){
  const W = 900, H = 600; // 엔진과 동일
  const x=[];
  // self
  x.push(norm(tank.x,0,W));
  x.push(norm(tank.y,0,H));
  x.push(clamp01(tank.health/200));
  x.push(clamp01(tank.energy/200));
  x.push(tank.type===0?1:0);
  x.push(tank.type===1?1:0);
  x.push(tank.type===2?1:0);
  x.push(clamp01(tank.size/60));
  // enemies (top-3 by distance)
  const es = enemies.slice().sort((a,b)=>a.distance-b.distance).slice(0,3);
  for(let i=0;i<3;i++){
    const e = es[i];
    if(e){
      const dx=e.x-tank.x, dy=e.y-tank.y; const d=Math.hypot(dx,dy)||1;
      x.push(dx/900); x.push(dy/600); x.push(clamp01(d/1000));
      x.push(Math.sin(Math.atan2(dy,dx))); x.push(Math.cos(Math.atan2(dy,dx)));
      x.push(clamp01(e.health/200));
    }else{ x.push(0,0,1,0,1,0); }
  }
  // allies (top-2 by distance)
  const as = allies.slice().sort((a,b)=>a.distance-b.distance).slice(0,2);
  for(let i=0;i<2;i++){
    const a = as[i];
    if(a){ const dx=a.x-tank.x, dy=a.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), clamp01(a.health/200)); }
    else { x.push(0,0,1,0); }
  }
  // bullets (top-4 by distance)
  const bs = bulletInfo.slice().sort((a,b)=>a.distance-b.distance).slice(0,4);
  for(let i=0;i<4;i++){
    const b = bs[i];
    if(b){ const dx=b.x-tank.x, dy=b.y-tank.y; const d=Math.hypot(dx,dy)||1; x.push(dx/900, dy/600, clamp01(d/1000), b.vx/8, b.vy/8); }
    else { x.push(0,0,1,0,0); }
  }
  // global features
  x.push(1); // bias
  x.push(W/1000); x.push(H/1000);
  // aggregate dists
  function agg(arr){ if(arr.length===0) return {mn:1, av:1}; let mn=1e9, s=0; for(const d of arr){ if(d<mn) mn=d; s+=d; } return { mn: clamp01(mn/1000), av: clamp01((s/arr.length)/1000) }; }
  const ed = agg(enemies.map(e=>e.distance)); x.push(ed.mn, ed.av);
  const ad = agg(allies.map(a=>a.distance)); x.push(ad.mn, ad.av);
  // counts
  x.push(clamp01(enemies.length/6)); x.push(clamp01(allies.length/5)); x.push(clamp01(bulletInfo.length/20));
  // pad to INPUT_SIZE
  while(x.length<INPUT_SIZE) x.push(0);
  if(x.length>INPUT_SIZE) x.length=INPUT_SIZE;
  return x;
}



function policyStep(tank, enemies, allies, bulletInfo){
  const feat = buildFeatures(tank, enemies, allies, bulletInfo);
  const out = mlpForward(feat);
  // 순수 DNN 출력 각도로 발사(쿨다운은 엔진에서 처리)
  tank.fire(out.fireAngle);
  // DNN이 제안한 세 방향을 순차 시도
  if(!tank.move(out.mv1)){
    if(!tank.move(out.mv2)){
      tank.move(out.mv3);
    }
  }
}


function name(){ return "DNN-D6"; }

function type(){ return Type.DEALER; }

function update(tank, enemies, allies, bulletInfo){
  policyStep(tank, enemies, allies, bulletInfo);
}