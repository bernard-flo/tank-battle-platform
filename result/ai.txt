function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.3161045294687075,1.372784424245619,0.2404477363615675,-1.4672396144355193,0.5997580072776285,-0.2844496899960355,-0.5188861261394905,-0.01880217368584107,-1.2733605673344146,-0.08193243064978677,-0.030539619456786633,-0.06396657336007662,0.2803836061010233,0.6495868124465972,0.40824518088244943,0.36758788985733715],[-0.6925691007594162,-0.5110475524229664,-0.7631379798484932,0.3543172298195682,-0.794384023359347,0.039836796753601036,-0.3792310166533355,-0.2129999201353763,1.1879786320719254,0.7653499495836866,0.20367006520101874,-0.7098303332775387,-0.43231073077142423,-0.3273672092392536,-0.04863839058316613,-1.436484621755713],[0.16738674342047236,-0.592584120479218,0.19569120311430016,-0.12630354223558624,-0.23143744135017136,-0.7143712763157395,0.003500874056516631,1.0119141516465857,0.06387973921833431,-0.0571530043880729,0.41149433900067334,-0.6780245163732581,-1.1762078538588554,0.3374444085110475,-0.10381864393573485,0.4334576002483618],[-0.1226401789099631,0.4500708790819514,-0.06753776855444092,-1.0418346294025587,-1.9208597730995125,0.06546949825264092,-0.1319520167493637,-0.7496543944955338,-0.31021161120385565,-1.4687726749503733,-0.3991577939761193,0.295497901274154,0.6159217644626028,0.790394199622703,-0.85157374026307,0.32195707774821736],[0.6221399042644876,-2.064233073338389,-1.4134610897827855,1.0016853703058721,0.9230052045020839,-0.48660727517169217,-0.6854069120823336,-1.4642363434087593,0.717448021578178,0.7964434783957286,-0.01276409197045758,-0.3308193626003104,-0.20221567475699312,0.4917808280387392,-0.2868235240649168,0.4698413081226953],[-0.2598969399053545,0.28806375085005126,-0.5822400879169183,-0.7984741345227145,0.033325159631783736,0.36841744392435294,-0.829624647388695,0.175470175121844,-0.724913636771111,-0.11142401404528669,-0.6782128439454855,1.3704474056652465,0.2244275504065608,1.0921705605195378,0.18837263419864442,-0.4266403871758484]]; const b1=[0.16667173697686966,0.30310876779569645,-0.3337156542509605,-0.1591967930026807,-0.00849373960096697,-0.8978681865413395]; const W2=[[1.0552560447225463,-1.0844629996118351,0.18320647321538738,0.07304547433000311,-1.4595829345176001,0.6837098386774122],[-0.8695468617018536,-1.0885094295013484,-0.32590361281593705,0.6773165346700107,-0.40701744775665016,0.5929456463597866],[-0.3249229379872894,-0.8266819445952193,0.508173963004223,-0.6166265695502916,0.31834817973397833,-0.8745648184621251],[0.2692089872835809,0.7821019838565807,0.6049912504129475,-0.142048493240334,-0.15252084591157905,-1.5811218202550754],[1.2696828066999117,-0.9643517862237427,0.01966107447401476,-1.2956074742379629,0.9691607599930281,-0.23365237164486083]]; const b2=[0.8453364131090059,-0.09121283145691268,-0.940818617536274,-0.2924674680463849,-0.7722737389817723];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.3161045294687075,1.372784424245619,0.2404477363615675,-1.4672396144355193,0.5997580072776285,-0.2844496899960355,-0.5188861261394905,-0.01880217368584107,-1.2733605673344146,-0.08193243064978677,-0.030539619456786633,-0.06396657336007662,0.2803836061010233,0.6495868124465972,0.40824518088244943,0.36758788985733715],[-0.6925691007594162,-0.5110475524229664,-0.7631379798484932,0.3543172298195682,-0.794384023359347,0.039836796753601036,-0.3792310166533355,-0.2129999201353763,1.1879786320719254,0.7653499495836866,0.20367006520101874,-0.7098303332775387,-0.43231073077142423,-0.3273672092392536,-0.04863839058316613,-1.436484621755713],[0.16738674342047236,-0.592584120479218,0.19569120311430016,-0.12630354223558624,-0.23143744135017136,-0.7143712763157395,0.003500874056516631,1.0119141516465857,0.06387973921833431,-0.0571530043880729,0.41149433900067334,-0.6780245163732581,-1.1762078538588554,0.3374444085110475,-0.10381864393573485,0.4334576002483618],[-0.1226401789099631,0.4500708790819514,-0.06753776855444092,-1.0418346294025587,-1.9208597730995125,0.06546949825264092,-0.1319520167493637,-0.7496543944955338,-0.31021161120385565,-1.4687726749503733,-0.3991577939761193,0.295497901274154,0.6159217644626028,0.790394199622703,-0.85157374026307,0.32195707774821736],[0.6221399042644876,-2.064233073338389,-1.4134610897827855,1.0016853703058721,0.9230052045020839,-0.48660727517169217,-0.6854069120823336,-1.4642363434087593,0.717448021578178,0.7964434783957286,-0.01276409197045758,-0.3308193626003104,-0.20221567475699312,0.4917808280387392,-0.2868235240649168,0.4698413081226953],[-0.2598969399053545,0.28806375085005126,-0.5822400879169183,-0.7984741345227145,0.033325159631783736,0.36841744392435294,-0.829624647388695,0.175470175121844,-0.724913636771111,-0.11142401404528669,-0.6782128439454855,1.3704474056652465,0.2244275504065608,1.0921705605195378,0.18837263419864442,-0.4266403871758484]]; const b1=[0.16667173697686966,0.30310876779569645,-0.3337156542509605,-0.1591967930026807,-0.00849373960096697,-0.8978681865413395]; const W2=[[1.0552560447225463,-1.0844629996118351,0.18320647321538738,0.07304547433000311,-1.4595829345176001,0.6837098386774122],[-0.8695468617018536,-1.0885094295013484,-0.32590361281593705,0.6773165346700107,-0.40701744775665016,0.5929456463597866],[-0.3249229379872894,-0.8266819445952193,0.508173963004223,-0.6166265695502916,0.31834817973397833,-0.8745648184621251],[0.2692089872835809,0.7821019838565807,0.6049912504129475,-0.142048493240334,-0.15252084591157905,-1.5811218202550754],[1.2696828066999117,-0.9643517862237427,0.01966107447401476,-1.2956074742379629,0.9691607599930281,-0.23365237164486083]]; const b2=[0.8453364131090059,-0.09121283145691268,-0.940818617536274,-0.2924674680463849,-0.7722737389817723];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.20973895535004722,0.44800793800847805,-0.45376973066322335,0.039953418599641105,-1.126913746196895,-0.5584609851549984,0.15883677616813355,0.3992998463119668,0.11323059761808194,0.3868832624669965,0.6252836046365934,-0.6935953102147735,0.3702195396658229,0.1027019213970291,1.4090738701076797,-0.3970573699507293],[0.7815627581515278,0.09662019897993857,-0.2268550165993211,-0.3575601622882542,-0.9270827871189561,0.3877662251530495,0.21705935137725105,-0.5725119062841624,-0.0012908783336870455,-0.034900764525629326,-0.09270154059175303,-0.5718205555907362,0.9094291835447263,0.617778982939649,-0.584979202232032,-1.0245639031183844],[-1.0400121455937261,0.6664990979139649,-0.9374102722477148,0.5209510884769556,0.012597375734560254,-1.854646035760237,-1.0345741691527426,-0.29232143408848815,-0.12579176358232486,-0.13189955441330542,-0.041184025649026006,-1.1188393271170671,0.8422452417048218,-0.010743763486807247,-0.701490678760409,-0.4114463554202964],[-0.1734740111276058,0.33144764919440944,0.494973981594489,1.3786042190724204,0.2881932267045767,0.6953399634956556,0.16091759167538255,1.3604681883473226,0.5930959223100588,-0.5535693168056158,-0.7193873230761022,1.1356644986900306,-0.1656841173613169,0.31323022560025954,0.17610881391494326,0.4092936928211785],[-0.9116157823810136,-0.22793809166540335,-0.055373666484331646,0.8439031577548008,0.4269647817006222,-0.44037808307958465,-0.3736811428401152,-0.5507662219929909,0.695222934750641,0.7721283770531382,1.1312896598532887,0.10973677198769591,0.005644011662840263,0.05638692866439016,0.902342586383471,-0.49707508269488615],[0.7461049606782408,-1.0346147212783872,0.5566197014208335,-0.31817026476437993,-0.34301315781582453,-0.4240879200948399,1.3715799832483258,0.015391993709907202,0.4534936487948938,-1.005309454568063,-0.4218610463448675,1.808831818534177,-1.1522975390676216,-0.09597681134784052,-0.45562368892012095,0.29148952038888054]]; const b1=[0.1696800037132381,-0.11940375429958293,0.07606278510467034,-1.3520624971898585,-0.3578622978743188,1.4170107533726943]; const W2=[[-0.5059806552092616,-0.27182682516573187,0.7165093764318379,0.24842148445917972,-0.07395903616570686,-0.3715631129925875],[-0.9031070210594895,-0.555999773679644,0.35036115310804494,0.6724459463929786,-0.7350656446452294,-0.6909592323565663],[1.0117795463508292,0.19259274505921375,0.0887925212160705,0.14251000164873465,0.5604635512698212,-0.38193212713895397],[-1.0160117210735407,-1.8771119872279507,0.3804386385565228,-1.1309355778205363,-0.23159080185618566,0.5288052007479526],[0.0387214136952192,0.4139242211859857,0.19038665361876,0.6933694156405312,0.5025084450979401,-0.7315334197517486]]; const b2=[0.002808607373249228,-0.6584743119739092,0.25267447888579775,0.13757992588049744,-0.07784462500221502];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.3161045294687075,1.372784424245619,0.2404477363615675,-1.4672396144355193,0.5997580072776285,-0.2844496899960355,-0.5188861261394905,-0.01880217368584107,-1.2733605673344146,-0.08193243064978677,-0.030539619456786633,-0.06396657336007662,0.2803836061010233,0.6495868124465972,0.40824518088244943,0.36758788985733715],[-0.6925691007594162,-0.5110475524229664,-0.7631379798484932,0.3543172298195682,-0.794384023359347,0.039836796753601036,-0.3792310166533355,-0.2129999201353763,1.1879786320719254,0.7653499495836866,0.20367006520101874,-0.7098303332775387,-0.43231073077142423,-0.3273672092392536,-0.04863839058316613,-1.436484621755713],[0.16738674342047236,-0.592584120479218,0.19569120311430016,-0.12630354223558624,-0.23143744135017136,-0.7143712763157395,0.003500874056516631,1.0119141516465857,0.06387973921833431,-0.0571530043880729,0.41149433900067334,-0.6780245163732581,-1.1762078538588554,0.3374444085110475,-0.10381864393573485,0.4334576002483618],[-0.1226401789099631,0.4500708790819514,-0.06753776855444092,-1.0418346294025587,-1.9208597730995125,0.06546949825264092,-0.1319520167493637,-0.7496543944955338,-0.31021161120385565,-1.4687726749503733,-0.3991577939761193,0.295497901274154,0.6159217644626028,0.790394199622703,-0.85157374026307,0.32195707774821736],[0.6221399042644876,-2.064233073338389,-1.4134610897827855,1.0016853703058721,0.9230052045020839,-0.48660727517169217,-0.6854069120823336,-1.4642363434087593,0.717448021578178,0.7964434783957286,-0.01276409197045758,-0.3308193626003104,-0.20221567475699312,0.4917808280387392,-0.2868235240649168,0.4698413081226953],[-0.2598969399053545,0.28806375085005126,-0.5822400879169183,-0.7984741345227145,0.033325159631783736,0.36841744392435294,-0.829624647388695,0.175470175121844,-0.724913636771111,-0.11142401404528669,-0.6782128439454855,1.3704474056652465,0.2244275504065608,1.0921705605195378,0.18837263419864442,-0.4266403871758484]]; const b1=[0.16667173697686966,0.30310876779569645,-0.3337156542509605,-0.1591967930026807,-0.00849373960096697,-0.8978681865413395]; const W2=[[1.0552560447225463,-1.0844629996118351,0.18320647321538738,0.07304547433000311,-1.4595829345176001,0.6837098386774122],[-0.8695468617018536,-1.0885094295013484,-0.32590361281593705,0.6773165346700107,-0.40701744775665016,0.5929456463597866],[-0.3249229379872894,-0.8266819445952193,0.508173963004223,-0.6166265695502916,0.31834817973397833,-0.8745648184621251],[0.2692089872835809,0.7821019838565807,0.6049912504129475,-0.142048493240334,-0.15252084591157905,-1.5811218202550754],[1.2696828066999117,-0.9643517862237427,0.01966107447401476,-1.2956074742379629,0.9691607599930281,-0.23365237164486083]]; const b2=[0.8453364131090059,-0.09121283145691268,-0.940818617536274,-0.2924674680463849,-0.7722737389817723];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.3379825922111642,0.3651188921985229,0.8677611916035604,0.3812325728518117,0.2550913516986451,0.6632353201215812,-0.4994615110898114,-0.30428731352977867,0.4646827724991694,-0.8414210551059673,0.43132020336895965,1.2124716016354595,-0.7629837842339539,0.09946732843150657,-1.0055859044154536,-0.20558569387899028],[-1.33467753612373,0.13444348047882593,0.5916621774648064,-1.120345950381769,0.9696336625967487,-0.5285865262293795,0.06468912693758164,0.9665670568295158,0.8430746015786794,0.774316866760564,0.3521757161639457,0.26847827319838824,0.13846565916013864,0.709948126064616,0.2389970213653605,0.7710327113825403],[0.31465207552688645,-0.46300716906787975,0.40088680351227396,-0.31983081280909914,-0.12572448906672662,-0.9940683966626852,0.4088726600373488,1.1505250550786867,0.39666484142829805,-0.7559502864005245,-1.0936365840590776,0.2638874305682407,-1.2980695034056882,0.6670109386762838,-0.29210390192405333,0.2441155351878084],[-0.764536977731438,0.38854537210023843,1.6088191049982503,0.20284054340387622,-0.2871219126488991,-0.07350014721800406,-0.8441262198198277,0.5870845767997297,1.4215836985634729,0.611116822660427,0.022374492694619347,0.057996734360355844,0.3279309332908209,-0.9476753598911872,0.29833762350778775,0.01934343104493403],[-1.4689988678319545,0.42314734756580297,-1.4074324390749824,0.5048798371179131,-0.16657659046283468,-0.12984625200294492,0.5111626614201427,0.6687291692535731,-0.23172595081508185,-0.14337265255111234,-0.27495193671508106,-0.0988615879213865,0.09762202851075259,-1.1232285563922597,-0.2950748542499616,1.2901252059266788],[-0.45185025220377373,0.2899441654360145,0.37349121781594663,0.5590541397663801,-0.6825177705793013,1.1766210574227611,-1.3332467685159743,1.4627944892027485,-0.5113357825779192,0.2708706868110574,-0.9450528247994678,0.18375598955283984,0.10858309875559202,0.8046973353173436,0.29795284981463377,0.24838518512907248]]; const b1=[0.49745911713291446,1.3247177396830332,0.4506592283246354,-0.09993903379868956,-0.12396252817912348,0.8250326591282258]; const W2=[[0.7667608932067084,-1.0280677949571908,0.44209700931451545,-0.16813712178568196,-0.3948365758279553,-0.52301635263319],[0.9271688266057214,0.8546946339382928,0.8129469335488578,-0.480102988825643,0.11488211281904404,0.01781396034955203],[0.3439851643840618,0.7445935797325589,0.35104707436631444,0.1983836961739904,-0.19655679488454952,0.7921598930912265],[0.11200869228163395,0.5481999528839069,0.25758389567646856,0.7350542729669891,0.08053526049310127,1.106862235806003],[1.582944489393349,0.02883034049757674,-0.5360634777540284,-0.641969590607818,-0.7997482969930052,1.471357544649007]]; const b2=[-0.596893726296915,0.6876545216561238,0.07858542464861072,0.816386701612447,-0.2732211397000287];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.3161045294687075,1.372784424245619,0.2404477363615675,-1.4672396144355193,0.5997580072776285,-0.2844496899960355,-0.5188861261394905,-0.01880217368584107,-1.2733605673344146,-0.08193243064978677,-0.030539619456786633,-0.06396657336007662,0.2803836061010233,0.6495868124465972,0.40824518088244943,0.36758788985733715],[-0.6925691007594162,-0.5110475524229664,-0.7631379798484932,0.3543172298195682,-0.794384023359347,0.039836796753601036,-0.3792310166533355,-0.2129999201353763,1.1879786320719254,0.7653499495836866,0.20367006520101874,-0.7098303332775387,-0.43231073077142423,-0.3273672092392536,-0.04863839058316613,-1.436484621755713],[0.16738674342047236,-0.592584120479218,0.19569120311430016,-0.12630354223558624,-0.23143744135017136,-0.7143712763157395,0.003500874056516631,1.0119141516465857,0.06387973921833431,-0.0571530043880729,0.41149433900067334,-0.6780245163732581,-1.1762078538588554,0.3374444085110475,-0.10381864393573485,0.4334576002483618],[-0.1226401789099631,0.4500708790819514,-0.06753776855444092,-1.0418346294025587,-1.9208597730995125,0.06546949825264092,-0.1319520167493637,-0.7496543944955338,-0.31021161120385565,-1.4687726749503733,-0.3991577939761193,0.295497901274154,0.6159217644626028,0.790394199622703,-0.85157374026307,0.32195707774821736],[0.6221399042644876,-2.064233073338389,-1.4134610897827855,1.0016853703058721,0.9230052045020839,-0.48660727517169217,-0.6854069120823336,-1.4642363434087593,0.717448021578178,0.7964434783957286,-0.01276409197045758,-0.3308193626003104,-0.20221567475699312,0.4917808280387392,-0.2868235240649168,0.4698413081226953],[-0.2598969399053545,0.28806375085005126,-0.5822400879169183,-0.7984741345227145,0.033325159631783736,0.36841744392435294,-0.829624647388695,0.175470175121844,-0.724913636771111,-0.11142401404528669,-0.6782128439454855,1.3704474056652465,0.2244275504065608,1.0921705605195378,0.18837263419864442,-0.4266403871758484]]; const b1=[0.16667173697686966,0.30310876779569645,-0.3337156542509605,-0.1591967930026807,-0.00849373960096697,-0.8978681865413395]; const W2=[[1.0552560447225463,-1.0844629996118351,0.18320647321538738,0.07304547433000311,-1.4595829345176001,0.6837098386774122],[-0.8695468617018536,-1.0885094295013484,-0.32590361281593705,0.6773165346700107,-0.40701744775665016,0.5929456463597866],[-0.3249229379872894,-0.8266819445952193,0.508173963004223,-0.6166265695502916,0.31834817973397833,-0.8745648184621251],[0.2692089872835809,0.7821019838565807,0.6049912504129475,-0.142048493240334,-0.15252084591157905,-1.5811218202550754],[1.2696828066999117,-0.9643517862237427,0.01966107447401476,-1.2956074742379629,0.9691607599930281,-0.23365237164486083]]; const b2=[0.8453364131090059,-0.09121283145691268,-0.940818617536274,-0.2924674680463849,-0.7722737389817723];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}