function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2860073073159188,0.24550522838671865,-0.1588758885330859,-0.04015168240673654,0.25887638744402675,0.9464532338304996,0.21974517292498497,-0.26049380389441384,-0.8950223081694341,-0.8363570665366524,-0.4107842049851099,0.2937957649380363,-0.8035209447113101,-0.002853425984847474,-0.5579421314057071,0.5922224735906505],[-1.3742753025798928,-1.165970327662591,-1.4999643366924968,0.48575226631135093,0.3039030252338421,-0.8188587853127922,-0.8954421215994114,-0.04839380972702661,0.8041697426351219,-0.0538260526747905,-1.077625344878399,-0.752685519565106,-0.2666396585341845,-0.5129278482962791,-0.1652316183138437,0.04681443464450363],[0.8460311099873306,0.5608015553388244,0.19433898629655286,0.48433692886537805,-1.1400413407931211,0.02708555382851422,1.3274315244459864,0.7553660529027746,-0.2245205418853804,1.0943789492045481,0.5260279643109527,-0.1817466996508423,-0.3918871806455568,-0.9952566455239135,-0.7802938300372253,-0.5007595096507831],[-0.14839142840574426,-0.15199248347880379,0.8840107468829841,-1.03333590470767,0.515452789329084,0.2642766675253514,0.34561253671729414,0.2637161320411986,-1.1060456069489883,-0.1725866727151604,-0.9631566437403202,0.2286484537731183,1.1390224570092804,-0.3414556509501979,-2.0008832612757064,-1.1081440796574438],[1.4735593213514442,-2.910762027191224,-1.8907769692733531,0.3679800396556821,-0.8672904406696591,-1.0879358090325757,-1.1353909493290497,-0.1882089850593712,0.005673406001389852,-0.0783940912075692,-1.0235186278757562,-0.5842035623906765,-1.0341595086482698,0.61251670681906,-1.0031320768295278,0.2738450966049554],[0.14054201757735113,0.9898607997095642,0.5912380170695268,-0.3404339410672696,0.9585830643091845,-0.40919785283045756,-0.470346425030925,-0.12447868048989906,0.17877277042957046,-0.5762607791948423,-0.026834313146498215,0.544974809471643,0.11000396357758666,1.8376199133793898,-1.1514416742755567,-0.3680793737081481]]; const b1=[0.19003831788169703,0.2041092235362721,-0.4047536514051596,-0.00021780088406889858,0.09967784058675822,-2.174703605669154]; const W2=[[0.27715419215844883,-0.3669894203212033,-0.6163154005440113,0.3104824060516519,-0.7903994568419642,0.7074916007724981],[-0.6166640121394062,-0.7717404604677833,1.1152340497390578,0.20972398146928012,-0.16241438025790875,0.0769081162127927],[-1.8778793880914635,2.7401695147579423,-0.21490461952747478,-1.481660342758856,0.7034710907961899,-0.6475131758533568],[-0.011904687868009044,0.7038087210296433,1.1430415972440044,1.140104089593899,-0.529456467224807,-1.5377064970732874],[0.29118518943390476,-0.6214116957775357,0.6944252411971088,-0.6883731174200277,0.8303186952441594,-0.5594104946900615]]; const b2=[1.1911868163952957,-1.7162257368537919,-0.5733142324145808,2.081380582272599,-1.207303011051996];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2860073073159188,0.24550522838671865,-0.1588758885330859,-0.04015168240673654,0.25887638744402675,0.9464532338304996,0.21974517292498497,-0.26049380389441384,-0.8950223081694341,-0.8363570665366524,-0.4107842049851099,0.2937957649380363,-0.8035209447113101,-0.002853425984847474,-0.5579421314057071,0.5922224735906505],[-1.3742753025798928,-1.165970327662591,-1.4999643366924968,0.48575226631135093,0.3039030252338421,-0.8188587853127922,-0.8954421215994114,-0.04839380972702661,0.8041697426351219,-0.0538260526747905,-1.077625344878399,-0.752685519565106,-0.2666396585341845,-0.5129278482962791,-0.1652316183138437,0.04681443464450363],[0.8460311099873306,0.5608015553388244,0.19433898629655286,0.48433692886537805,-1.1400413407931211,0.02708555382851422,1.3274315244459864,0.7553660529027746,-0.2245205418853804,1.0943789492045481,0.5260279643109527,-0.1817466996508423,-0.3918871806455568,-0.9952566455239135,-0.7802938300372253,-0.5007595096507831],[-0.14839142840574426,-0.15199248347880379,0.8840107468829841,-1.03333590470767,0.515452789329084,0.2642766675253514,0.34561253671729414,0.2637161320411986,-1.1060456069489883,-0.1725866727151604,-0.9631566437403202,0.2286484537731183,1.1390224570092804,-0.3414556509501979,-2.0008832612757064,-1.1081440796574438],[1.4735593213514442,-2.910762027191224,-1.8907769692733531,0.3679800396556821,-0.8672904406696591,-1.0879358090325757,-1.1353909493290497,-0.1882089850593712,0.005673406001389852,-0.0783940912075692,-1.0235186278757562,-0.5842035623906765,-1.0341595086482698,0.61251670681906,-1.0031320768295278,0.2738450966049554],[0.14054201757735113,0.9898607997095642,0.5912380170695268,-0.3404339410672696,0.9585830643091845,-0.40919785283045756,-0.470346425030925,-0.12447868048989906,0.17877277042957046,-0.5762607791948423,-0.026834313146498215,0.544974809471643,0.11000396357758666,1.8376199133793898,-1.1514416742755567,-0.3680793737081481]]; const b1=[0.19003831788169703,0.2041092235362721,-0.4047536514051596,-0.00021780088406889858,0.09967784058675822,-2.174703605669154]; const W2=[[0.27715419215844883,-0.3669894203212033,-0.6163154005440113,0.3104824060516519,-0.7903994568419642,0.7074916007724981],[-0.6166640121394062,-0.7717404604677833,1.1152340497390578,0.20972398146928012,-0.16241438025790875,0.0769081162127927],[-1.8778793880914635,2.7401695147579423,-0.21490461952747478,-1.481660342758856,0.7034710907961899,-0.6475131758533568],[-0.011904687868009044,0.7038087210296433,1.1430415972440044,1.140104089593899,-0.529456467224807,-1.5377064970732874],[0.29118518943390476,-0.6214116957775357,0.6944252411971088,-0.6883731174200277,0.8303186952441594,-0.5594104946900615]]; const b2=[1.1911868163952957,-1.7162257368537919,-0.5733142324145808,2.081380582272599,-1.207303011051996];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2860073073159188,0.24550522838671865,-0.1588758885330859,-0.04015168240673654,0.25887638744402675,0.9464532338304996,0.21974517292498497,-0.26049380389441384,-0.8950223081694341,-0.8363570665366524,-0.4107842049851099,0.2937957649380363,-0.8035209447113101,-0.002853425984847474,-0.5579421314057071,0.5922224735906505],[-1.3742753025798928,-1.165970327662591,-1.4999643366924968,0.48575226631135093,0.3039030252338421,-0.8188587853127922,-0.8954421215994114,-0.04839380972702661,0.8041697426351219,-0.0538260526747905,-1.077625344878399,-0.752685519565106,-0.2666396585341845,-0.5129278482962791,-0.1652316183138437,0.04681443464450363],[0.8460311099873306,0.5608015553388244,0.19433898629655286,0.48433692886537805,-1.1400413407931211,0.02708555382851422,1.3274315244459864,0.7553660529027746,-0.2245205418853804,1.0943789492045481,0.5260279643109527,-0.1817466996508423,-0.3918871806455568,-0.9952566455239135,-0.7802938300372253,-0.5007595096507831],[-0.14839142840574426,-0.15199248347880379,0.8840107468829841,-1.03333590470767,0.515452789329084,0.2642766675253514,0.34561253671729414,0.2637161320411986,-1.1060456069489883,-0.1725866727151604,-0.9631566437403202,0.2286484537731183,1.1390224570092804,-0.3414556509501979,-2.0008832612757064,-1.1081440796574438],[1.4735593213514442,-2.910762027191224,-1.8907769692733531,0.3679800396556821,-0.8672904406696591,-1.0879358090325757,-1.1353909493290497,-0.1882089850593712,0.005673406001389852,-0.0783940912075692,-1.0235186278757562,-0.5842035623906765,-1.0341595086482698,0.61251670681906,-1.0031320768295278,0.2738450966049554],[0.14054201757735113,0.9898607997095642,0.5912380170695268,-0.3404339410672696,0.9585830643091845,-0.40919785283045756,-0.470346425030925,-0.12447868048989906,0.17877277042957046,-0.5762607791948423,-0.026834313146498215,0.544974809471643,0.11000396357758666,1.8376199133793898,-1.1514416742755567,-0.3680793737081481]]; const b1=[0.19003831788169703,0.2041092235362721,-0.4047536514051596,-0.00021780088406889858,0.09967784058675822,-2.174703605669154]; const W2=[[0.27715419215844883,-0.3669894203212033,-0.6163154005440113,0.3104824060516519,-0.7903994568419642,0.7074916007724981],[-0.6166640121394062,-0.7717404604677833,1.1152340497390578,0.20972398146928012,-0.16241438025790875,0.0769081162127927],[-1.8778793880914635,2.7401695147579423,-0.21490461952747478,-1.481660342758856,0.7034710907961899,-0.6475131758533568],[-0.011904687868009044,0.7038087210296433,1.1430415972440044,1.140104089593899,-0.529456467224807,-1.5377064970732874],[0.29118518943390476,-0.6214116957775357,0.6944252411971088,-0.6883731174200277,0.8303186952441594,-0.5594104946900615]]; const b2=[1.1911868163952957,-1.7162257368537919,-0.5733142324145808,2.081380582272599,-1.207303011051996];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2860073073159188,0.24550522838671865,-0.1588758885330859,-0.04015168240673654,0.25887638744402675,0.9464532338304996,0.21974517292498497,-0.26049380389441384,-0.8950223081694341,-0.8363570665366524,-0.4107842049851099,0.2937957649380363,-0.8035209447113101,-0.002853425984847474,-0.5579421314057071,0.5922224735906505],[-1.3742753025798928,-1.165970327662591,-1.4999643366924968,0.48575226631135093,0.3039030252338421,-0.8188587853127922,-0.8954421215994114,-0.04839380972702661,0.8041697426351219,-0.0538260526747905,-1.077625344878399,-0.752685519565106,-0.2666396585341845,-0.5129278482962791,-0.1652316183138437,0.04681443464450363],[0.8460311099873306,0.5608015553388244,0.19433898629655286,0.48433692886537805,-1.1400413407931211,0.02708555382851422,1.3274315244459864,0.7553660529027746,-0.2245205418853804,1.0943789492045481,0.5260279643109527,-0.1817466996508423,-0.3918871806455568,-0.9952566455239135,-0.7802938300372253,-0.5007595096507831],[-0.14839142840574426,-0.15199248347880379,0.8840107468829841,-1.03333590470767,0.515452789329084,0.2642766675253514,0.34561253671729414,0.2637161320411986,-1.1060456069489883,-0.1725866727151604,-0.9631566437403202,0.2286484537731183,1.1390224570092804,-0.3414556509501979,-2.0008832612757064,-1.1081440796574438],[1.4735593213514442,-2.910762027191224,-1.8907769692733531,0.3679800396556821,-0.8672904406696591,-1.0879358090325757,-1.1353909493290497,-0.1882089850593712,0.005673406001389852,-0.0783940912075692,-1.0235186278757562,-0.5842035623906765,-1.0341595086482698,0.61251670681906,-1.0031320768295278,0.2738450966049554],[0.14054201757735113,0.9898607997095642,0.5912380170695268,-0.3404339410672696,0.9585830643091845,-0.40919785283045756,-0.470346425030925,-0.12447868048989906,0.17877277042957046,-0.5762607791948423,-0.026834313146498215,0.544974809471643,0.11000396357758666,1.8376199133793898,-1.1514416742755567,-0.3680793737081481]]; const b1=[0.19003831788169703,0.2041092235362721,-0.4047536514051596,-0.00021780088406889858,0.09967784058675822,-2.174703605669154]; const W2=[[0.27715419215844883,-0.3669894203212033,-0.6163154005440113,0.3104824060516519,-0.7903994568419642,0.7074916007724981],[-0.6166640121394062,-0.7717404604677833,1.1152340497390578,0.20972398146928012,-0.16241438025790875,0.0769081162127927],[-1.8778793880914635,2.7401695147579423,-0.21490461952747478,-1.481660342758856,0.7034710907961899,-0.6475131758533568],[-0.011904687868009044,0.7038087210296433,1.1430415972440044,1.140104089593899,-0.529456467224807,-1.5377064970732874],[0.29118518943390476,-0.6214116957775357,0.6944252411971088,-0.6883731174200277,0.8303186952441594,-0.5594104946900615]]; const b2=[1.1911868163952957,-1.7162257368537919,-0.5733142324145808,2.081380582272599,-1.207303011051996];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.5153415958979726,0.18604030186166595,1.5520118363266666,0.7632245554958776,0.3287689964037809,-0.35249050214166067,0.4480762828207952,0.5093291918898668,-1.3761084096489444,0.18956540900835253,0.5724117772390763,-1.1998320143607006,-0.30876893460909904,0.40866403844241184,1.185170825867201,0.20383195891662872],[1.1854683187941402,1.030297631136003,-1.0253646805790695,-0.48620210766102834,-1.6751289527014197,0.267401308767213,-1.6139851838960162,0.40932947967984284,-0.7992149671124834,0.9356694431630637,-1.6563107677601696,0.8918851363897397,0.5311586931074667,-0.035242708382840986,0.015465922758485115,-1.896583269748195],[0.34969397241381345,0.8630365148441842,-0.8389332976790671,0.5459341637767443,-0.08354886974443197,-1.5491288709431947,-0.5404815849377925,-0.49495515592612715,0.6118035753493222,0.4912623593845768,0.812464202990296,-0.9198067882450291,0.2068263969982432,-0.030936527988003552,-0.42175174522844366,0.5882937299285311],[-0.6567321215189265,-0.755317702203205,0.9629544036165053,0.09961278950977777,0.6649856417699359,0.109109135511964,0.025662319241921163,0.6950287432196137,0.8123607504423856,-0.6321704930599129,-1.1236788024931175,1.7197806988539377,-0.673329151909252,1.058220306469653,0.6116243913012365,1.4707612719576784],[-0.9146641798795587,0.8808148249697558,0.0536482399401365,0.3307502828165885,0.14674910303800862,-1.2081514008427223,-0.11320773370478973,-1.7862383265343105,1.9770999416322161,-0.502392190154295,1.8831848632815336,-0.5788087392771338,-0.9161941603888407,0.08857396623732006,0.8468447728744618,-0.20333286895080385],[0.24430314142714904,-0.9296800159687705,-1.1938398025598473,-0.3501131911773011,-0.5261232214990732,0.19659856145411522,1.6186002993776856,0.5426047255343289,-0.14178713503026633,-0.6646706481720126,-0.5038079876299897,1.5187693584382802,-2.0667209230851937,0.34435654611601496,0.46405282258648006,1.3764668266708064]]; const b1=[0.2949412990805021,0.07129284647197515,-0.861092734000265,-0.2751662577380978,0.7941298292192192,1.7347107382543954]; const W2=[[-1.881082321389377,0.9732429757167994,1.0294577968062735,-1.3469545620567147,-0.5962148186622027,0.14549122602674047],[-0.6403032463093576,0.6588449778580874,-0.4309623125409949,0.5636284862240301,1.1521069871937717,-0.497106975449731],[0.7103526763365083,-0.07672967943650111,-0.46587283828108716,-1.0239936880356046,-0.14286463259888704,-1.1775075550654694],[-0.2432661518621307,-0.9782397307573176,-0.1398167373276905,-0.7527014486322323,-0.9166816323387768,-0.9189999609291457],[-0.6522960610304228,-0.5836726362096625,-1.2796709298487803,0.2881287683098984,0.9388270766397766,-0.2846572820148467]]; const b2=[0.6193818181537679,-0.9730130247879942,-0.6610290718667472,-1.0399649682792962,1.1348346665277023];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2860073073159188,0.24550522838671865,-0.1588758885330859,-0.04015168240673654,0.25887638744402675,0.9464532338304996,0.21974517292498497,-0.26049380389441384,-0.8950223081694341,-0.8363570665366524,-0.4107842049851099,0.2937957649380363,-0.8035209447113101,-0.002853425984847474,-0.5579421314057071,0.5922224735906505],[-1.3742753025798928,-1.165970327662591,-1.4999643366924968,0.48575226631135093,0.3039030252338421,-0.8188587853127922,-0.8954421215994114,-0.04839380972702661,0.8041697426351219,-0.0538260526747905,-1.077625344878399,-0.752685519565106,-0.2666396585341845,-0.5129278482962791,-0.1652316183138437,0.04681443464450363],[0.8460311099873306,0.5608015553388244,0.19433898629655286,0.48433692886537805,-1.1400413407931211,0.02708555382851422,1.3274315244459864,0.7553660529027746,-0.2245205418853804,1.0943789492045481,0.5260279643109527,-0.1817466996508423,-0.3918871806455568,-0.9952566455239135,-0.7802938300372253,-0.5007595096507831],[-0.14839142840574426,-0.15199248347880379,0.8840107468829841,-1.03333590470767,0.515452789329084,0.2642766675253514,0.34561253671729414,0.2637161320411986,-1.1060456069489883,-0.1725866727151604,-0.9631566437403202,0.2286484537731183,1.1390224570092804,-0.3414556509501979,-2.0008832612757064,-1.1081440796574438],[1.4735593213514442,-2.910762027191224,-1.8907769692733531,0.3679800396556821,-0.8672904406696591,-1.0879358090325757,-1.1353909493290497,-0.1882089850593712,0.005673406001389852,-0.0783940912075692,-1.0235186278757562,-0.5842035623906765,-1.0341595086482698,0.61251670681906,-1.0031320768295278,0.2738450966049554],[0.14054201757735113,0.9898607997095642,0.5912380170695268,-0.3404339410672696,0.9585830643091845,-0.40919785283045756,-0.470346425030925,-0.12447868048989906,0.17877277042957046,-0.5762607791948423,-0.026834313146498215,0.544974809471643,0.11000396357758666,1.8376199133793898,-1.1514416742755567,-0.3680793737081481]]; const b1=[0.19003831788169703,0.2041092235362721,-0.4047536514051596,-0.00021780088406889858,0.09967784058675822,-2.174703605669154]; const W2=[[0.27715419215844883,-0.3669894203212033,-0.6163154005440113,0.3104824060516519,-0.7903994568419642,0.7074916007724981],[-0.6166640121394062,-0.7717404604677833,1.1152340497390578,0.20972398146928012,-0.16241438025790875,0.0769081162127927],[-1.8778793880914635,2.7401695147579423,-0.21490461952747478,-1.481660342758856,0.7034710907961899,-0.6475131758533568],[-0.011904687868009044,0.7038087210296433,1.1430415972440044,1.140104089593899,-0.529456467224807,-1.5377064970732874],[0.29118518943390476,-0.6214116957775357,0.6944252411971088,-0.6883731174200277,0.8303186952441594,-0.5594104946900615]]; const b2=[1.1911868163952957,-1.7162257368537919,-0.5733142324145808,2.081380582272599,-1.207303011051996];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}