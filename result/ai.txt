function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.7827655016651207,-0.5608984289434629,-0.07388082931724835,0.056494372652866005,-0.8772531377066246,-0.43701106708016757,0.19000369030263242,0.6484892384797061,-0.25007906539150254,-0.17964702158767426,-1.3292233706160803,0.3046646870933647,0.19988439627068164,0.4366305188597639,0.24730044435153406,0.0058112414391655355],[-0.4965672740875082,-0.04165273223457816,-0.6457489291618678,0.10238429316836678,-0.19356338340600507,-0.24230830118797714,-0.22885270453620346,0.9183561410639818,0.18459303655266274,0.1366756328297784,-0.5005790446393377,0.5456816980079953,-0.1449356069731151,-0.07698074285280904,-0.1556850613480264,-0.5023339590865417],[1.384337311333349,0.030556469939129062,0.396465774704465,0.0760633913569526,-0.3592132437167369,1.1677726094108256,-0.31575396670968675,0.5318191336041604,-0.41526769073305225,0.33605717217521863,0.36494564499290794,-0.17815942783417082,-0.3029079420044004,0.7365836384145149,-0.7692326956651124,-1.3085268979939515],[0.2521013959047336,0.43541020954300214,0.5894610445367595,-0.7686039185208139,-1.1171666576600832,0.1727881032869046,-0.40377324802232506,0.436438939319693,-0.7687851410188552,0.21108599116173254,0.10928454762972784,-0.22968766683145217,1.104687226200285,0.42178610379393966,-0.44905300774500506,0.5875552515355678],[1.0898014856975222,-0.2429433903621573,-0.34544983265974194,0.5950310067623467,-0.1487475648153852,0.08632995042924367,0.49096514495558874,-0.3476364705776314,0.015196561270626355,-0.431433825398461,0.15213465349106006,-0.8193804716225604,0.43892351021343806,0.7427107375868099,0.7764308966385506,0.01819937136218147],[-0.4017828557556194,-0.2884500589972634,-0.07998736534734574,-0.25166764184204704,0.6453436427920244,0.2887743223123692,-0.28448742908943936,0.13658431534014082,0.5283257024343627,0.35755706854373825,0.12340943357890613,-0.14280024740066005,0.7758248150565616,1.1623753784192958,0.02520615019440057,-1.0468291777435097]]; const b1=[-0.37037169105382395,-0.7637088428548402,0.1175769457579503,-0.5881923859385868,-0.20387470179247535,-0.8004069680068697]; const W2=[[0.08305050900727201,-1.1082089733133935,-0.08040233974949171,1.0168471885973291,-0.23364854308221708,0.26123517925410666],[0.22785831701141368,-0.3366318050949121,0.24368649918069607,-0.0338107181716001,-0.4019333851056606,0.5609486533235978],[-0.6652466400115743,0.3273748013739458,-0.062236902370540775,-0.8958697491888314,-0.3378953238778673,-0.1633013045885588],[0.17560018992533666,0.3070178681392033,-0.4094237649452052,0.5494537886584913,0.2641603778686326,-0.524844469238954],[0.45655329240884557,-0.3348906873093394,0.21473169283904386,-0.4627435665610082,1.6343696451049605,-0.05266950609787234]]; const b2=[0.22596019803993111,0.4822651367425309,0.2924542153893058,-0.28045628216102425,0.2974080376015511];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.667059521367948,0.1704193186274278,0.6965794611568569,0.6616496892293882,0.2368066494313118,0.025754219661783054,0.018234107925103188,0.6649050806334778,0.4322077852951037,-0.7203877294607062,0.26687384989620333,0.7449059316157024,-0.7736657938628095,0.25000171368151347,-1.6622072085534507,-0.19761731521275405],[-0.5854926714310683,-1.0970628326996703,-0.5139415592627006,0.017504301809219983,-0.06023432184627331,0.8440393164709713,0.3230942277743901,0.5253096467098514,0.5490722275082578,0.5030613577389901,-0.2161239064473302,-0.13287482621539776,-0.08408371982832241,0.9435834933890576,0.5261754441644747,-0.024906984345318746],[-0.2971753019120451,-0.8417680670460292,0.6066182573503995,-0.11002669842700405,-0.7143330963053327,-0.5256831087114255,-1.0716947711336409,0.5315111471416059,-0.32284520907501735,-0.11622269975868223,-0.7434208086623886,0.41078899992265816,0.046397766768049256,0.9571916387574645,-0.6343326969610746,-0.18820832913159402],[-0.4372662497893801,0.10347023825137003,0.7898876557228002,0.25173916090408377,-0.8033684458253996,-0.12078442589299278,0.3330101912086718,-0.2729005847669288,0.5334081711601171,0.735390829816764,-0.2002509037919847,-0.1631507806957472,-0.45648437263092667,-1.0932193256741969,0.5674745289873647,-1.752750220627592],[-1.6647775646955245,0.1405727420347445,-0.21133238818863032,-0.6539289286334339,0.5090874457910137,0.18765018901796138,-0.4410888378972498,0.38038639925015305,-0.24908473245393414,-0.5752998266607534,0.08580680452641962,-0.20335440194024457,0.017466171690317056,-1.0583123709310138,-1.2334467072985063,0.415725989402956],[-0.9321415770578959,-1.1147756719515893,-0.2939972242406367,1.4249850279985006,-0.8321270691000049,-0.564583931167622,-0.2134543858160109,-0.08302517070110144,-0.6023920652532774,-0.9906109380477097,-0.49406012412437034,-0.4920762308738706,-0.42941110632667645,0.4494275211847453,-0.5924815890253791,-0.6899573716165491]]; const b1=[-0.2804031965203555,-0.2186156131800091,0.40064478458942265,-0.19981219449472098,0.07736879079292172,-0.16113287010379929]; const W2=[[0.29661946885695156,0.5388619056042836,0.05631384491166176,-0.3202539967588913,0.11726570231693229,0.21809148821528151],[0.10476306539360211,0.6049570100126194,0.31375521732612066,0.10089827862103759,0.2399335400290782,-0.39362462097368306],[0.7296244463631326,0.9719066108331111,1.0176864363067553,-0.22887920574668819,-0.27580905946034107,-0.06664787430642893],[0.017946058530826738,0.279700915156236,0.12638282223104913,-0.2158267265073327,-0.11650988765879611,0.7171689366072185],[0.32968317739651964,-0.36167880460361296,0.7016544554878461,0.8147590865036387,-0.35321006082071316,-0.19224784387166047]]; const b2=[0.035784643148969106,-0.8539815357312477,0.19091426289051042,-0.102753065082174,-0.08836340501761256];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.24683962567649192,0.11456107342898283,0.166854128035873,-0.29324850824774423,-0.7986575965087401,0.802496859107081,-0.2603111933759359,-0.04297115491268022,0.9979656734810437,0.02834299115570979,0.13861080764493372,-0.3955064664328427,-0.5056136008977987,1.2509443779167246,1.1457345527110967,0.49863679475162564],[-0.2620686834529764,0.5958794042718463,0.23246083751486019,0.14797629308431937,-1.1096649324630647,0.3056456088767334,0.23177352481289532,-0.2805323483084947,0.21792253502350697,0.27254280625666666,-0.507414332826313,-0.4112986375418231,0.7958378565838212,0.1097385975959849,-0.7870195584977963,-0.3302926963928669],[0.589013059483124,0.19548026251098377,-0.08332559809836607,-0.749642649485558,0.8561347965592285,0.02353507853322312,-1.2122413643798289,-0.19493430868060757,-0.38121173092667493,-0.36042113671264575,0.07114667928197538,0.34424591470746657,-0.8788067160096562,0.05985583581778125,-0.7730700054766766,-0.5732934296632013],[-0.0739073104002303,0.7806213190416492,-0.258791929343107,-0.24445755899019236,-0.24669714549817878,0.18090254547356477,-0.3903458649562283,0.1859981351896668,0.5966038969351729,-0.05346874431951573,-0.10950735146255712,0.4577685377123291,-0.5170060963671896,1.1187609302221713,0.9592393711941962,-0.740758910207814],[-0.5658537470415197,0.32282055758572437,-0.4252374641710277,0.5509825510518327,0.44190067645663234,0.0696700623507987,-0.45150384064293214,-0.6910072421722832,0.5508946763656695,0.6908920921274024,-0.36860246253503026,0.4408210654488305,-0.2225460158026659,0.305409669125128,-0.0035520850228213247,-0.13538412804017164],[-0.295275406365037,0.3976161520656414,0.8665509701505039,0.27925525377670696,0.20586875502227137,0.024807725190083646,0.2489233851615912,2.2851552119257117,0.1663837895994612,-0.31647079687242463,0.6121363284352589,0.5787573954407265,0.24312177791073536,-0.9218202563830555,-0.20047369608665097,0.47320930997836885]]; const b1=[0.21194774582264714,0.3484833251238252,-0.47236393596482185,-0.41278263880295646,-0.7077544262125726,0.03486146071117978]; const W2=[[-0.08204854432188344,0.4943305479404523,1.060573224495264,0.45150170731647377,-0.23620431254845947,-0.1597996314387371],[-0.5750279391947873,0.7440022223065212,-0.45040164224748236,-0.14873531103761214,-0.7099202701684436,-0.3340716544394629],[0.6870297567452792,0.7325570914243736,0.6417792682871272,0.17155622181427976,-0.13012229175870554,0.007613146742100334],[-0.31010521579860817,-0.46955904806367565,0.8813280217345463,0.18768347330676294,-0.13842850595530154,-0.4901643459089896],[0.6019097576154675,0.4314173455050935,-0.2843275817637756,0.11060437865311126,1.302235346189372,0.44763500315437893]]; const b2=[-0.1496833903326981,-0.5108961036205375,0.40658627516174767,-0.25643893318518085,-0.2844571885328939];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.7827655016651207,-0.5608984289434629,-0.07388082931724835,0.056494372652866005,-0.8772531377066246,-0.43701106708016757,0.19000369030263242,0.6484892384797061,-0.25007906539150254,-0.17964702158767426,-1.3292233706160803,0.3046646870933647,0.19988439627068164,0.4366305188597639,0.24730044435153406,0.0058112414391655355],[-0.4965672740875082,-0.04165273223457816,-0.6457489291618678,0.10238429316836678,-0.19356338340600507,-0.24230830118797714,-0.22885270453620346,0.9183561410639818,0.18459303655266274,0.1366756328297784,-0.5005790446393377,0.5456816980079953,-0.1449356069731151,-0.07698074285280904,-0.1556850613480264,-0.5023339590865417],[1.384337311333349,0.030556469939129062,0.396465774704465,0.0760633913569526,-0.3592132437167369,1.1677726094108256,-0.31575396670968675,0.5318191336041604,-0.41526769073305225,0.33605717217521863,0.36494564499290794,-0.17815942783417082,-0.3029079420044004,0.7365836384145149,-0.7692326956651124,-1.3085268979939515],[0.2521013959047336,0.43541020954300214,0.5894610445367595,-0.7686039185208139,-1.1171666576600832,0.1727881032869046,-0.40377324802232506,0.436438939319693,-0.7687851410188552,0.21108599116173254,0.10928454762972784,-0.22968766683145217,1.104687226200285,0.42178610379393966,-0.44905300774500506,0.5875552515355678],[1.0898014856975222,-0.2429433903621573,-0.34544983265974194,0.5950310067623467,-0.1487475648153852,0.08632995042924367,0.49096514495558874,-0.3476364705776314,0.015196561270626355,-0.431433825398461,0.15213465349106006,-0.8193804716225604,0.43892351021343806,0.7427107375868099,0.7764308966385506,0.01819937136218147],[-0.4017828557556194,-0.2884500589972634,-0.07998736534734574,-0.25166764184204704,0.6453436427920244,0.2887743223123692,-0.28448742908943936,0.13658431534014082,0.5283257024343627,0.35755706854373825,0.12340943357890613,-0.14280024740066005,0.7758248150565616,1.1623753784192958,0.02520615019440057,-1.0468291777435097]]; const b1=[-0.37037169105382395,-0.7637088428548402,0.1175769457579503,-0.5881923859385868,-0.20387470179247535,-0.8004069680068697]; const W2=[[0.08305050900727201,-1.1082089733133935,-0.08040233974949171,1.0168471885973291,-0.23364854308221708,0.26123517925410666],[0.22785831701141368,-0.3366318050949121,0.24368649918069607,-0.0338107181716001,-0.4019333851056606,0.5609486533235978],[-0.6652466400115743,0.3273748013739458,-0.062236902370540775,-0.8958697491888314,-0.3378953238778673,-0.1633013045885588],[0.17560018992533666,0.3070178681392033,-0.4094237649452052,0.5494537886584913,0.2641603778686326,-0.524844469238954],[0.45655329240884557,-0.3348906873093394,0.21473169283904386,-0.4627435665610082,1.6343696451049605,-0.05266950609787234]]; const b2=[0.22596019803993111,0.4822651367425309,0.2924542153893058,-0.28045628216102425,0.2974080376015511];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.24683962567649192,0.11456107342898283,0.166854128035873,-0.29324850824774423,-0.7986575965087401,0.802496859107081,-0.2603111933759359,-0.04297115491268022,0.9979656734810437,0.02834299115570979,0.13861080764493372,-0.3955064664328427,-0.5056136008977987,1.2509443779167246,1.1457345527110967,0.49863679475162564],[-0.2620686834529764,0.5958794042718463,0.23246083751486019,0.14797629308431937,-1.1096649324630647,0.3056456088767334,0.23177352481289532,-0.2805323483084947,0.21792253502350697,0.27254280625666666,-0.507414332826313,-0.4112986375418231,0.7958378565838212,0.1097385975959849,-0.7870195584977963,-0.3302926963928669],[0.589013059483124,0.19548026251098377,-0.08332559809836607,-0.749642649485558,0.8561347965592285,0.02353507853322312,-1.2122413643798289,-0.19493430868060757,-0.38121173092667493,-0.36042113671264575,0.07114667928197538,0.34424591470746657,-0.8788067160096562,0.05985583581778125,-0.7730700054766766,-0.5732934296632013],[-0.0739073104002303,0.7806213190416492,-0.258791929343107,-0.24445755899019236,-0.24669714549817878,0.18090254547356477,-0.3903458649562283,0.1859981351896668,0.5966038969351729,-0.05346874431951573,-0.10950735146255712,0.4577685377123291,-0.5170060963671896,1.1187609302221713,0.9592393711941962,-0.740758910207814],[-0.5658537470415197,0.32282055758572437,-0.4252374641710277,0.5509825510518327,0.44190067645663234,0.0696700623507987,-0.45150384064293214,-0.6910072421722832,0.5508946763656695,0.6908920921274024,-0.36860246253503026,0.4408210654488305,-0.2225460158026659,0.305409669125128,-0.0035520850228213247,-0.13538412804017164],[-0.295275406365037,0.3976161520656414,0.8665509701505039,0.27925525377670696,0.20586875502227137,0.024807725190083646,0.2489233851615912,2.2851552119257117,0.1663837895994612,-0.31647079687242463,0.6121363284352589,0.5787573954407265,0.24312177791073536,-0.9218202563830555,-0.20047369608665097,0.47320930997836885]]; const b1=[0.21194774582264714,0.3484833251238252,-0.47236393596482185,-0.41278263880295646,-0.7077544262125726,0.03486146071117978]; const W2=[[-0.08204854432188344,0.4943305479404523,1.060573224495264,0.45150170731647377,-0.23620431254845947,-0.1597996314387371],[-0.5750279391947873,0.7440022223065212,-0.45040164224748236,-0.14873531103761214,-0.7099202701684436,-0.3340716544394629],[0.6870297567452792,0.7325570914243736,0.6417792682871272,0.17155622181427976,-0.13012229175870554,0.007613146742100334],[-0.31010521579860817,-0.46955904806367565,0.8813280217345463,0.18768347330676294,-0.13842850595530154,-0.4901643459089896],[0.6019097576154675,0.4314173455050935,-0.2843275817637756,0.11060437865311126,1.302235346189372,0.44763500315437893]]; const b2=[-0.1496833903326981,-0.5108961036205375,0.40658627516174767,-0.25643893318518085,-0.2844571885328939];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.7827655016651207,-0.5608984289434629,-0.07388082931724835,0.056494372652866005,-0.8772531377066246,-0.43701106708016757,0.19000369030263242,0.6484892384797061,-0.25007906539150254,-0.17964702158767426,-1.3292233706160803,0.3046646870933647,0.19988439627068164,0.4366305188597639,0.24730044435153406,0.0058112414391655355],[-0.4965672740875082,-0.04165273223457816,-0.6457489291618678,0.10238429316836678,-0.19356338340600507,-0.24230830118797714,-0.22885270453620346,0.9183561410639818,0.18459303655266274,0.1366756328297784,-0.5005790446393377,0.5456816980079953,-0.1449356069731151,-0.07698074285280904,-0.1556850613480264,-0.5023339590865417],[1.384337311333349,0.030556469939129062,0.396465774704465,0.0760633913569526,-0.3592132437167369,1.1677726094108256,-0.31575396670968675,0.5318191336041604,-0.41526769073305225,0.33605717217521863,0.36494564499290794,-0.17815942783417082,-0.3029079420044004,0.7365836384145149,-0.7692326956651124,-1.3085268979939515],[0.2521013959047336,0.43541020954300214,0.5894610445367595,-0.7686039185208139,-1.1171666576600832,0.1727881032869046,-0.40377324802232506,0.436438939319693,-0.7687851410188552,0.21108599116173254,0.10928454762972784,-0.22968766683145217,1.104687226200285,0.42178610379393966,-0.44905300774500506,0.5875552515355678],[1.0898014856975222,-0.2429433903621573,-0.34544983265974194,0.5950310067623467,-0.1487475648153852,0.08632995042924367,0.49096514495558874,-0.3476364705776314,0.015196561270626355,-0.431433825398461,0.15213465349106006,-0.8193804716225604,0.43892351021343806,0.7427107375868099,0.7764308966385506,0.01819937136218147],[-0.4017828557556194,-0.2884500589972634,-0.07998736534734574,-0.25166764184204704,0.6453436427920244,0.2887743223123692,-0.28448742908943936,0.13658431534014082,0.5283257024343627,0.35755706854373825,0.12340943357890613,-0.14280024740066005,0.7758248150565616,1.1623753784192958,0.02520615019440057,-1.0468291777435097]]; const b1=[-0.37037169105382395,-0.7637088428548402,0.1175769457579503,-0.5881923859385868,-0.20387470179247535,-0.8004069680068697]; const W2=[[0.08305050900727201,-1.1082089733133935,-0.08040233974949171,1.0168471885973291,-0.23364854308221708,0.26123517925410666],[0.22785831701141368,-0.3366318050949121,0.24368649918069607,-0.0338107181716001,-0.4019333851056606,0.5609486533235978],[-0.6652466400115743,0.3273748013739458,-0.062236902370540775,-0.8958697491888314,-0.3378953238778673,-0.1633013045885588],[0.17560018992533666,0.3070178681392033,-0.4094237649452052,0.5494537886584913,0.2641603778686326,-0.524844469238954],[0.45655329240884557,-0.3348906873093394,0.21473169283904386,-0.4627435665610082,1.6343696451049605,-0.05266950609787234]]; const b2=[0.22596019803993111,0.4822651367425309,0.2924542153893058,-0.28045628216102425,0.2974080376015511];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}