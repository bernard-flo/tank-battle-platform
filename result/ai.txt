function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.7740734487024589,-0.21387987770697242,0.006990755586184776,0.1769636209203533,-0.6294022531546956,0.018096460821839886,-0.13566847521812947,0.42643792709295314,-0.5858774333596171,-0.22874083322611463,-1.2412523186392157,0.54263106079832,-0.13164533721100793,0.617021365147639,0.5542007055585494,-0.018891561204621293],[-0.8427878357013517,-0.31740196817636523,-0.5562301222231132,-0.2688903103769986,0.24183539584536515,-0.49202235549825335,-0.18977110036752282,1.017250064168802,-0.44260757675441975,-0.0196347827823926,-0.3532125053610582,1.1186824715124517,-1.1395586565136997,0.762836769639744,-0.30794406080160175,-0.05441801216345957],[0.7412834034207054,-0.390909473440745,0.579911681628686,-0.10423506166615261,-0.02901017623398583,0.29342516647407396,0.13167082025852914,1.237620084631066,-0.32233950949448675,0.3914034291675244,0.6524018268541102,-0.7774377299895612,-0.5863393982019749,1.16612976198021,-0.6253515061669169,0.10607744172828017],[0.23573031886138449,0.7060166093368461,0.3545567879220017,-0.28815172343599216,-1.7397503778702332,0.38462041288885035,-0.35946428622459176,0.06762397712370723,-1.1160872970575157,-0.7871750779195696,0.10918205834837647,0.6929334458160319,0.07915023850180745,0.3501176158624505,-0.6881964922068448,0.5429280780258481],[0.3950042547158147,-0.5310307483931909,-0.9189506571669047,0.1214535584379385,-0.1369939495844971,-1.0601813841770709,-0.7442385175826549,-1.2228513788103266,0.0054582966752079465,-0.6633078442908724,0.17470143462915455,-0.24538416955301778,0.14564719051164696,-0.49243514125043236,-0.306967335870141,0.3581174688155895],[-0.22404063132089513,0.9061039095156573,0.3549090036720057,-0.7075276663596842,0.9116496482570852,0.5253108130227666,0.30254371126107826,0.29699588477088107,-0.11345557323210465,-0.23884276624834183,-0.2371509805374904,0.03386153136153198,0.8338078294571641,1.1703362980036487,0.5254411385513498,-0.7915369908166737]]; const b1=[-0.20774112063686234,0.3087124020641978,0.21399947936009767,-0.1825070886727876,0.5170754238767663,0.1263170250155149]; const W2=[[0.19960553840096382,-0.7511458087505738,0.10563672397387826,0.6247423197747666,-1.3168485055724202,-0.4180812894605742],[0.47644043205371567,0.21940352292168663,0.02474297863094263,0.8229127741107215,-1.0258624304366306,0.11398287261257056],[-0.09965779124141413,0.6108953693193433,-0.6516810186437073,-0.28362463588277254,-0.4063153082351496,-0.4460064575073861],[0.720073983072897,0.8710624892963534,-0.18811194180003443,-0.3718233479484525,-0.702369978121852,-0.2443148907801022],[0.8954473210718565,-0.7215337636325527,0.24845194492719352,-0.9955941739211885,0.9565648490063978,-0.7735144688769965]]; const b2=[-0.022183112323196613,0.10608596198339336,0.043062565015387244,-0.8692656929097446,0.3789409757478573];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.8895281516692816,0.3049639080027129,-0.25475866087677235,0.4982674236397917,0.11868737804542563,0.48523437804759495,-0.8543175350328882,-0.19376826023597543,0.3823839563540534,-0.2689705224080885,-0.029634089590884677,0.3771915843294764,-0.0016092467124315946,-0.13511544503975287,-0.220906920439277,-0.061953899950664],[-0.04187214499674563,-1.6257312454125936,-0.9201145388665476,-0.6713972983273109,-0.11280839190224635,0.8544205353454822,-0.3183738232784284,0.11801032384312296,0.7017273416016122,0.4028929122624923,0.20078289312179937,0.48767592702892854,0.7938543340470091,1.5234932822160172,0.23749258195645925,0.2278209671641262],[-0.48147076068334094,-0.27154467597958504,0.4460199486009569,0.5240693532703151,-0.36468561548996986,-0.5322858839655509,-0.9153584752473019,0.17375108289446123,-0.07422900967710803,-0.5215304480360397,-0.45145589965433175,0.19725327145455634,-0.3050896312318624,0.2955259519918058,-0.34525279473927434,0.693331984084572],[-0.2709495044481279,0.6731494858801487,0.6184021164266295,0.4590858589462973,-0.06927504035776687,0.38159346002042865,-0.34805976766528385,0.32566934888404564,0.29702961112068205,1.4680468712710115,0.08159859945566103,0.20160452338103424,-0.08665473780705064,-0.15244769141091774,-0.4249306203207469,-1.0160750356190693],[-0.6337466773072696,0.484142304929707,-0.4988949411855468,0.28452981631789465,0.16488633240199332,0.8999748693209163,-0.23469507185105973,0.10001601219056717,0.03858434605260965,0.2633447764960836,0.0999963208883686,-0.2817952923004745,-0.11475388548769148,0.26719248712130794,-0.8941730440353792,0.7028975506607894],[-0.5974458360242434,-0.5103838735613094,0.35878797502253046,0.4001126657042957,-0.017553600277338488,-0.7810663874167925,-0.8380271091994835,0.19083338317772552,-0.1479803049191539,0.0668247276914875,-0.5864502147427584,-0.6334287482085266,-0.9828435454206313,-0.17276399857494593,-0.5071475064113156,0.3844277257192652]]; const b1=[-0.27588902455020137,0.20528376354976074,-0.03559738888266726,0.24289013131184858,0.013992608218945546,-0.22244856769685684]; const W2=[[-0.5035566459788074,-0.988569406653242,-0.5325817912735974,0.24663668690443907,-0.06998127687839474,-0.17336197201429274],[0.4949770057564825,0.82464035741882,0.6121464555582141,0.8011864579850535,-0.3634348821396819,-0.8424638668735452],[-0.18322640367488677,-0.0927320752729366,0.16532768841038628,0.9598703978478885,0.6146843125863005,0.1858913886744323],[0.1331957861892938,0.30529127742960294,-0.5266289594177915,0.621455645764076,0.9833938595948194,0.8627566317921055],[0.1740757309213444,0.4107448463381486,0.5548768912213993,0.27225521492294924,-0.5263498745770914,-0.2964910796185337]]; const b2=[0.6123041331654577,0.09143157529420518,-0.18265422256886535,0.6106678751444342,0.13805241699629242];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.9360276934485406,0.5964998288299399,-0.5197821654973425,-0.693240472315687,-0.25531288908676286,0.017697328480791634,-0.09549198454360858,0.4394575404230876,-0.308374112142872,0.22192336347177544,0.00026834014436064035,0.6355018760202296,-0.23983811566293217,0.028050317297181437,0.704821032861834,0.27811923927180005],[0.23319336271561095,0.30649611923358505,0.12763757628563538,-0.19592518298032208,-1.42444180690438,-0.3375438119179327,0.2008733908509214,-0.019147462863652973,-0.11630191176913197,-0.5152931274328041,-0.2722783658601332,-0.4578235574402912,0.5149630958169928,0.2103244982582305,-0.7413529733779991,-0.20041717773135773],[0.3247760575068048,0.7428954694915318,-0.4978349324510821,0.27337028077808384,0.7509948562025245,-0.5955915365484782,-0.9852585028747567,-0.6504572011468259,-0.012439070140440753,0.14136205152338832,0.6246477396171644,-0.13692087491875526,-0.6337762203638502,0.30405272802084204,-1.3903951749602068,0.38232753972776057],[-0.936611990123194,0.5089031995282363,-0.6182593765303724,0.19027353363327937,-0.7018232319336852,0.1309389587224661,-0.302067683575511,0.2970185253741972,0.5876356077195141,-0.028361486469259525,-0.13568601204206895,1.440284550072156,-0.18864274955701305,1.3567864435833077,-0.40380449887145015,-0.20636120160556254],[-0.28726310337557187,0.36540765595999086,0.18183480358863716,0.6653871353007494,0.2272326747476766,-0.48435623469997197,-0.5941435387992448,-0.4772252873608159,0.37654906374206404,0.49729950205832635,0.3281111605049393,-0.301228888159302,-0.2896136693268248,0.13768538448425172,0.004816133829138772,0.4682085240608194],[0.2041250104449461,-0.19699753107815304,-0.3307910473324183,-0.34141053321341397,-0.4356219663401163,0.28106837805481993,0.8227126245255879,1.2064331703800821,-0.29187245794757344,-0.39028044530691214,0.7529148332554163,0.6474020150569066,-0.5589225785590451,-0.5883253939431877,-0.012623598250327245,0.6693654238980572]]; const b1=[0.09473314570842456,-0.23590650905189042,0.08676909714696383,-0.40537983547046486,-0.02863686477986451,-0.38625045173333056]; const W2=[[0.45460670393647123,-0.1331276525647081,-0.11186653485043024,-0.614524713935786,-0.7299711662757528,0.7065042167666734],[0.8237925798925365,0.502677796712482,0.20079693593879525,-0.3724748517425721,0.11307929215658924,0.2238687975650326],[0.8816853571334875,0.7641153807265388,-0.025004467571366755,0.783410719398708,-0.22033961243847394,-0.38144712718730794],[-0.3771617226375291,-1.117776765795502,0.39241313788423304,-0.2633324405327919,-0.8560663506324312,-0.4690282229349822],[-0.273267432954841,0.08365311636921752,-0.28008187224435066,0.6275818924999053,0.6338475740697145,0.5295961138656103]]; const b2=[-0.5465851784783508,-0.6363655075368855,0.5498910379504306,0.9665312606502485,0.22927369022473965];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.7740734487024589,-0.21387987770697242,0.006990755586184776,0.1769636209203533,-0.6294022531546956,0.018096460821839886,-0.13566847521812947,0.42643792709295314,-0.5858774333596171,-0.22874083322611463,-1.2412523186392157,0.54263106079832,-0.13164533721100793,0.617021365147639,0.5542007055585494,-0.018891561204621293],[-0.8427878357013517,-0.31740196817636523,-0.5562301222231132,-0.2688903103769986,0.24183539584536515,-0.49202235549825335,-0.18977110036752282,1.017250064168802,-0.44260757675441975,-0.0196347827823926,-0.3532125053610582,1.1186824715124517,-1.1395586565136997,0.762836769639744,-0.30794406080160175,-0.05441801216345957],[0.7412834034207054,-0.390909473440745,0.579911681628686,-0.10423506166615261,-0.02901017623398583,0.29342516647407396,0.13167082025852914,1.237620084631066,-0.32233950949448675,0.3914034291675244,0.6524018268541102,-0.7774377299895612,-0.5863393982019749,1.16612976198021,-0.6253515061669169,0.10607744172828017],[0.23573031886138449,0.7060166093368461,0.3545567879220017,-0.28815172343599216,-1.7397503778702332,0.38462041288885035,-0.35946428622459176,0.06762397712370723,-1.1160872970575157,-0.7871750779195696,0.10918205834837647,0.6929334458160319,0.07915023850180745,0.3501176158624505,-0.6881964922068448,0.5429280780258481],[0.3950042547158147,-0.5310307483931909,-0.9189506571669047,0.1214535584379385,-0.1369939495844971,-1.0601813841770709,-0.7442385175826549,-1.2228513788103266,0.0054582966752079465,-0.6633078442908724,0.17470143462915455,-0.24538416955301778,0.14564719051164696,-0.49243514125043236,-0.306967335870141,0.3581174688155895],[-0.22404063132089513,0.9061039095156573,0.3549090036720057,-0.7075276663596842,0.9116496482570852,0.5253108130227666,0.30254371126107826,0.29699588477088107,-0.11345557323210465,-0.23884276624834183,-0.2371509805374904,0.03386153136153198,0.8338078294571641,1.1703362980036487,0.5254411385513498,-0.7915369908166737]]; const b1=[-0.20774112063686234,0.3087124020641978,0.21399947936009767,-0.1825070886727876,0.5170754238767663,0.1263170250155149]; const W2=[[0.19960553840096382,-0.7511458087505738,0.10563672397387826,0.6247423197747666,-1.3168485055724202,-0.4180812894605742],[0.47644043205371567,0.21940352292168663,0.02474297863094263,0.8229127741107215,-1.0258624304366306,0.11398287261257056],[-0.09965779124141413,0.6108953693193433,-0.6516810186437073,-0.28362463588277254,-0.4063153082351496,-0.4460064575073861],[0.720073983072897,0.8710624892963534,-0.18811194180003443,-0.3718233479484525,-0.702369978121852,-0.2443148907801022],[0.8954473210718565,-0.7215337636325527,0.24845194492719352,-0.9955941739211885,0.9565648490063978,-0.7735144688769965]]; const b2=[-0.022183112323196613,0.10608596198339336,0.043062565015387244,-0.8692656929097446,0.3789409757478573];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.9360276934485406,0.5964998288299399,-0.5197821654973425,-0.693240472315687,-0.25531288908676286,0.017697328480791634,-0.09549198454360858,0.4394575404230876,-0.308374112142872,0.22192336347177544,0.00026834014436064035,0.6355018760202296,-0.23983811566293217,0.028050317297181437,0.704821032861834,0.27811923927180005],[0.23319336271561095,0.30649611923358505,0.12763757628563538,-0.19592518298032208,-1.42444180690438,-0.3375438119179327,0.2008733908509214,-0.019147462863652973,-0.11630191176913197,-0.5152931274328041,-0.2722783658601332,-0.4578235574402912,0.5149630958169928,0.2103244982582305,-0.7413529733779991,-0.20041717773135773],[0.3247760575068048,0.7428954694915318,-0.4978349324510821,0.27337028077808384,0.7509948562025245,-0.5955915365484782,-0.9852585028747567,-0.6504572011468259,-0.012439070140440753,0.14136205152338832,0.6246477396171644,-0.13692087491875526,-0.6337762203638502,0.30405272802084204,-1.3903951749602068,0.38232753972776057],[-0.936611990123194,0.5089031995282363,-0.6182593765303724,0.19027353363327937,-0.7018232319336852,0.1309389587224661,-0.302067683575511,0.2970185253741972,0.5876356077195141,-0.028361486469259525,-0.13568601204206895,1.440284550072156,-0.18864274955701305,1.3567864435833077,-0.40380449887145015,-0.20636120160556254],[-0.28726310337557187,0.36540765595999086,0.18183480358863716,0.6653871353007494,0.2272326747476766,-0.48435623469997197,-0.5941435387992448,-0.4772252873608159,0.37654906374206404,0.49729950205832635,0.3281111605049393,-0.301228888159302,-0.2896136693268248,0.13768538448425172,0.004816133829138772,0.4682085240608194],[0.2041250104449461,-0.19699753107815304,-0.3307910473324183,-0.34141053321341397,-0.4356219663401163,0.28106837805481993,0.8227126245255879,1.2064331703800821,-0.29187245794757344,-0.39028044530691214,0.7529148332554163,0.6474020150569066,-0.5589225785590451,-0.5883253939431877,-0.012623598250327245,0.6693654238980572]]; const b1=[0.09473314570842456,-0.23590650905189042,0.08676909714696383,-0.40537983547046486,-0.02863686477986451,-0.38625045173333056]; const W2=[[0.45460670393647123,-0.1331276525647081,-0.11186653485043024,-0.614524713935786,-0.7299711662757528,0.7065042167666734],[0.8237925798925365,0.502677796712482,0.20079693593879525,-0.3724748517425721,0.11307929215658924,0.2238687975650326],[0.8816853571334875,0.7641153807265388,-0.025004467571366755,0.783410719398708,-0.22033961243847394,-0.38144712718730794],[-0.3771617226375291,-1.117776765795502,0.39241313788423304,-0.2633324405327919,-0.8560663506324312,-0.4690282229349822],[-0.273267432954841,0.08365311636921752,-0.28008187224435066,0.6275818924999053,0.6338475740697145,0.5295961138656103]]; const b2=[-0.5465851784783508,-0.6363655075368855,0.5498910379504306,0.9665312606502485,0.22927369022473965];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.7740734487024589,-0.21387987770697242,0.006990755586184776,0.1769636209203533,-0.6294022531546956,0.018096460821839886,-0.13566847521812947,0.42643792709295314,-0.5858774333596171,-0.22874083322611463,-1.2412523186392157,0.54263106079832,-0.13164533721100793,0.617021365147639,0.5542007055585494,-0.018891561204621293],[-0.8427878357013517,-0.31740196817636523,-0.5562301222231132,-0.2688903103769986,0.24183539584536515,-0.49202235549825335,-0.18977110036752282,1.017250064168802,-0.44260757675441975,-0.0196347827823926,-0.3532125053610582,1.1186824715124517,-1.1395586565136997,0.762836769639744,-0.30794406080160175,-0.05441801216345957],[0.7412834034207054,-0.390909473440745,0.579911681628686,-0.10423506166615261,-0.02901017623398583,0.29342516647407396,0.13167082025852914,1.237620084631066,-0.32233950949448675,0.3914034291675244,0.6524018268541102,-0.7774377299895612,-0.5863393982019749,1.16612976198021,-0.6253515061669169,0.10607744172828017],[0.23573031886138449,0.7060166093368461,0.3545567879220017,-0.28815172343599216,-1.7397503778702332,0.38462041288885035,-0.35946428622459176,0.06762397712370723,-1.1160872970575157,-0.7871750779195696,0.10918205834837647,0.6929334458160319,0.07915023850180745,0.3501176158624505,-0.6881964922068448,0.5429280780258481],[0.3950042547158147,-0.5310307483931909,-0.9189506571669047,0.1214535584379385,-0.1369939495844971,-1.0601813841770709,-0.7442385175826549,-1.2228513788103266,0.0054582966752079465,-0.6633078442908724,0.17470143462915455,-0.24538416955301778,0.14564719051164696,-0.49243514125043236,-0.306967335870141,0.3581174688155895],[-0.22404063132089513,0.9061039095156573,0.3549090036720057,-0.7075276663596842,0.9116496482570852,0.5253108130227666,0.30254371126107826,0.29699588477088107,-0.11345557323210465,-0.23884276624834183,-0.2371509805374904,0.03386153136153198,0.8338078294571641,1.1703362980036487,0.5254411385513498,-0.7915369908166737]]; const b1=[-0.20774112063686234,0.3087124020641978,0.21399947936009767,-0.1825070886727876,0.5170754238767663,0.1263170250155149]; const W2=[[0.19960553840096382,-0.7511458087505738,0.10563672397387826,0.6247423197747666,-1.3168485055724202,-0.4180812894605742],[0.47644043205371567,0.21940352292168663,0.02474297863094263,0.8229127741107215,-1.0258624304366306,0.11398287261257056],[-0.09965779124141413,0.6108953693193433,-0.6516810186437073,-0.28362463588277254,-0.4063153082351496,-0.4460064575073861],[0.720073983072897,0.8710624892963534,-0.18811194180003443,-0.3718233479484525,-0.702369978121852,-0.2443148907801022],[0.8954473210718565,-0.7215337636325527,0.24845194492719352,-0.9955941739211885,0.9565648490063978,-0.7735144688769965]]; const b2=[-0.022183112323196613,0.10608596198339336,0.043062565015387244,-0.8692656929097446,0.3789409757478573];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}