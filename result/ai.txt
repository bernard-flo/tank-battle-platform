function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.747836683462295,-0.5637815034593319,-0.40864170174569503,0.9218363990107273,-0.1795201501945532,-1.0821883499823657,-0.3323062731782245,-0.04118839979575792,-1.212745893828082,0.12259145795503679,-1.1009753954880583,0.3259616096894062,-0.40251174050855737,1.0556291370023438,0.9419027347480022,0.015133296517442614],[-0.3244260645640529,-0.1471704817667983,-0.29521792699120636,-0.7826870363326406,-0.35007198599923484,-0.40006146327026715,-0.1559479677979388,0.2685121335290615,-0.08369420439251152,-0.5165730631553878,-0.1636546408710738,0.017630804723476362,-0.34748767408772274,0.2816351690956419,-1.406052692872349,0.40204566971871497],[0.5209702030814058,-0.8101488054517342,0.855378899972858,0.4752368443553379,-0.4415826078564449,-0.4771407974856853,0.24032286766908323,0.9979768698796265,-0.580405146987925,0.04823562483467518,0.5170378197351924,-1.3941675180787225,-0.07001707772926904,0.6499674638190442,-1.1164380268538534,0.04847426001830815],[1.163032854967295,0.3446827118366481,0.08582791962500533,-0.7526633343659861,-0.7745281931682519,0.5898001619606166,-0.36048476685495745,0.1116468197586282,-0.34035247671094915,-0.9024771661609314,-0.42743441218947187,-0.20650885799750085,0.2969306445789377,0.2276022094136813,0.15684415470937502,0.5213995613761965],[0.6929706269320305,-0.24808670136932584,-0.24033435356042845,-0.1220960353826673,-0.6688302829341057,-0.5562800412900629,-1.0766408655702435,-1.2951024999499103,-0.5293738447967495,0.3066048323282205,-0.4374538268819715,0.03431943659326017,0.2354190105461891,-0.18050403511207064,-0.6931494902227084,-0.2729757062825463],[0.5961680757644874,0.7194799500118952,0.8865194860949374,-0.62438958298494,0.8243088006957375,0.4736580061819217,0.33943357436978483,-0.6324054021084304,-0.0696539435927161,-0.7944047855985639,-0.7397074797070537,-0.39740929163281147,1.4893638945376664,1.2472931304572297,0.09310790427495258,-0.6428085168779324]]; const b1=[-0.25045426341799554,0.3134952948921463,-0.06553826023453824,-0.16472963192530993,0.1260861383219798,0.4082660255258494]; const W2=[[0.1132657078659206,-1.1787722930495577,0.3056453415552057,0.3088343296052534,-0.45635640417618806,-0.7787121072773115],[0.8680147323639783,0.5825821348290945,-0.7624728136847246,0.9559728133256027,-0.5565488128173594,0.27118328707849443],[-0.22058902830319563,0.4505496675019756,-0.4762430258605518,-0.3748942283795913,-0.5078216068251596,0.40716972356225994],[1.327862619165429,0.5566936691859075,0.16018287321522764,-0.7439835808876659,-0.14719260248107643,-0.2774847075898761],[0.3035191018077542,-0.7547074167573183,0.3898999667344425,-0.5572460300847623,0.5028434979028724,-0.3077606932336385]]; const b2=[0.29407020638380565,0.572108122290313,-1.00700919580818,0.1834060954241765,0.38768773123065325];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.7267308013429321,-1.0125014465862967,-0.16562597771517232,0.11673111256496027,-0.5487058113529895,0.6414750240879921,-1.1639032738000743,-0.39775488558582256,0.6279608499092667,0.7188274507178614,0.717567982628774,-0.3153808388897695,-1.0633788884564168,0.3220469609559785,-1.2551902505351897,0.017519808794968145],[-0.44749621911875404,-1.2608152236061712,-0.2431302358332806,-0.41250608303117003,-0.11702114785603723,-0.11760243947890936,-0.17078631164624233,0.20322819418708668,0.5305437419313617,0.33849867079465845,0.18621282125857136,0.6269342129985981,1.354410106729597,0.8503730135718548,-0.1907224362959572,0.11558840144087835],[-0.21621499134752076,0.18122972531695142,0.14414963893323585,0.2572716291032111,-0.6349352771407485,-0.33796121431611403,-1.3199363709491303,0.7075272094605667,1.156370166814885,-0.5031617484568705,-1.052616893828696,-0.07356991971153723,-0.508034312837419,0.7945771723014624,0.03127633772545668,0.23408200239078936],[-0.5366514903254997,0.786794452619632,0.220577919662388,-0.32054052463587135,-0.7208661978459752,1.1342046133908084,-0.6486088640106221,-0.40523029689840956,0.6085453601114998,1.6402861466379235,-0.5237571514836599,0.3796654705862656,0.08942955417503157,-0.33011022069741247,-0.7763170226175914,-0.32018752190764094],[-1.1056442857239381,0.49499321017377873,-0.3462449418902902,0.5855233220429324,-0.7474777809938818,-0.5491817213136482,-0.6006569277234505,-0.29351756478667623,0.5123042865640085,0.7153529931027998,0.02408664246405945,0.4725440617923191,0.4858503894094222,-0.49319134000486453,0.16887868626385227,0.21275859985251117],[-0.5159716687961788,-0.5761165796014814,-0.7980448923523218,0.6407464977418887,-0.8042811856579436,-0.28872752153868486,-0.23991723304990964,-0.7486909900965534,-0.3879495080236125,-0.9534443896703318,-1.0738305498977512,-0.6271658994389555,-1.0117664314950985,0.6934815977779656,-0.9427673623755884,0.46223119769360255]]; const b1=[-0.3161965046384171,-0.754131487719035,0.2291808430307838,-0.408699428247907,-0.23960312258727778,-0.33447492318769745]; const W2=[[-0.6581639535811159,0.11657621961509806,-1.1818830505849307,-0.42048525241321505,-0.053754495680676,-0.5995681371487231],[0.8128198556930776,0.2939948119096632,-0.5052181534133133,0.7056897476850856,-0.3263472148814457,0.5329637989735343],[0.49182209093141566,0.45339600955874915,-0.323836836762298,0.22415849615330152,0.0915023893083934,0.17710976851456933],[0.42040832137134493,0.5314003153357733,-1.5186255971185305,1.0532087090245257,0.46476193977847646,0.974105188231825],[-0.2561684099720149,0.21328384252381363,0.2665848221833352,0.11266041587840403,-0.1403599199599767,-0.15190743900905768]]; const b2=[-0.022517825381040857,0.20202160574747854,-0.4859468235847737,0.3006098688310236,0.07106515922737845];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.7267308013429321,-1.0125014465862967,-0.16562597771517232,0.11673111256496027,-0.5487058113529895,0.6414750240879921,-1.1639032738000743,-0.39775488558582256,0.6279608499092667,0.7188274507178614,0.717567982628774,-0.3153808388897695,-1.0633788884564168,0.3220469609559785,-1.2551902505351897,0.017519808794968145],[-0.44749621911875404,-1.2608152236061712,-0.2431302358332806,-0.41250608303117003,-0.11702114785603723,-0.11760243947890936,-0.17078631164624233,0.20322819418708668,0.5305437419313617,0.33849867079465845,0.18621282125857136,0.6269342129985981,1.354410106729597,0.8503730135718548,-0.1907224362959572,0.11558840144087835],[-0.21621499134752076,0.18122972531695142,0.14414963893323585,0.2572716291032111,-0.6349352771407485,-0.33796121431611403,-1.3199363709491303,0.7075272094605667,1.156370166814885,-0.5031617484568705,-1.052616893828696,-0.07356991971153723,-0.508034312837419,0.7945771723014624,0.03127633772545668,0.23408200239078936],[-0.5366514903254997,0.786794452619632,0.220577919662388,-0.32054052463587135,-0.7208661978459752,1.1342046133908084,-0.6486088640106221,-0.40523029689840956,0.6085453601114998,1.6402861466379235,-0.5237571514836599,0.3796654705862656,0.08942955417503157,-0.33011022069741247,-0.7763170226175914,-0.32018752190764094],[-1.1056442857239381,0.49499321017377873,-0.3462449418902902,0.5855233220429324,-0.7474777809938818,-0.5491817213136482,-0.6006569277234505,-0.29351756478667623,0.5123042865640085,0.7153529931027998,0.02408664246405945,0.4725440617923191,0.4858503894094222,-0.49319134000486453,0.16887868626385227,0.21275859985251117],[-0.5159716687961788,-0.5761165796014814,-0.7980448923523218,0.6407464977418887,-0.8042811856579436,-0.28872752153868486,-0.23991723304990964,-0.7486909900965534,-0.3879495080236125,-0.9534443896703318,-1.0738305498977512,-0.6271658994389555,-1.0117664314950985,0.6934815977779656,-0.9427673623755884,0.46223119769360255]]; const b1=[-0.3161965046384171,-0.754131487719035,0.2291808430307838,-0.408699428247907,-0.23960312258727778,-0.33447492318769745]; const W2=[[-0.6581639535811159,0.11657621961509806,-1.1818830505849307,-0.42048525241321505,-0.053754495680676,-0.5995681371487231],[0.8128198556930776,0.2939948119096632,-0.5052181534133133,0.7056897476850856,-0.3263472148814457,0.5329637989735343],[0.49182209093141566,0.45339600955874915,-0.323836836762298,0.22415849615330152,0.0915023893083934,0.17710976851456933],[0.42040832137134493,0.5314003153357733,-1.5186255971185305,1.0532087090245257,0.46476193977847646,0.974105188231825],[-0.2561684099720149,0.21328384252381363,0.2665848221833352,0.11266041587840403,-0.1403599199599767,-0.15190743900905768]]; const b2=[-0.022517825381040857,0.20202160574747854,-0.4859468235847737,0.3006098688310236,0.07106515922737845];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.747836683462295,-0.5637815034593319,-0.40864170174569503,0.9218363990107273,-0.1795201501945532,-1.0821883499823657,-0.3323062731782245,-0.04118839979575792,-1.212745893828082,0.12259145795503679,-1.1009753954880583,0.3259616096894062,-0.40251174050855737,1.0556291370023438,0.9419027347480022,0.015133296517442614],[-0.3244260645640529,-0.1471704817667983,-0.29521792699120636,-0.7826870363326406,-0.35007198599923484,-0.40006146327026715,-0.1559479677979388,0.2685121335290615,-0.08369420439251152,-0.5165730631553878,-0.1636546408710738,0.017630804723476362,-0.34748767408772274,0.2816351690956419,-1.406052692872349,0.40204566971871497],[0.5209702030814058,-0.8101488054517342,0.855378899972858,0.4752368443553379,-0.4415826078564449,-0.4771407974856853,0.24032286766908323,0.9979768698796265,-0.580405146987925,0.04823562483467518,0.5170378197351924,-1.3941675180787225,-0.07001707772926904,0.6499674638190442,-1.1164380268538534,0.04847426001830815],[1.163032854967295,0.3446827118366481,0.08582791962500533,-0.7526633343659861,-0.7745281931682519,0.5898001619606166,-0.36048476685495745,0.1116468197586282,-0.34035247671094915,-0.9024771661609314,-0.42743441218947187,-0.20650885799750085,0.2969306445789377,0.2276022094136813,0.15684415470937502,0.5213995613761965],[0.6929706269320305,-0.24808670136932584,-0.24033435356042845,-0.1220960353826673,-0.6688302829341057,-0.5562800412900629,-1.0766408655702435,-1.2951024999499103,-0.5293738447967495,0.3066048323282205,-0.4374538268819715,0.03431943659326017,0.2354190105461891,-0.18050403511207064,-0.6931494902227084,-0.2729757062825463],[0.5961680757644874,0.7194799500118952,0.8865194860949374,-0.62438958298494,0.8243088006957375,0.4736580061819217,0.33943357436978483,-0.6324054021084304,-0.0696539435927161,-0.7944047855985639,-0.7397074797070537,-0.39740929163281147,1.4893638945376664,1.2472931304572297,0.09310790427495258,-0.6428085168779324]]; const b1=[-0.25045426341799554,0.3134952948921463,-0.06553826023453824,-0.16472963192530993,0.1260861383219798,0.4082660255258494]; const W2=[[0.1132657078659206,-1.1787722930495577,0.3056453415552057,0.3088343296052534,-0.45635640417618806,-0.7787121072773115],[0.8680147323639783,0.5825821348290945,-0.7624728136847246,0.9559728133256027,-0.5565488128173594,0.27118328707849443],[-0.22058902830319563,0.4505496675019756,-0.4762430258605518,-0.3748942283795913,-0.5078216068251596,0.40716972356225994],[1.327862619165429,0.5566936691859075,0.16018287321522764,-0.7439835808876659,-0.14719260248107643,-0.2774847075898761],[0.3035191018077542,-0.7547074167573183,0.3898999667344425,-0.5572460300847623,0.5028434979028724,-0.3077606932336385]]; const b2=[0.29407020638380565,0.572108122290313,-1.00700919580818,0.1834060954241765,0.38768773123065325];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.466642052401435,0.6245617501825258,-0.7645099264408993,-0.8459423722011422,-1.271840864811066,0.8740061676021837,-0.3994904281211401,0.9029571447405248,0.08282489009271675,-0.3082652197369022,-0.45166130739658816,0.4702657223801294,1.2238523558325884,0.1881864712947764,1.289693494053507,-0.21521001284084068],[0.19447543453901686,0.7887666446537898,0.1426835534078471,0.3713814594616941,-1.4669685876981933,-0.3385266968033111,0.3586943296259286,0.0834112236289746,0.3155550190741765,-0.48577057407413904,-1.343237118238152,-0.7602425339844503,0.22052764832332794,0.1972459291964255,-0.2189873391179532,-0.8854428939492],[-0.017854627659331955,0.2692286119337336,-0.13550131872698856,0.20162028815560398,0.011716701471448078,-0.6607312873235157,-0.9988429940686778,-0.1049169271031172,0.5356475232869413,0.6393068596816609,-0.0480986659064646,-0.3162291199563575,-0.47328152692067726,0.2926136230305353,0.0052168711007190005,-0.049070447114563154],[-0.3582402628980643,-0.3149788708812399,0.01889940545741292,-0.302745226861828,0.12040988993722566,0.3756745165221885,0.5248581545642896,-0.2533721069022726,0.39248617090342214,0.20257640403892135,-0.2549609278102928,1.193974281264284,-0.4054943554893428,1.834693233309222,-0.345804472438392,-0.13384167625219895],[-0.06412866585254309,0.5962856734143009,0.5950236528541524,0.5715250623793593,0.4374636709111981,0.08903224218078609,-0.5190944518820854,-1.3792660054529515,-0.3971122056706598,0.26702342450017374,-0.13889198858776902,-1.0075851447790634,0.19054074867304496,0.9603960238304762,-0.7334801564274569,0.7371659242278209],[-0.2365618732752272,-0.09187203003486169,-0.34649166163825096,-0.3696894611264913,-1.3182281635154813,0.354822158095315,0.4616724371522517,2.180279368214664,-0.5333659462141619,0.23787160993988776,0.161038038728819,1.5490793539290986,-0.7962746812011938,-0.7000315666185359,0.04266234818466941,0.945961354819168]]; const b1=[-0.4159624349396469,0.35720474865523816,-0.3497451627416639,-0.5587626930988107,-0.16999074613916426,-0.9018163610033882]; const W2=[[-0.24717444365275795,-0.6253555555444671,0.7669218444440877,0.09151807071575895,-0.7436974753397122,0.03002092545984246],[-0.4835063823094262,0.25613342141826223,0.31675879951015806,0.24080493334299535,-0.230519728645252,0.19049206010710382],[0.9992111963057185,1.5867108521189133,1.0695723975395437,1.0745194939614675,-0.13219695081647648,-0.06077621628249741],[-0.5278518977949788,-1.14561327679089,0.051522173796148374,-0.4578746623302947,-0.8515833773717328,-1.4819596052430004],[0.8542445761861002,1.0135459443709818,-0.13009923931811113,1.0638761701905013,0.7800672458524412,1.0277839226382233]]; const b2=[-0.32870364956958226,0.8573349050175252,1.1442895646319613,0.2710338472644303,-0.6785959850562718];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.747836683462295,-0.5637815034593319,-0.40864170174569503,0.9218363990107273,-0.1795201501945532,-1.0821883499823657,-0.3323062731782245,-0.04118839979575792,-1.212745893828082,0.12259145795503679,-1.1009753954880583,0.3259616096894062,-0.40251174050855737,1.0556291370023438,0.9419027347480022,0.015133296517442614],[-0.3244260645640529,-0.1471704817667983,-0.29521792699120636,-0.7826870363326406,-0.35007198599923484,-0.40006146327026715,-0.1559479677979388,0.2685121335290615,-0.08369420439251152,-0.5165730631553878,-0.1636546408710738,0.017630804723476362,-0.34748767408772274,0.2816351690956419,-1.406052692872349,0.40204566971871497],[0.5209702030814058,-0.8101488054517342,0.855378899972858,0.4752368443553379,-0.4415826078564449,-0.4771407974856853,0.24032286766908323,0.9979768698796265,-0.580405146987925,0.04823562483467518,0.5170378197351924,-1.3941675180787225,-0.07001707772926904,0.6499674638190442,-1.1164380268538534,0.04847426001830815],[1.163032854967295,0.3446827118366481,0.08582791962500533,-0.7526633343659861,-0.7745281931682519,0.5898001619606166,-0.36048476685495745,0.1116468197586282,-0.34035247671094915,-0.9024771661609314,-0.42743441218947187,-0.20650885799750085,0.2969306445789377,0.2276022094136813,0.15684415470937502,0.5213995613761965],[0.6929706269320305,-0.24808670136932584,-0.24033435356042845,-0.1220960353826673,-0.6688302829341057,-0.5562800412900629,-1.0766408655702435,-1.2951024999499103,-0.5293738447967495,0.3066048323282205,-0.4374538268819715,0.03431943659326017,0.2354190105461891,-0.18050403511207064,-0.6931494902227084,-0.2729757062825463],[0.5961680757644874,0.7194799500118952,0.8865194860949374,-0.62438958298494,0.8243088006957375,0.4736580061819217,0.33943357436978483,-0.6324054021084304,-0.0696539435927161,-0.7944047855985639,-0.7397074797070537,-0.39740929163281147,1.4893638945376664,1.2472931304572297,0.09310790427495258,-0.6428085168779324]]; const b1=[-0.25045426341799554,0.3134952948921463,-0.06553826023453824,-0.16472963192530993,0.1260861383219798,0.4082660255258494]; const W2=[[0.1132657078659206,-1.1787722930495577,0.3056453415552057,0.3088343296052534,-0.45635640417618806,-0.7787121072773115],[0.8680147323639783,0.5825821348290945,-0.7624728136847246,0.9559728133256027,-0.5565488128173594,0.27118328707849443],[-0.22058902830319563,0.4505496675019756,-0.4762430258605518,-0.3748942283795913,-0.5078216068251596,0.40716972356225994],[1.327862619165429,0.5566936691859075,0.16018287321522764,-0.7439835808876659,-0.14719260248107643,-0.2774847075898761],[0.3035191018077542,-0.7547074167573183,0.3898999667344425,-0.5572460300847623,0.5028434979028724,-0.3077606932336385]]; const b2=[0.29407020638380565,0.572108122290313,-1.00700919580818,0.1834060954241765,0.38768773123065325];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}