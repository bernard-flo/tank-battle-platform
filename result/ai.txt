function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.8716790331726643,-0.6122520909138842,0.6963146390662303,-0.6540169894691158,-0.15007405030135798,-0.4602796645764232,0.2077782331806686,-0.10457071292980284,-0.4814708499388616,0.1435456305499223,-1.1797701579552857,1.1333016854222442,0.09938653048012888,0.7758368802832734,-0.24362729682915485,0.333473682866216],[-0.49039684605650286,-0.6578591725644063,-0.7230352706856719,0.2326647291534168,0.3420672080463071,-0.447417564358249,-0.44831270756768693,-0.34102711661395074,0.40988844800288227,-0.18385458093307214,-0.6174989445300003,-0.5647814492423212,-0.6348314732410415,1.269984586595581,-0.82423430550407,-1.2957426075375031],[0.11914463455375458,-0.7861045873954324,0.23890034794723303,-0.8861000046639627,0.2004151286231954,0.5317691218940441,0.14495071271932305,0.15786545759193074,-0.45608160623538285,-0.1322939491828138,0.5496812934740438,0.14134995914804724,0.3125983872915574,0.30659244881614583,-0.014785975451670895,0.18562512965315234],[-0.07790110715952803,-0.6017380707711195,-0.35708618183783375,-0.14831131500340416,-1.6899886700249296,0.08551975091270085,-1.2285491894879084,0.5459567380235194,-0.6875858275424649,-0.9974434213027197,-0.1587939120559337,0.8329797798651297,-0.45390029351531547,-0.2283307075694084,-1.06776443805424,0.7966230746430403],[0.28246414047858354,-0.8681098406568918,-1.4997317196343223,0.14350505270589464,-0.5888680418444732,0.2590934048355713,-0.37501598847735035,-0.9639330449925998,-0.5541525167531689,-0.19572289960486178,-0.19489786869737769,-0.124599609445549,-0.1315664915106046,-0.3349546479933153,1.1210614448845941,0.23161787343755524],[0.6098828884246651,1.2650917906397137,-0.9138890519572442,-0.23425098303487776,0.8617199520111245,1.6854110335969394,0.014096601483497798,0.15101285068333703,-0.7701440645769161,0.8771958838829544,-0.47986407092036254,1.3086212191197055,0.4551980021502229,0.27771281555761756,0.7429229320166418,-2.183578768323739]]; const b1=[-0.11856488783830078,0.16566007296168855,-0.3855443029673437,-0.7935089531933294,0.34706534697215496,0.12443836129245128]; const W2=[[0.6881398960470061,-0.36781394982018456,-0.40247589933964617,0.04419263295803979,-0.7643915470152525,0.6453020172665341],[-0.8316377232269471,-0.5029096821102242,-0.3528163434286261,1.093206894227311,-0.3619178268653661,0.3160284874776259],[-0.3371789531362836,-0.12517022859340474,0.31025889639564064,-0.16569530247822453,-0.9885410188810082,-0.13690781888748021],[0.49210061066896865,0.11741246227315467,-0.04519978652397137,-0.11618167580612035,-0.6272748725420433,0.5779759753562228],[-0.0033123685265005337,-0.005888254424959549,0.18633957476403784,-0.32171961018119843,0.18796154904372708,-0.24739756528634874]]; const b2=[0.521479501119118,-0.026781045656463352,-0.39828641027289174,-0.3884955350990271,0.4177500592390332];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.8716790331726643,-0.6122520909138842,0.6963146390662303,-0.6540169894691158,-0.15007405030135798,-0.4602796645764232,0.2077782331806686,-0.10457071292980284,-0.4814708499388616,0.1435456305499223,-1.1797701579552857,1.1333016854222442,0.09938653048012888,0.7758368802832734,-0.24362729682915485,0.333473682866216],[-0.49039684605650286,-0.6578591725644063,-0.7230352706856719,0.2326647291534168,0.3420672080463071,-0.447417564358249,-0.44831270756768693,-0.34102711661395074,0.40988844800288227,-0.18385458093307214,-0.6174989445300003,-0.5647814492423212,-0.6348314732410415,1.269984586595581,-0.82423430550407,-1.2957426075375031],[0.11914463455375458,-0.7861045873954324,0.23890034794723303,-0.8861000046639627,0.2004151286231954,0.5317691218940441,0.14495071271932305,0.15786545759193074,-0.45608160623538285,-0.1322939491828138,0.5496812934740438,0.14134995914804724,0.3125983872915574,0.30659244881614583,-0.014785975451670895,0.18562512965315234],[-0.07790110715952803,-0.6017380707711195,-0.35708618183783375,-0.14831131500340416,-1.6899886700249296,0.08551975091270085,-1.2285491894879084,0.5459567380235194,-0.6875858275424649,-0.9974434213027197,-0.1587939120559337,0.8329797798651297,-0.45390029351531547,-0.2283307075694084,-1.06776443805424,0.7966230746430403],[0.28246414047858354,-0.8681098406568918,-1.4997317196343223,0.14350505270589464,-0.5888680418444732,0.2590934048355713,-0.37501598847735035,-0.9639330449925998,-0.5541525167531689,-0.19572289960486178,-0.19489786869737769,-0.124599609445549,-0.1315664915106046,-0.3349546479933153,1.1210614448845941,0.23161787343755524],[0.6098828884246651,1.2650917906397137,-0.9138890519572442,-0.23425098303487776,0.8617199520111245,1.6854110335969394,0.014096601483497798,0.15101285068333703,-0.7701440645769161,0.8771958838829544,-0.47986407092036254,1.3086212191197055,0.4551980021502229,0.27771281555761756,0.7429229320166418,-2.183578768323739]]; const b1=[-0.11856488783830078,0.16566007296168855,-0.3855443029673437,-0.7935089531933294,0.34706534697215496,0.12443836129245128]; const W2=[[0.6881398960470061,-0.36781394982018456,-0.40247589933964617,0.04419263295803979,-0.7643915470152525,0.6453020172665341],[-0.8316377232269471,-0.5029096821102242,-0.3528163434286261,1.093206894227311,-0.3619178268653661,0.3160284874776259],[-0.3371789531362836,-0.12517022859340474,0.31025889639564064,-0.16569530247822453,-0.9885410188810082,-0.13690781888748021],[0.49210061066896865,0.11741246227315467,-0.04519978652397137,-0.11618167580612035,-0.6272748725420433,0.5779759753562228],[-0.0033123685265005337,-0.005888254424959549,0.18633957476403784,-0.32171961018119843,0.18796154904372708,-0.24739756528634874]]; const b2=[0.521479501119118,-0.026781045656463352,-0.39828641027289174,-0.3884955350990271,0.4177500592390332];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.1844895987420098,-0.947402477855014,1.046357148161527,0.7213215289024825,-0.4456053438455445,0.22892166221691698,-0.3814308282222433,0.2628254431948541,0.7383041428293433,0.3050678584722707,-0.6391722786880156,0.4553287818086425,-1.1563029705242702,-0.3538680928866193,0.47170974268184984,-0.5681913710118336],[-0.5981165593281803,-1.0543740289256782,-0.977129032002001,0.3006236899336067,0.29839810276301615,-0.8153818950666267,0.15199488688272314,0.8126673176482991,1.249903853266168,0.471167506641549,0.6698330680129708,0.049281409599700655,-0.0951963593925634,0.9027843577562121,0.37279947169498945,0.5278710466634849],[-0.34306508234308686,-0.21139565658543696,-0.33362648072456924,0.5669821568529807,-0.6206611556332126,-1.62462494999681,0.31119852072477727,0.09172124713377261,0.23063448236181155,-1.0587498233698547,-0.6083483225176919,0.8044053867196824,-1.0739942104333597,-0.2693695346794965,-0.8588087979065507,-0.25371187158507624],[-0.6279702794888867,0.560694364374792,0.6357128134860311,-0.17921112279703394,-0.6783095402985804,0.6377382511467535,1.216854995430895,0.39571794937244187,1.0205193355624322,1.3241594115052084,0.032803015956361106,-0.41417875428952244,0.1907631415185439,0.31216441909052056,0.7362848042932578,-0.6091929001426639],[-1.6498006665180676,0.19637529204899057,-0.533076220936288,0.3205807037601155,-0.7122627480593219,-0.44238629149618713,-0.290877844465675,0.32451558189300456,0.2646601608831536,-0.1727486150463264,0.08089882710430246,-0.4477153980980503,-0.6267847137492822,0.3495897812258246,-0.09653662809475078,-0.016535418542233983],[-1.0947649656957275,-0.5946431516812006,-0.3653260931706266,-0.43384299641422935,-0.36402712616915944,0.4893882930664183,-0.11484911004950907,0.45756212918133476,0.09914721619816991,0.48172638935203926,-0.3922689963172971,-0.5439421874576407,-0.37782808557490155,0.3322785120434328,-0.520628008623077,0.40329781399358505]]; const b1=[-0.008996168940348645,0.352571884850602,1.7033800980522014,0.2507974088535355,0.36913733151506883,0.10855189335451837]; const W2=[[-0.7868642670700473,0.5179366555983562,1.3102257393252508,0.034347078069257006,-0.5813543670839301,-0.3083380255163833],[0.5590615157702908,0.7638251975000605,0.8006592518967668,0.557340857809278,-0.8195690987334223,-0.8758299285862007],[0.6197887951896307,0.21410121567884394,-0.3264407073608695,0.6119093274508325,-1.5753362361227772,0.7107154309016122],[-0.25478254178674453,0.16756019672166322,0.20368669451846647,0.8101214190128387,0.42906812499932306,0.6036278692387088],[0.9269046076284236,-0.21789146759704023,-0.6573288248852449,0.025017951172799174,-0.8669794132356469,-0.5020800553659532]]; const b2=[-0.8423892963712558,-0.23595723757336592,-0.5450453568392652,-0.6953376733841339,-0.09646931840447945];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.1844895987420098,-0.947402477855014,1.046357148161527,0.7213215289024825,-0.4456053438455445,0.22892166221691698,-0.3814308282222433,0.2628254431948541,0.7383041428293433,0.3050678584722707,-0.6391722786880156,0.4553287818086425,-1.1563029705242702,-0.3538680928866193,0.47170974268184984,-0.5681913710118336],[-0.5981165593281803,-1.0543740289256782,-0.977129032002001,0.3006236899336067,0.29839810276301615,-0.8153818950666267,0.15199488688272314,0.8126673176482991,1.249903853266168,0.471167506641549,0.6698330680129708,0.049281409599700655,-0.0951963593925634,0.9027843577562121,0.37279947169498945,0.5278710466634849],[-0.34306508234308686,-0.21139565658543696,-0.33362648072456924,0.5669821568529807,-0.6206611556332126,-1.62462494999681,0.31119852072477727,0.09172124713377261,0.23063448236181155,-1.0587498233698547,-0.6083483225176919,0.8044053867196824,-1.0739942104333597,-0.2693695346794965,-0.8588087979065507,-0.25371187158507624],[-0.6279702794888867,0.560694364374792,0.6357128134860311,-0.17921112279703394,-0.6783095402985804,0.6377382511467535,1.216854995430895,0.39571794937244187,1.0205193355624322,1.3241594115052084,0.032803015956361106,-0.41417875428952244,0.1907631415185439,0.31216441909052056,0.7362848042932578,-0.6091929001426639],[-1.6498006665180676,0.19637529204899057,-0.533076220936288,0.3205807037601155,-0.7122627480593219,-0.44238629149618713,-0.290877844465675,0.32451558189300456,0.2646601608831536,-0.1727486150463264,0.08089882710430246,-0.4477153980980503,-0.6267847137492822,0.3495897812258246,-0.09653662809475078,-0.016535418542233983],[-1.0947649656957275,-0.5946431516812006,-0.3653260931706266,-0.43384299641422935,-0.36402712616915944,0.4893882930664183,-0.11484911004950907,0.45756212918133476,0.09914721619816991,0.48172638935203926,-0.3922689963172971,-0.5439421874576407,-0.37782808557490155,0.3322785120434328,-0.520628008623077,0.40329781399358505]]; const b1=[-0.008996168940348645,0.352571884850602,1.7033800980522014,0.2507974088535355,0.36913733151506883,0.10855189335451837]; const W2=[[-0.7868642670700473,0.5179366555983562,1.3102257393252508,0.034347078069257006,-0.5813543670839301,-0.3083380255163833],[0.5590615157702908,0.7638251975000605,0.8006592518967668,0.557340857809278,-0.8195690987334223,-0.8758299285862007],[0.6197887951896307,0.21410121567884394,-0.3264407073608695,0.6119093274508325,-1.5753362361227772,0.7107154309016122],[-0.25478254178674453,0.16756019672166322,0.20368669451846647,0.8101214190128387,0.42906812499932306,0.6036278692387088],[0.9269046076284236,-0.21789146759704023,-0.6573288248852449,0.025017951172799174,-0.8669794132356469,-0.5020800553659532]]; const b2=[-0.8423892963712558,-0.23595723757336592,-0.5450453568392652,-0.6953376733841339,-0.09646931840447945];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.8716790331726643,-0.6122520909138842,0.6963146390662303,-0.6540169894691158,-0.15007405030135798,-0.4602796645764232,0.2077782331806686,-0.10457071292980284,-0.4814708499388616,0.1435456305499223,-1.1797701579552857,1.1333016854222442,0.09938653048012888,0.7758368802832734,-0.24362729682915485,0.333473682866216],[-0.49039684605650286,-0.6578591725644063,-0.7230352706856719,0.2326647291534168,0.3420672080463071,-0.447417564358249,-0.44831270756768693,-0.34102711661395074,0.40988844800288227,-0.18385458093307214,-0.6174989445300003,-0.5647814492423212,-0.6348314732410415,1.269984586595581,-0.82423430550407,-1.2957426075375031],[0.11914463455375458,-0.7861045873954324,0.23890034794723303,-0.8861000046639627,0.2004151286231954,0.5317691218940441,0.14495071271932305,0.15786545759193074,-0.45608160623538285,-0.1322939491828138,0.5496812934740438,0.14134995914804724,0.3125983872915574,0.30659244881614583,-0.014785975451670895,0.18562512965315234],[-0.07790110715952803,-0.6017380707711195,-0.35708618183783375,-0.14831131500340416,-1.6899886700249296,0.08551975091270085,-1.2285491894879084,0.5459567380235194,-0.6875858275424649,-0.9974434213027197,-0.1587939120559337,0.8329797798651297,-0.45390029351531547,-0.2283307075694084,-1.06776443805424,0.7966230746430403],[0.28246414047858354,-0.8681098406568918,-1.4997317196343223,0.14350505270589464,-0.5888680418444732,0.2590934048355713,-0.37501598847735035,-0.9639330449925998,-0.5541525167531689,-0.19572289960486178,-0.19489786869737769,-0.124599609445549,-0.1315664915106046,-0.3349546479933153,1.1210614448845941,0.23161787343755524],[0.6098828884246651,1.2650917906397137,-0.9138890519572442,-0.23425098303487776,0.8617199520111245,1.6854110335969394,0.014096601483497798,0.15101285068333703,-0.7701440645769161,0.8771958838829544,-0.47986407092036254,1.3086212191197055,0.4551980021502229,0.27771281555761756,0.7429229320166418,-2.183578768323739]]; const b1=[-0.11856488783830078,0.16566007296168855,-0.3855443029673437,-0.7935089531933294,0.34706534697215496,0.12443836129245128]; const W2=[[0.6881398960470061,-0.36781394982018456,-0.40247589933964617,0.04419263295803979,-0.7643915470152525,0.6453020172665341],[-0.8316377232269471,-0.5029096821102242,-0.3528163434286261,1.093206894227311,-0.3619178268653661,0.3160284874776259],[-0.3371789531362836,-0.12517022859340474,0.31025889639564064,-0.16569530247822453,-0.9885410188810082,-0.13690781888748021],[0.49210061066896865,0.11741246227315467,-0.04519978652397137,-0.11618167580612035,-0.6272748725420433,0.5779759753562228],[-0.0033123685265005337,-0.005888254424959549,0.18633957476403784,-0.32171961018119843,0.18796154904372708,-0.24739756528634874]]; const b2=[0.521479501119118,-0.026781045656463352,-0.39828641027289174,-0.3884955350990271,0.4177500592390332];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.8716790331726643,-0.6122520909138842,0.6963146390662303,-0.6540169894691158,-0.15007405030135798,-0.4602796645764232,0.2077782331806686,-0.10457071292980284,-0.4814708499388616,0.1435456305499223,-1.1797701579552857,1.1333016854222442,0.09938653048012888,0.7758368802832734,-0.24362729682915485,0.333473682866216],[-0.49039684605650286,-0.6578591725644063,-0.7230352706856719,0.2326647291534168,0.3420672080463071,-0.447417564358249,-0.44831270756768693,-0.34102711661395074,0.40988844800288227,-0.18385458093307214,-0.6174989445300003,-0.5647814492423212,-0.6348314732410415,1.269984586595581,-0.82423430550407,-1.2957426075375031],[0.11914463455375458,-0.7861045873954324,0.23890034794723303,-0.8861000046639627,0.2004151286231954,0.5317691218940441,0.14495071271932305,0.15786545759193074,-0.45608160623538285,-0.1322939491828138,0.5496812934740438,0.14134995914804724,0.3125983872915574,0.30659244881614583,-0.014785975451670895,0.18562512965315234],[-0.07790110715952803,-0.6017380707711195,-0.35708618183783375,-0.14831131500340416,-1.6899886700249296,0.08551975091270085,-1.2285491894879084,0.5459567380235194,-0.6875858275424649,-0.9974434213027197,-0.1587939120559337,0.8329797798651297,-0.45390029351531547,-0.2283307075694084,-1.06776443805424,0.7966230746430403],[0.28246414047858354,-0.8681098406568918,-1.4997317196343223,0.14350505270589464,-0.5888680418444732,0.2590934048355713,-0.37501598847735035,-0.9639330449925998,-0.5541525167531689,-0.19572289960486178,-0.19489786869737769,-0.124599609445549,-0.1315664915106046,-0.3349546479933153,1.1210614448845941,0.23161787343755524],[0.6098828884246651,1.2650917906397137,-0.9138890519572442,-0.23425098303487776,0.8617199520111245,1.6854110335969394,0.014096601483497798,0.15101285068333703,-0.7701440645769161,0.8771958838829544,-0.47986407092036254,1.3086212191197055,0.4551980021502229,0.27771281555761756,0.7429229320166418,-2.183578768323739]]; const b1=[-0.11856488783830078,0.16566007296168855,-0.3855443029673437,-0.7935089531933294,0.34706534697215496,0.12443836129245128]; const W2=[[0.6881398960470061,-0.36781394982018456,-0.40247589933964617,0.04419263295803979,-0.7643915470152525,0.6453020172665341],[-0.8316377232269471,-0.5029096821102242,-0.3528163434286261,1.093206894227311,-0.3619178268653661,0.3160284874776259],[-0.3371789531362836,-0.12517022859340474,0.31025889639564064,-0.16569530247822453,-0.9885410188810082,-0.13690781888748021],[0.49210061066896865,0.11741246227315467,-0.04519978652397137,-0.11618167580612035,-0.6272748725420433,0.5779759753562228],[-0.0033123685265005337,-0.005888254424959549,0.18633957476403784,-0.32171961018119843,0.18796154904372708,-0.24739756528634874]]; const b2=[0.521479501119118,-0.026781045656463352,-0.39828641027289174,-0.3884955350990271,0.4177500592390332];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}