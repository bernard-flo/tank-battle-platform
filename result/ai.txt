function name(){return 'Atlas';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.48554182171942645,0.050610729374494956,-0.10714317025916859,-0.33428563231169417,-0.4691230591644088,0.74139479246165,-0.27746926421867996,1.1500063779359884,0.5609986141663588,-0.6829127129435494,-0.23597770938181212,0.5766997694225877,0.6173771371950414,0.09353321316949426,0.5939868014993843,0.38944887880806933],[0.48893634999230434,0.250482455437803,0.15563642620705664,-0.13341974058886102,-1.1478692162660282,-0.539991674205935,0.9911234038259928,0.12754657433173672,0.38369762159878507,0.580497713657834,-1.1860842639866669,0.20481953460690386,0.17193293344942978,-0.5071914914725649,-0.611483855519023,-0.9567396396534984],[-0.6233431902107217,0.3127724368106966,-0.25212397844680956,0.20555419435023686,-0.08849109361910605,-1.09489152021151,-0.80326740009597,-0.2338749959029217,0.007678987897972639,0.4060283282191373,-0.6490288587626979,-0.1048603515402794,0.16709698402758066,-0.025532971753389727,-0.2614852457551117,-0.175344873475768],[0.2444715027450117,0.2780059627849534,0.12389355250615197,-0.059145101846982,0.36512472213721914,0.4238678593515799,-0.06551174466656423,0.15480852117048594,0.6908755998563954,0.30965652900712615,-0.600335725447116,0.9358648115438102,0.04564592721891368,1.1082866075319746,-0.06888104507156005,-0.46813797886531305],[-0.30217633515640147,0.18724844749189234,-0.006363364610217803,1.3138647456378019,0.3343263651048113,-1.0660589978386952,-0.3109763540894783,-0.20129436511938917,0.14794232319982403,0.9910702814967091,0.5880481205874568,0.08837500689078387,0.11508501751927944,0.5870367445313225,0.05035188997186535,-0.0984479974562909],[0.6478924430976887,-0.6493781107516469,0.1341158905790587,0.5535623342446152,-0.6340023174767078,0.472002133438871,0.5974415411120317,1.3683193610651283,0.34458761852073067,-0.5234690904078858,-0.4399217010663316,0.640724853109567,-0.6157928926910956,-1.003630461218409,-0.10519488162596524,0.6186382430394798]]; const b1=[0.11995409573215032,0.4995548785877713,0.17165008921135635,-0.08554619186793179,0.15312471745737077,0.17148053384005388]; const W2=[[-0.032791227168025135,0.37002531066737354,-0.010628052590614334,0.25676761558232297,-0.4272301722941151,-1.0043103774031867],[-0.4488355456689617,0.19366669582023074,0.43821345063328293,0.659579938191693,0.04314011754919182,0.6424365999973147],[0.5556128681116048,-0.015178503455043013,0.3584032284235996,0.72992740680759,-0.2334674947442701,-0.9603712727838054],[-0.29532608735032895,-1.6137969551763482,0.5934951944722047,-0.5344178977656515,-0.7857661555829869,-1.047608800814308],[0.8175157574420348,0.5038831379626777,0.2022453573379278,0.17748047661673227,1.4175819823760998,0.605792321134812]]; const b2=[-0.4237887578419403,0.42274253778189486,0.6673325869875721,-0.15547632142805168,-0.17452590940804993];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.40130820607531914,-1.3017906691894106,0.48486277767385827,0.1959846568734052,0.2394729633318964,-0.011738373150615995,-0.5275949755551118,0.044633175155167404,-0.6568116109223693,-0.2831430368569046,0.4085249947101551,0.6695418746519839,-1.4804483483223292,-0.008767953162965927,-1.0245510270455498,0.059593074218314],[-0.5550065578513022,-1.2040209516280072,-0.2811525240838257,-0.19299016157784532,0.6839382285648165,-0.15606483780119607,-0.3886332515876122,-0.695947476033392,1.1606438622855184,0.5062294333671069,0.4740908786208762,0.9401623532733973,0.7338282935475862,1.459180338252842,-0.2630828832696413,0.5159907195244983],[-0.1915902300193212,0.2373695403149401,0.20605037587015862,-0.7424665088297742,0.12972050490626846,-0.16125645703273023,-1.001252713500063,0.010405075833085475,0.2295846944756074,-0.3688233639068433,-0.34941058863002544,-0.289130957605585,-0.11419815165667836,-0.017213643162660275,-0.3660383265301299,0.030121808826984176],[-0.5352294437989312,1.094688386323945,0.24343300176578034,-0.5548525328878794,-0.7802009054809125,0.19484858257373744,0.24741617511719702,-0.039207811594058645,0.9133254453386683,1.061186993919961,-0.45310063739747236,-0.126593396053063,-0.18698281236517275,-0.08205965211472696,0.745885658905125,-0.06298175345706414],[-1.1008494365076114,0.7514696250734116,-0.36849454968541945,-0.6119631854725455,-0.35552231513888505,0.5830629812926729,-0.6568991292978335,0.3318663890707815,0.2502777159362479,-0.11002976103971149,-0.3967057855315105,0.40051914990363896,0.43872945958992593,-0.06988642979905586,-0.7246575483602024,0.75678401900201],[-0.8773933440107958,-1.2980753714196631,-0.06968072962930288,0.5118210870748928,-0.571676437893927,-0.16634685138291494,-0.2059529182638934,0.5396715164168238,0.17464890728322288,0.09226340669041835,-0.5890828539834485,-0.4080444244557775,-0.9129865354313236,0.11726567262169123,-0.4930991491086595,0.3383750775207977]]; const b1=[0.28388451801535663,-0.31553338495988015,0.054413308504589794,-0.1528572520938709,0.10419206228370953,-0.16268732601033098]; const W2=[[0.045928774589778606,-0.5888652143050045,-0.7327515657545364,-0.20254048476308478,0.0035894836978572486,0.8101245277815525],[0.3292970893311127,0.9360239585317823,0.38805930783632736,-0.13757303036480806,-0.07774922695954584,-0.4168845361238421],[0.4482261129042724,0.7241742196814986,-0.32866461700536326,0.6718561942426532,0.32860817037489554,0.5786117210936721],[0.4433598579672845,0.4596703003570253,-0.03515639772747994,0.5714290538862933,0.1379018804878745,-0.7300211158104442],[0.46442246524561803,0.05643469869228829,-0.1700582682365286,0.11494243660150909,-0.3828287342828389,-0.030808670406693522]]; const b2=[-0.026773830444546787,-0.12238655072180875,0.1094382103214779,0.23859761289372503,-0.1067320327788827];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.815980480735397,-0.16742363715812045,-0.6846144023305577,0.16231753229575124,0.12932085343692812,-0.02902429469910675,-0.5982734344229736,-0.16823690183212686,-1.0882800815151756,-0.1274529561489034,-1.3494966157357067,0.863017458143825,0.10732170979149536,1.4889424588013247,0.49006534753825004,-0.12537148384103286],[-0.6373329011851766,-0.24960077656690205,-0.06934725566617139,-0.1132456481717988,-1.0681511297717483,0.08687150016836663,-0.19446761097947823,0.7650496568729228,0.6094262653309269,0.08952706886552278,0.03644100672634725,0.17969648628138324,-1.4029809471155816,0.1065902129019562,-0.7079193162406223,-0.15308172307327844],[-0.013799873252506867,-0.7284089858317772,0.2545193039598203,0.24937737520007364,0.37842997540391704,0.5874072900701194,-0.05822185095809618,0.6048359896961503,-0.23347266272979056,1.0115352781126408,-0.44559023120038,-0.7309674528316691,-0.07318707404136923,0.03848201757290595,0.1233961527565759,-1.055741313663224],[0.7246315246745001,0.546542528437669,-0.29652697878732237,0.008635366097281882,-1.3441801786294143,0.014444292884837062,0.08237944373263552,0.39762609890881917,-0.3585205895573365,0.11534551171146223,0.32167264788343,0.011951652321170236,0.9454199046926339,0.05434237879726883,-0.2386082767511712,0.4567722231812779],[0.202915127459772,0.3491934490345133,-0.4045232855259602,0.5494355127750565,-0.5802792327496622,-0.9121675914186432,-0.36414576517927505,-0.8321743030786555,-0.5772537553658449,0.047451976140915626,-0.2814703268302539,-0.6040190281411159,-0.19961877781703988,0.4631475949150399,-0.724461699719295,-0.19101347776590996],[-0.2883602984914799,0.2347139139746282,-0.290904363932453,-0.058976025188083245,0.6343985864230893,0.649946593096663,-0.3453378893407833,0.22658451789590792,-0.8625503768592314,0.017592573368757053,-0.8860437941699524,-0.021374242501589175,0.9780269797889285,1.3623240104210579,0.3777292652544241,-0.8582519858452061]]; const b1=[-0.3504789705632941,-0.046422114761639544,-0.32118315568807987,0.7180560160549077,0.4506000394436901,0.04135321440643677]; const W2=[[0.4609546725625046,-0.9545376825474381,0.279633190805225,0.46222240775623835,-0.9138287142328483,-0.02404411369926554],[0.8358998861514697,-0.2212987756499376,-0.4116047758257214,0.47992792479984175,-0.6222384553370439,0.3675726502776937],[-0.478467914662084,0.27057057713187926,-0.5145419912198561,0.0576975580407757,-0.12784101392085195,0.31311561659159903],[0.22608816289926237,0.029342491891284093,0.16932842139407173,-1.208721207654627,-0.09329223624249947,-0.29283341199243895],[0.9311532936326002,-0.24896491174588856,0.39280325336568217,0.4593482044981082,0.6688775353903401,-0.21126954735571268]]; const b2=[0.7219881664073724,-0.517697549273139,-0.14979079305215784,-0.12658147128070465,-0.47551225423986787];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.815980480735397,-0.16742363715812045,-0.6846144023305577,0.16231753229575124,0.12932085343692812,-0.02902429469910675,-0.5982734344229736,-0.16823690183212686,-1.0882800815151756,-0.1274529561489034,-1.3494966157357067,0.863017458143825,0.10732170979149536,1.4889424588013247,0.49006534753825004,-0.12537148384103286],[-0.6373329011851766,-0.24960077656690205,-0.06934725566617139,-0.1132456481717988,-1.0681511297717483,0.08687150016836663,-0.19446761097947823,0.7650496568729228,0.6094262653309269,0.08952706886552278,0.03644100672634725,0.17969648628138324,-1.4029809471155816,0.1065902129019562,-0.7079193162406223,-0.15308172307327844],[-0.013799873252506867,-0.7284089858317772,0.2545193039598203,0.24937737520007364,0.37842997540391704,0.5874072900701194,-0.05822185095809618,0.6048359896961503,-0.23347266272979056,1.0115352781126408,-0.44559023120038,-0.7309674528316691,-0.07318707404136923,0.03848201757290595,0.1233961527565759,-1.055741313663224],[0.7246315246745001,0.546542528437669,-0.29652697878732237,0.008635366097281882,-1.3441801786294143,0.014444292884837062,0.08237944373263552,0.39762609890881917,-0.3585205895573365,0.11534551171146223,0.32167264788343,0.011951652321170236,0.9454199046926339,0.05434237879726883,-0.2386082767511712,0.4567722231812779],[0.202915127459772,0.3491934490345133,-0.4045232855259602,0.5494355127750565,-0.5802792327496622,-0.9121675914186432,-0.36414576517927505,-0.8321743030786555,-0.5772537553658449,0.047451976140915626,-0.2814703268302539,-0.6040190281411159,-0.19961877781703988,0.4631475949150399,-0.724461699719295,-0.19101347776590996],[-0.2883602984914799,0.2347139139746282,-0.290904363932453,-0.058976025188083245,0.6343985864230893,0.649946593096663,-0.3453378893407833,0.22658451789590792,-0.8625503768592314,0.017592573368757053,-0.8860437941699524,-0.021374242501589175,0.9780269797889285,1.3623240104210579,0.3777292652544241,-0.8582519858452061]]; const b1=[-0.3504789705632941,-0.046422114761639544,-0.32118315568807987,0.7180560160549077,0.4506000394436901,0.04135321440643677]; const W2=[[0.4609546725625046,-0.9545376825474381,0.279633190805225,0.46222240775623835,-0.9138287142328483,-0.02404411369926554],[0.8358998861514697,-0.2212987756499376,-0.4116047758257214,0.47992792479984175,-0.6222384553370439,0.3675726502776937],[-0.478467914662084,0.27057057713187926,-0.5145419912198561,0.0576975580407757,-0.12784101392085195,0.31311561659159903],[0.22608816289926237,0.029342491891284093,0.16932842139407173,-1.208721207654627,-0.09329223624249947,-0.29283341199243895],[0.9311532936326002,-0.24896491174588856,0.39280325336568217,0.4593482044981082,0.6688775353903401,-0.21126954735571268]]; const b2=[0.7219881664073724,-0.517697549273139,-0.14979079305215784,-0.12658147128070465,-0.47551225423986787];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.48554182171942645,0.050610729374494956,-0.10714317025916859,-0.33428563231169417,-0.4691230591644088,0.74139479246165,-0.27746926421867996,1.1500063779359884,0.5609986141663588,-0.6829127129435494,-0.23597770938181212,0.5766997694225877,0.6173771371950414,0.09353321316949426,0.5939868014993843,0.38944887880806933],[0.48893634999230434,0.250482455437803,0.15563642620705664,-0.13341974058886102,-1.1478692162660282,-0.539991674205935,0.9911234038259928,0.12754657433173672,0.38369762159878507,0.580497713657834,-1.1860842639866669,0.20481953460690386,0.17193293344942978,-0.5071914914725649,-0.611483855519023,-0.9567396396534984],[-0.6233431902107217,0.3127724368106966,-0.25212397844680956,0.20555419435023686,-0.08849109361910605,-1.09489152021151,-0.80326740009597,-0.2338749959029217,0.007678987897972639,0.4060283282191373,-0.6490288587626979,-0.1048603515402794,0.16709698402758066,-0.025532971753389727,-0.2614852457551117,-0.175344873475768],[0.2444715027450117,0.2780059627849534,0.12389355250615197,-0.059145101846982,0.36512472213721914,0.4238678593515799,-0.06551174466656423,0.15480852117048594,0.6908755998563954,0.30965652900712615,-0.600335725447116,0.9358648115438102,0.04564592721891368,1.1082866075319746,-0.06888104507156005,-0.46813797886531305],[-0.30217633515640147,0.18724844749189234,-0.006363364610217803,1.3138647456378019,0.3343263651048113,-1.0660589978386952,-0.3109763540894783,-0.20129436511938917,0.14794232319982403,0.9910702814967091,0.5880481205874568,0.08837500689078387,0.11508501751927944,0.5870367445313225,0.05035188997186535,-0.0984479974562909],[0.6478924430976887,-0.6493781107516469,0.1341158905790587,0.5535623342446152,-0.6340023174767078,0.472002133438871,0.5974415411120317,1.3683193610651283,0.34458761852073067,-0.5234690904078858,-0.4399217010663316,0.640724853109567,-0.6157928926910956,-1.003630461218409,-0.10519488162596524,0.6186382430394798]]; const b1=[0.11995409573215032,0.4995548785877713,0.17165008921135635,-0.08554619186793179,0.15312471745737077,0.17148053384005388]; const W2=[[-0.032791227168025135,0.37002531066737354,-0.010628052590614334,0.25676761558232297,-0.4272301722941151,-1.0043103774031867],[-0.4488355456689617,0.19366669582023074,0.43821345063328293,0.659579938191693,0.04314011754919182,0.6424365999973147],[0.5556128681116048,-0.015178503455043013,0.3584032284235996,0.72992740680759,-0.2334674947442701,-0.9603712727838054],[-0.29532608735032895,-1.6137969551763482,0.5934951944722047,-0.5344178977656515,-0.7857661555829869,-1.047608800814308],[0.8175157574420348,0.5038831379626777,0.2022453573379278,0.17748047661673227,1.4175819823760998,0.605792321134812]]; const b2=[-0.4237887578419403,0.42274253778189486,0.6673325869875721,-0.15547632142805168,-0.17452590940804993];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.815980480735397,-0.16742363715812045,-0.6846144023305577,0.16231753229575124,0.12932085343692812,-0.02902429469910675,-0.5982734344229736,-0.16823690183212686,-1.0882800815151756,-0.1274529561489034,-1.3494966157357067,0.863017458143825,0.10732170979149536,1.4889424588013247,0.49006534753825004,-0.12537148384103286],[-0.6373329011851766,-0.24960077656690205,-0.06934725566617139,-0.1132456481717988,-1.0681511297717483,0.08687150016836663,-0.19446761097947823,0.7650496568729228,0.6094262653309269,0.08952706886552278,0.03644100672634725,0.17969648628138324,-1.4029809471155816,0.1065902129019562,-0.7079193162406223,-0.15308172307327844],[-0.013799873252506867,-0.7284089858317772,0.2545193039598203,0.24937737520007364,0.37842997540391704,0.5874072900701194,-0.05822185095809618,0.6048359896961503,-0.23347266272979056,1.0115352781126408,-0.44559023120038,-0.7309674528316691,-0.07318707404136923,0.03848201757290595,0.1233961527565759,-1.055741313663224],[0.7246315246745001,0.546542528437669,-0.29652697878732237,0.008635366097281882,-1.3441801786294143,0.014444292884837062,0.08237944373263552,0.39762609890881917,-0.3585205895573365,0.11534551171146223,0.32167264788343,0.011951652321170236,0.9454199046926339,0.05434237879726883,-0.2386082767511712,0.4567722231812779],[0.202915127459772,0.3491934490345133,-0.4045232855259602,0.5494355127750565,-0.5802792327496622,-0.9121675914186432,-0.36414576517927505,-0.8321743030786555,-0.5772537553658449,0.047451976140915626,-0.2814703268302539,-0.6040190281411159,-0.19961877781703988,0.4631475949150399,-0.724461699719295,-0.19101347776590996],[-0.2883602984914799,0.2347139139746282,-0.290904363932453,-0.058976025188083245,0.6343985864230893,0.649946593096663,-0.3453378893407833,0.22658451789590792,-0.8625503768592314,0.017592573368757053,-0.8860437941699524,-0.021374242501589175,0.9780269797889285,1.3623240104210579,0.3777292652544241,-0.8582519858452061]]; const b1=[-0.3504789705632941,-0.046422114761639544,-0.32118315568807987,0.7180560160549077,0.4506000394436901,0.04135321440643677]; const W2=[[0.4609546725625046,-0.9545376825474381,0.279633190805225,0.46222240775623835,-0.9138287142328483,-0.02404411369926554],[0.8358998861514697,-0.2212987756499376,-0.4116047758257214,0.47992792479984175,-0.6222384553370439,0.3675726502776937],[-0.478467914662084,0.27057057713187926,-0.5145419912198561,0.0576975580407757,-0.12784101392085195,0.31311561659159903],[0.22608816289926237,0.029342491891284093,0.16932842139407173,-1.208721207654627,-0.09329223624249947,-0.29283341199243895],[0.9311532936326002,-0.24896491174588856,0.39280325336568217,0.4593482044981082,0.6688775353903401,-0.21126954735571268]]; const b2=[0.7219881664073724,-0.517697549273139,-0.14979079305215784,-0.12658147128070465,-0.47551225423986787];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}