// === Tank 1 ===
function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600; let nx=null,nd=1e9,ex=0,ey=0; for(const e of enemies){if(e.distance<nd){nd=e.distance;nx=e;} ex+=e.x; ey+=e.y;} const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.05*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=70; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0= tank.type===0?1:0, t1= tank.type===1?1:0, t2= tank.type===2?1:0;
  const inp=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.62,-0.41,0.17,0.25,-0.33,0.48,0.71,-0.66,0.58,0.36,-0.52,0.14,-0.19,0.42,-0.31,0.29],[-0.54,0.33,-0.49,-0.21,0.62,-0.37,-0.28,0.41,-0.73,0.27,0.58,-0.61,-0.34,-0.18,0.52,-0.47],[0.45,0.18,0.64,-0.42,0.35,0.22,0.83,0.57,-0.15,0.91,0.28,-0.23,-0.31,-0.77,-0.35,-0.17],[-0.21,-0.24,0.75,-0.89,0.41,0.35,0.22,0.18,-0.92,-0.11,-0.76,0.14,0.88,-0.26,-1.52,-0.94],[0.93,-1.72,-1.14,0.28,-0.74,-0.91,-0.92,-0.21,0.06,-0.11,-0.84,-0.52,-0.86,0.49,-0.91,0.17],[0.12,0.87,0.49,-0.27,0.79,-0.33,-0.39,-0.09,0.22,-0.41,-0.02,0.41,0.09,1.21,-0.92,-0.29]];
  const b1=[0.18,0.16,-0.33,-0.02,0.07,-1.61];
  const W2=[[0.31,-0.42,-0.58,0.34,-0.66,0.68],[-0.52,-0.63,0.94,0.22,-0.19,0.05],[-1.41,2.11,-0.17,-1.18,0.51,-0.49],[-0.01,0.61,0.87,0.92,-0.41,-1.21],[0.22,-0.49,0.52,-0.53,0.63,-0.41]]; const b2=[0.91,-1.28,-0.41,1.62,-0.89];
  const o=mlp(inp,W1,b1,W2,b2); let wEv=Math.max(0,o[0]),wAt=Math.max(0,o[1]),wOb=Math.max(0,o[2]),wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx=(nx?((nx.x-tank.x)/Math.max(1e-6,nd)):(ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x,nx.y-tank.y); const lead=Math.max(-14,Math.min(18,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+65))){ if(!tank.move(ang(mvAng-65))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

// === Tank 2 ===
function name(){return 'Bulwark';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600; let nx=null,nd=1e9,ex=0,ey=0; for(const e of enemies){if(e.distance<nd){nd=e.distance;nx=e;} ex+=e.x; ey+=e.y;} const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.06*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0= tank.type===0?1:0, t1= tank.type===1?1:0, t2= tank.type===2?1:0;
  const inp=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.32,-0.28,0.11,0.17,-0.21,0.36,0.44,-0.33,0.41,0.25,-0.44,0.11,-0.14,0.31,-0.27,0.22],[-0.41,0.27,-0.36,-0.17,0.51,-0.29,-0.22,0.29,-0.55,0.19,0.43,-0.48,-0.26,-0.14,0.37,-0.33],[0.31,0.12,0.48,-0.34,0.28,0.17,0.61,0.42,-0.12,0.68,0.21,-0.19,-0.24,-0.55,-0.28,-0.12],[-0.16,-0.19,0.57,-0.72,0.33,0.26,0.18,0.14,-0.71,-0.09,-0.57,0.11,0.63,-0.21,-1.11,-0.71],[0.71,-1.21,-0.82,0.22,-0.58,-0.71,-0.69,-0.16,0.05,-0.09,-0.62,-0.41,-0.63,0.36,-0.69,0.14],[0.09,0.63,0.36,-0.21,0.58,-0.26,-0.29,-0.07,0.18,-0.31,-0.02,0.31,0.07,0.86,-0.68,-0.22]];
  const b1=[0.12,0.11,-0.24,-0.01,0.05,-1.12];
  const W2=[[0.24,-0.31,-0.42,0.27,-0.49,0.49],[-0.39,-0.47,0.71,0.18,-0.14,0.04],[-1.02,1.56,-0.12,-0.93,0.39,-0.36],[-0.01,0.47,0.65,0.69,-0.31,-0.92],[0.17,-0.36,0.39,-0.39,0.48,-0.31]]; const b2=[0.71,-0.98,-0.31,1.21,-0.67];
  const o=mlp(inp,W1,b1,W2,b2); let wEv=Math.max(0,o[0]),wAt=Math.max(0,o[1]),wOb=Math.max(0,o[2]),wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx=(nx?((nx.x-tank.x)/Math.max(1e-6,nd)):(ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt*0.8 + obx*wOb + wx*wWall*1.2, mvy=evy*wEv + aty*wAt*0.8 + oby*wOb + wy*wWall*1.2; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x,nx.y-tank.y); const lead=Math.max(-10,Math.min(12,aimLead*0.7)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+55))){ if(!tank.move(ang(mvAng-55))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

// === Tank 3 ===
function name(){return 'Orion';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600; let nx=null,nd=1e9,ex=0,ey=0; for(const e of enemies){if(e.distance<nd){nd=e.distance;nx=e;} ex+=e.x; ey+=e.y;} const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.055*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=65; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0= tank.type===0?1:0, t1= tank.type===1?1:0, t2= tank.type===2?1:0;
  const inp=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.46,-0.34,0.14,0.22,-0.28,0.42,0.53,-0.44,0.49,0.29,-0.47,0.12,-0.16,0.36,-0.29,0.25],[-0.47,0.31,-0.41,-0.19,0.56,-0.33,-0.26,0.35,-0.63,0.22,0.49,-0.54,-0.29,-0.16,0.44,-0.39],[0.38,0.15,0.56,-0.38,0.31,0.19,0.72,0.49,-0.14,0.79,0.24,-0.21,-0.27,-0.64,-0.31,-0.14],[-0.18,-0.22,0.65,-0.81,0.37,0.29,0.2,0.16,-0.8,-0.1,-0.64,0.12,0.73,-0.24,-1.31,-0.82],[0.81,-1.46,-0.96,0.25,-0.66,-0.81,-0.8,-0.18,0.05,-0.1,-0.72,-0.47,-0.73,0.42,-0.8,0.15],[0.1,0.75,0.42,-0.24,0.69,-0.29,-0.34,-0.08,0.2,-0.36,-0.02,0.36,0.08,1.02,-0.8,-0.25]];
  const b1=[0.15,0.13,-0.28,-0.01,0.06,-1.33];
  const W2=[[0.28,-0.36,-0.5,0.29,-0.56,0.58],[-0.44,-0.54,0.81,0.2,-0.16,0.05],[-1.16,1.82,-0.14,-1.02,0.44,-0.41],[-0.01,0.53,0.75,0.79,-0.35,-1.03],[0.19,-0.42,0.46,-0.45,0.55,-0.36]]; const b2=[0.79,-1.1,-0.35,1.35,-0.73];
  const o=mlp(inp,W1,b1,W2,b2); let wEv=Math.max(0,o[0]),wAt=Math.max(0,o[1]),wOb=Math.max(0,o[2]),wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx=(nx?((nx.x-tank.x)/Math.max(1e-6,nd)):(ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x,nx.y-tank.y); const lead=Math.max(-12,Math.min(14,aimLead*0.9)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+60))){ if(!tank.move(ang(mvAng-60))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

// === Tank 4 ===
function name(){return 'Viper';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600; let nx=null,nd=1e9,ex=0,ey=0; for(const e of enemies){if(e.distance<nd){nd=e.distance;nx=e;} ex+=e.x; ey+=e.y;} const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.05*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=75; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0= tank.type===0?1:0, t1= tank.type===1?1:0, t2= tank.type===2?1:0;
  const inp=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.68,-0.37,0.19,0.27,-0.36,0.52,0.79,-0.7,0.61,0.39,-0.56,0.16,-0.21,0.44,-0.33,0.31],[-0.58,0.36,-0.53,-0.23,0.66,-0.41,-0.31,0.44,-0.77,0.29,0.62,-0.64,-0.36,-0.2,0.56,-0.5],[0.49,0.2,0.69,-0.45,0.38,0.24,0.88,0.61,-0.17,0.96,0.3,-0.25,-0.33,-0.81,-0.38,-0.19],[-0.23,-0.26,0.82,-0.93,0.44,0.33,0.24,0.2,-0.99,-0.12,-0.77,0.15,0.93,-0.29,-1.61,-0.96],[0.99,-1.84,-1.23,0.29,-0.79,-0.95,-0.98,-0.22,0.07,-0.12,-0.9,-0.58,-0.91,0.52,-0.95,0.18],[0.14,0.94,0.53,-0.3,0.85,-0.37,-0.44,-0.1,0.24,-0.47,-0.03,0.47,0.1,1.32,-0.99,-0.31]];
  const b1=[0.2,0.18,-0.38,-0.03,0.08,-1.85];
  const W2=[[0.34,-0.46,-0.63,0.37,-0.72,0.74],[-0.57,-0.68,1.02,0.24,-0.18,0.06],[-1.53,2.32,-0.19,-1.29,0.56,-0.53],[-0.01,0.68,1.01,1.05,-0.47,-1.38],[0.24,-0.52,0.56,-0.57,0.66,-0.44]]; const b2=[0.98,-1.41,-0.45,1.89,-1.02];
  const o=mlp(inp,W1,b1,W2,b2); let wEv=Math.max(0,o[0]),wAt=Math.max(0,o[1]),wOb=Math.max(0,o[2]),wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx=(nx?((nx.x-tank.x)/Math.max(1e-6,nd)):(ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x,nx.y-tank.y); const lead=Math.max(-16,Math.min(20,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

// === Tank 5 ===
function name(){return 'Aegis';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600; let nx=null,nd=1e9,ex=0,ey=0; for(const e of enemies){if(e.distance<nd){nd=e.distance;nx=e;} ex+=e.x; ey+=e.y;} const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.065*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=55; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0= tank.type===0?1:0, t1= tank.type===1?1:0, t2= tank.type===2?1:0;
  const inp=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.29,-0.24,0.1,0.15,-0.19,0.33,0.39,-0.3,0.36,0.22,-0.39,0.09,-0.12,0.28,-0.24,0.2],[-0.37,0.24,-0.32,-0.15,0.46,-0.27,-0.2,0.26,-0.49,0.17,0.39,-0.43,-0.24,-0.13,0.33,-0.29],[0.28,0.11,0.43,-0.31,0.26,0.16,0.54,0.38,-0.11,0.61,0.19,-0.17,-0.21,-0.49,-0.26,-0.11],[-0.14,-0.17,0.52,-0.66,0.3,0.24,0.16,0.13,-0.66,-0.08,-0.52,0.1,0.58,-0.19,-0.98,-0.63],[0.59,-0.98,-0.67,0.19,-0.52,-0.63,-0.61,-0.14,0.04,-0.07,-0.54,-0.36,-0.55,0.31,-0.59,0.12],[0.08,0.52,0.31,-0.18,0.49,-0.22,-0.25,-0.06,0.16,-0.26,-0.02,0.26,0.06,0.72,-0.59,-0.19]];
  const b1=[0.1,0.09,-0.2,-0.01,0.04,-0.98];
  const W2=[[0.2,-0.26,-0.36,0.22,-0.41,0.42],[-0.33,-0.4,0.6,0.16,-0.12,0.03],[-0.85,1.31,-0.1,-0.77,0.33,-0.29],[-0.01,0.39,0.54,0.57,-0.26,-0.76],[0.15,-0.31,0.33,-0.33,0.41,-0.29]]; const b2=[0.6,-0.82,-0.26,1.01,-0.56];
  const o=mlp(inp,W1,b1,W2,b2); let wEv=Math.max(0,o[0]),wAt=Math.max(0,o[1]),wOb=Math.max(0,o[2]),wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx=(nx?((nx.x-tank.x)/Math.max(1e-6,nd)):(ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt*0.8 + obx*wOb + wx*wWall*1.25, mvy=evy*wEv + aty*wAt*0.8 + oby*wOb + wy*wWall*1.25; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x,nx.y-tank.y); const lead=Math.max(-9,Math.min(11,aimLead*0.6)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+50))){ if(!tank.move(ang(mvAng-50))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

// === Tank 6 ===
function name(){return 'Nova';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600; let nx=null,nd=1e9,ex=0,ey=0; for(const e of enemies){if(e.distance<nd){nd=e.distance;nx=e;} ex+=e.x; ey+=e.y;} const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.055*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=65; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0= tank.type===0?1:0, t1= tank.type===1?1:0, t2= tank.type===2?1:0;
  const inp=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.5,-0.36,0.15,0.23,-0.3,0.44,0.57,-0.46,0.5,0.3,-0.49,0.12,-0.17,0.37,-0.3,0.25],[-0.49,0.32,-0.43,-0.19,0.57,-0.34,-0.27,0.35,-0.64,0.22,0.5,-0.55,-0.3,-0.17,0.45,-0.4],[0.39,0.15,0.58,-0.39,0.32,0.2,0.74,0.5,-0.15,0.81,0.24,-0.21,-0.28,-0.66,-0.31,-0.14],[-0.19,-0.22,0.67,-0.83,0.38,0.3,0.21,0.17,-0.82,-0.1,-0.65,0.12,0.75,-0.24,-1.34,-0.84],[0.83,-1.49,-0.98,0.25,-0.67,-0.83,-0.82,-0.18,0.05,-0.1,-0.74,-0.48,-0.74,0.43,-0.82,0.15],[0.1,0.77,0.43,-0.25,0.71,-0.3,-0.35,-0.08,0.2,-0.37,-0.02,0.37,0.08,1.05,-0.82,-0.26]];
  const b1=[0.16,0.14,-0.29,-0.01,0.06,-1.36];
  const W2=[[0.29,-0.37,-0.51,0.29,-0.57,0.59],[-0.45,-0.55,0.82,0.2,-0.16,0.05],[-1.18,1.85,-0.14,-1.04,0.45,-0.41],[-0.01,0.54,0.77,0.81,-0.35,-1.05],[0.2,-0.43,0.47,-0.46,0.56,-0.36]]; const b2=[0.81,-1.12,-0.36,1.38,-0.75];
  const o=mlp(inp,W1,b1,W2,b2); let wEv=Math.max(0,o[0]),wAt=Math.max(0,o[1]),wOb=Math.max(0,o[2]),wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx=(nx?((nx.x-tank.x)/Math.max(1e-6,nd)):(ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x,nx.y-tank.y); const lead=Math.max(-12,Math.min(14,aimLead*0.9)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+60))){ if(!tank.move(ang(mvAng-60))){ tank.move(Math.random()*360); }}}
}
