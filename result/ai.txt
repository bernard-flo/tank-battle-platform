function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.0727090321545965,0.3070050942551531,0.5263541108748558,0.16821931129258558,0.05377258034789131,0.19771419264292417,-0.07139663380368877,-0.4690011554397806,-1.5119899048356216,-0.08319905484200762,-0.25589982248862686,-0.2255523597676625,0.0574091502882868,0.726027280673091,0.3385880439180709,0.20252859649494753],[-0.738575729896889,-0.1758579809723897,-0.717666590262356,0.27182058205461834,-0.7426447426553093,-0.32379956757744843,-0.8725098574492791,0.14881501202784309,0.5741854421008807,-0.06911145569678684,0.3164129410603918,-0.04017605349326925,-1.523620580444999,0.3867490418571772,-0.5273762753641897,-0.7478783457925735],[0.5590265388190991,-0.03692072795364976,0.5363659844551993,-0.5447685340412234,-0.5771499564026448,-0.10554736172858648,-0.1966834283231023,1.156228464359163,-0.27769918364946616,-0.07014771408565718,0.5621919442868593,-0.4064725941072276,-0.6603368330033796,0.12780315644724255,-0.7933684494096289,0.1339317339863561],[-0.05994386196299151,-0.037296821347752744,0.17704374888204105,-0.8517119634079835,-1.3022788905035088,0.7153532380023022,-0.053562332577098,0.04791898843769091,-0.7974127586818661,-1.0362776947071528,-0.6174831466618373,0.7628057932766954,0.17834868544992377,0.24616582825930095,-0.5917751108052569,0.8548585283444425],[0.22031710677333693,-1.795918197816785,-0.9271898883303229,0.4315722113515741,-0.3667272588192612,-1.0485915582724248,-0.5269668237036074,-0.8277272579000561,0.10863808612809178,-0.17051594489022345,0.20744486750339805,-0.1841161461208754,0.10885289283053029,-0.12643614799255032,-0.3928887852547479,0.2037625194310641],[-0.11419840297073783,0.8793092935598452,0.6093833191510152,-0.8798026899155287,0.8813625635402045,0.07762739371109131,0.2802560677314353,-0.16044929857626913,0.1684751517061503,0.30433425938135494,-0.31967297241583487,0.13198286036234555,0.778410222101422,1.1439131108188814,0.29990638254117025,-0.28037715102296296]]; const b1=[0.5793579903625985,0.5857817017181637,-0.5689975310544323,0.25472868063014165,0.8569000134145434,-0.8892125589600934]; const W2=[[0.7057768055519706,-1.2853752233280007,-0.7250617681170762,0.831054595076985,-0.7579122183868255,-0.17507702057358562],[-0.35073506884113337,-0.22646641556414282,0.1841936118243863,0.6777123584198852,-0.09793453081931697,-0.24887973992627496],[-1.214682662150211,-0.0815526723454855,-0.3289690004072694,-0.4021722370220016,0.11978863360329003,-0.22113996966265517],[1.2392499212925652,0.6597427337588434,0.9024031423910824,-0.13204075033132773,-0.21709432410540758,-0.7739111027273194],[1.041229686295651,-0.5352744582893971,0.8060851969208371,-0.568396940247648,1.1709014761754304,-0.7756369940284282]]; const b2=[0.31582031660525683,-0.10639385182998432,-0.2211166534102506,0.24268659193661868,-0.374029188789918];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.2487286866852977,-0.15409925249628853,0.6085794781602085,0.34988268662943217,0.19608728434243264,0.17008118057314978,0.028596504117282977,-0.7222215305266692,0.3253924474151465,-1.0649849456765001,-0.3125099233600146,0.4071195530503725,-1.1965454738174026,0.1717872567607118,-0.7384875667595996,-0.38989831049190116],[-1.058422164501862,-0.3985185137280633,0.3263544334328241,-0.7780836265452613,0.5459925166446404,0.8650606845349971,-0.4589228556466718,0.3341412257235858,0.4693827412299023,0.4852007223326709,-0.3209425194921995,0.22986521354567077,0.26020886325611337,1.4054677909470024,0.22486939833113376,0.28607071055608535],[-0.13133788788332826,0.16276011337514357,0.35123975589307893,-0.20908472409762488,-0.2517313786663183,-0.8152132459146757,-0.22216306013168585,0.5145673811621682,0.12486956309363123,-0.39674934021467195,-0.8907185371844805,-0.6289284530088775,-1.532729997487174,0.5650211609944485,-0.5740006596388286,-0.18974393093920894],[-0.4690519755349001,0.26917093173056894,1.457662118436708,0.09925320427129473,-0.32485312933872,0.46241829607780893,-0.2396656489244572,0.9688104432239228,0.4841969458560179,1.2593850725424511,0.21812772982285064,0.22923840712167576,-0.022446236632610472,-0.6231547342575191,0.005241938635818323,-0.5136854187859891],[-1.2056541159004937,0.6769444019766427,-0.3510643733155945,0.6089720852779479,0.2017412720948622,-0.1694829945651969,-0.054947176693358406,0.2562117547250836,0.0694176493027242,-0.004214860187835789,-0.2604666815791551,0.8404986292813195,-0.5644592616794253,-0.8211697630731111,-0.1049136446091839,0.3593009029932799],[-0.3290942115178724,-0.4848579962877002,0.42801092825981163,0.2921865284898043,-0.8710140313242993,-0.05277280733829151,-0.3776600532031917,1.1225608751240812,0.2627082343915741,-0.06986876324823224,-0.5950284252462477,0.13769234633616376,-0.16408006504987735,-0.1051935377887061,0.1138199014893333,0.1966007583375869]]; const b1=[0.6088561347390323,0.342586360487217,0.36104480214310297,0.14581302318962758,-0.2469065470669469,0.5200320654031519]; const W2=[[-0.26913590774257046,-0.9976635309304611,-0.19488247913394474,-0.14626399425263614,0.18963310895719152,-0.6200384362458677],[0.9367381411924898,1.2794030363252855,0.9463866096879978,0.2517408248906371,-0.6711901761002124,0.07146589108530274],[-0.13464271130531233,1.13508550614269,0.1437664946750069,0.8808690641769734,0.3383482759277422,1.3545487484163805],[-0.06953843068124646,0.24250746371081855,-0.12514041172480297,1.144891779136382,0.14798034285790945,0.8377069882913853],[0.6635427691846164,0.47231845191728167,0.16729731404851803,-0.08906149308838036,-1.10937732106667,0.6616178058771367]]; const b2=[0.48720784255494126,0.6255969360202719,-0.3597004221321456,0.15262790637368434,0.18077450775215323];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1368121174435417,0.5912314636712672,-0.11589030243287213,-0.3154618923936538,-0.6527811904377145,-0.050419073110280904,0.2501707359034128,-0.12909739264034686,-0.19544625401667734,0.08312527548876995,0.06592028359298413,-0.36767345382571676,0.061279559585920004,-0.32838002184163795,0.9508568255580643,0.3699200812874749],[0.5488412924767714,-0.03754168969175603,0.2846818729261347,0.10219909428845739,-0.9289024087632584,-0.31013385764943835,-0.31290890733450477,-0.2527609935407662,-0.2800185725387527,0.5201684307549794,0.40406598323194814,0.1956492989372565,0.5329668368885998,0.24145006926704662,-0.8377145873568996,-1.3865255236993943],[-0.5181959023516591,0.5120633426271761,-0.6119534752894861,0.9173069314195605,0.2943320331058633,-1.3219742008975648,-0.7931465868651175,0.14848948515376476,0.15581499093571904,0.31053058347067747,0.4409443094858292,-0.17969688413886786,0.18093057575897578,-0.2126769217419465,-1.1401598358212195,-0.2254122851772012],[-0.2924007261885693,0.10180940072743516,-0.2839245752687067,1.16127212691586,-0.4715422002601981,0.37076543121970695,-0.3409195578467968,1.081599183469363,0.5844985348462061,-0.2229486626882503,-0.8799322324543991,0.9155016360284556,-0.4357124589142211,0.7483551269386968,-0.046546838889440154,0.9167515529309378],[-0.035745391399981896,0.3924575848828487,-0.8744888965173664,0.38547325500613056,0.5064614059539465,-0.4202436868481828,-0.15611955835382763,-0.560074512233568,0.6662154514829455,-0.03467104399061517,0.5902359280361079,-0.6447921553165998,-0.3950227153563044,0.27498464872895423,-0.1823866982047326,0.3333038907622759],[0.794659343049527,-0.7679551058370865,-0.4984018254028805,-0.9593095998664607,-0.3024119333022062,0.5444585773681776,1.4221759621708663,0.44638901785406593,0.13906219400243525,-0.569567925674876,0.4140070607514297,1.0093966624402204,-1.0414426471709897,-0.5219614781911078,0.22045471860471222,0.9853334048367853]]; const b1=[0.2746717132512684,-0.13479883663158987,0.28483260855872006,-0.38909947186673666,-0.47678168213563754,1.1255623317628973]; const W2=[[-0.9789382890862764,-0.014745470726369447,0.9785205471671161,0.20102094326699466,0.1045305111507156,-0.10310223556683978],[0.46450491276881206,0.2951115832892498,-0.380471433519157,0.13997702895332206,-0.15678171847793543,-0.09334907777251666],[1.0835830181263255,0.1255055681313489,0.9081965945032922,0.7673219691610924,0.1829225273022969,-0.6882538891740431],[-1.06558196657669,-0.9469693021100352,-0.10094158761264169,-0.7611014668495465,-0.7054351273290619,0.04942503704424667],[0.2905095912297981,0.05430297172448678,-0.42547252882304276,-0.11548480392831205,0.5410216304372075,-0.015690201256140457]]; const b2=[-0.7303670706639058,-0.8594359129137883,-0.23150151909625968,-0.02104041532883212,-0.28396212110810437];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.0727090321545965,0.3070050942551531,0.5263541108748558,0.16821931129258558,0.05377258034789131,0.19771419264292417,-0.07139663380368877,-0.4690011554397806,-1.5119899048356216,-0.08319905484200762,-0.25589982248862686,-0.2255523597676625,0.0574091502882868,0.726027280673091,0.3385880439180709,0.20252859649494753],[-0.738575729896889,-0.1758579809723897,-0.717666590262356,0.27182058205461834,-0.7426447426553093,-0.32379956757744843,-0.8725098574492791,0.14881501202784309,0.5741854421008807,-0.06911145569678684,0.3164129410603918,-0.04017605349326925,-1.523620580444999,0.3867490418571772,-0.5273762753641897,-0.7478783457925735],[0.5590265388190991,-0.03692072795364976,0.5363659844551993,-0.5447685340412234,-0.5771499564026448,-0.10554736172858648,-0.1966834283231023,1.156228464359163,-0.27769918364946616,-0.07014771408565718,0.5621919442868593,-0.4064725941072276,-0.6603368330033796,0.12780315644724255,-0.7933684494096289,0.1339317339863561],[-0.05994386196299151,-0.037296821347752744,0.17704374888204105,-0.8517119634079835,-1.3022788905035088,0.7153532380023022,-0.053562332577098,0.04791898843769091,-0.7974127586818661,-1.0362776947071528,-0.6174831466618373,0.7628057932766954,0.17834868544992377,0.24616582825930095,-0.5917751108052569,0.8548585283444425],[0.22031710677333693,-1.795918197816785,-0.9271898883303229,0.4315722113515741,-0.3667272588192612,-1.0485915582724248,-0.5269668237036074,-0.8277272579000561,0.10863808612809178,-0.17051594489022345,0.20744486750339805,-0.1841161461208754,0.10885289283053029,-0.12643614799255032,-0.3928887852547479,0.2037625194310641],[-0.11419840297073783,0.8793092935598452,0.6093833191510152,-0.8798026899155287,0.8813625635402045,0.07762739371109131,0.2802560677314353,-0.16044929857626913,0.1684751517061503,0.30433425938135494,-0.31967297241583487,0.13198286036234555,0.778410222101422,1.1439131108188814,0.29990638254117025,-0.28037715102296296]]; const b1=[0.5793579903625985,0.5857817017181637,-0.5689975310544323,0.25472868063014165,0.8569000134145434,-0.8892125589600934]; const W2=[[0.7057768055519706,-1.2853752233280007,-0.7250617681170762,0.831054595076985,-0.7579122183868255,-0.17507702057358562],[-0.35073506884113337,-0.22646641556414282,0.1841936118243863,0.6777123584198852,-0.09793453081931697,-0.24887973992627496],[-1.214682662150211,-0.0815526723454855,-0.3289690004072694,-0.4021722370220016,0.11978863360329003,-0.22113996966265517],[1.2392499212925652,0.6597427337588434,0.9024031423910824,-0.13204075033132773,-0.21709432410540758,-0.7739111027273194],[1.041229686295651,-0.5352744582893971,0.8060851969208371,-0.568396940247648,1.1709014761754304,-0.7756369940284282]]; const b2=[0.31582031660525683,-0.10639385182998432,-0.2211166534102506,0.24268659193661868,-0.374029188789918];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.0727090321545965,0.3070050942551531,0.5263541108748558,0.16821931129258558,0.05377258034789131,0.19771419264292417,-0.07139663380368877,-0.4690011554397806,-1.5119899048356216,-0.08319905484200762,-0.25589982248862686,-0.2255523597676625,0.0574091502882868,0.726027280673091,0.3385880439180709,0.20252859649494753],[-0.738575729896889,-0.1758579809723897,-0.717666590262356,0.27182058205461834,-0.7426447426553093,-0.32379956757744843,-0.8725098574492791,0.14881501202784309,0.5741854421008807,-0.06911145569678684,0.3164129410603918,-0.04017605349326925,-1.523620580444999,0.3867490418571772,-0.5273762753641897,-0.7478783457925735],[0.5590265388190991,-0.03692072795364976,0.5363659844551993,-0.5447685340412234,-0.5771499564026448,-0.10554736172858648,-0.1966834283231023,1.156228464359163,-0.27769918364946616,-0.07014771408565718,0.5621919442868593,-0.4064725941072276,-0.6603368330033796,0.12780315644724255,-0.7933684494096289,0.1339317339863561],[-0.05994386196299151,-0.037296821347752744,0.17704374888204105,-0.8517119634079835,-1.3022788905035088,0.7153532380023022,-0.053562332577098,0.04791898843769091,-0.7974127586818661,-1.0362776947071528,-0.6174831466618373,0.7628057932766954,0.17834868544992377,0.24616582825930095,-0.5917751108052569,0.8548585283444425],[0.22031710677333693,-1.795918197816785,-0.9271898883303229,0.4315722113515741,-0.3667272588192612,-1.0485915582724248,-0.5269668237036074,-0.8277272579000561,0.10863808612809178,-0.17051594489022345,0.20744486750339805,-0.1841161461208754,0.10885289283053029,-0.12643614799255032,-0.3928887852547479,0.2037625194310641],[-0.11419840297073783,0.8793092935598452,0.6093833191510152,-0.8798026899155287,0.8813625635402045,0.07762739371109131,0.2802560677314353,-0.16044929857626913,0.1684751517061503,0.30433425938135494,-0.31967297241583487,0.13198286036234555,0.778410222101422,1.1439131108188814,0.29990638254117025,-0.28037715102296296]]; const b1=[0.5793579903625985,0.5857817017181637,-0.5689975310544323,0.25472868063014165,0.8569000134145434,-0.8892125589600934]; const W2=[[0.7057768055519706,-1.2853752233280007,-0.7250617681170762,0.831054595076985,-0.7579122183868255,-0.17507702057358562],[-0.35073506884113337,-0.22646641556414282,0.1841936118243863,0.6777123584198852,-0.09793453081931697,-0.24887973992627496],[-1.214682662150211,-0.0815526723454855,-0.3289690004072694,-0.4021722370220016,0.11978863360329003,-0.22113996966265517],[1.2392499212925652,0.6597427337588434,0.9024031423910824,-0.13204075033132773,-0.21709432410540758,-0.7739111027273194],[1.041229686295651,-0.5352744582893971,0.8060851969208371,-0.568396940247648,1.1709014761754304,-0.7756369940284282]]; const b2=[0.31582031660525683,-0.10639385182998432,-0.2211166534102506,0.24268659193661868,-0.374029188789918];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.0727090321545965,0.3070050942551531,0.5263541108748558,0.16821931129258558,0.05377258034789131,0.19771419264292417,-0.07139663380368877,-0.4690011554397806,-1.5119899048356216,-0.08319905484200762,-0.25589982248862686,-0.2255523597676625,0.0574091502882868,0.726027280673091,0.3385880439180709,0.20252859649494753],[-0.738575729896889,-0.1758579809723897,-0.717666590262356,0.27182058205461834,-0.7426447426553093,-0.32379956757744843,-0.8725098574492791,0.14881501202784309,0.5741854421008807,-0.06911145569678684,0.3164129410603918,-0.04017605349326925,-1.523620580444999,0.3867490418571772,-0.5273762753641897,-0.7478783457925735],[0.5590265388190991,-0.03692072795364976,0.5363659844551993,-0.5447685340412234,-0.5771499564026448,-0.10554736172858648,-0.1966834283231023,1.156228464359163,-0.27769918364946616,-0.07014771408565718,0.5621919442868593,-0.4064725941072276,-0.6603368330033796,0.12780315644724255,-0.7933684494096289,0.1339317339863561],[-0.05994386196299151,-0.037296821347752744,0.17704374888204105,-0.8517119634079835,-1.3022788905035088,0.7153532380023022,-0.053562332577098,0.04791898843769091,-0.7974127586818661,-1.0362776947071528,-0.6174831466618373,0.7628057932766954,0.17834868544992377,0.24616582825930095,-0.5917751108052569,0.8548585283444425],[0.22031710677333693,-1.795918197816785,-0.9271898883303229,0.4315722113515741,-0.3667272588192612,-1.0485915582724248,-0.5269668237036074,-0.8277272579000561,0.10863808612809178,-0.17051594489022345,0.20744486750339805,-0.1841161461208754,0.10885289283053029,-0.12643614799255032,-0.3928887852547479,0.2037625194310641],[-0.11419840297073783,0.8793092935598452,0.6093833191510152,-0.8798026899155287,0.8813625635402045,0.07762739371109131,0.2802560677314353,-0.16044929857626913,0.1684751517061503,0.30433425938135494,-0.31967297241583487,0.13198286036234555,0.778410222101422,1.1439131108188814,0.29990638254117025,-0.28037715102296296]]; const b1=[0.5793579903625985,0.5857817017181637,-0.5689975310544323,0.25472868063014165,0.8569000134145434,-0.8892125589600934]; const W2=[[0.7057768055519706,-1.2853752233280007,-0.7250617681170762,0.831054595076985,-0.7579122183868255,-0.17507702057358562],[-0.35073506884113337,-0.22646641556414282,0.1841936118243863,0.6777123584198852,-0.09793453081931697,-0.24887973992627496],[-1.214682662150211,-0.0815526723454855,-0.3289690004072694,-0.4021722370220016,0.11978863360329003,-0.22113996966265517],[1.2392499212925652,0.6597427337588434,0.9024031423910824,-0.13204075033132773,-0.21709432410540758,-0.7739111027273194],[1.041229686295651,-0.5352744582893971,0.8060851969208371,-0.568396940247648,1.1709014761754304,-0.7756369940284282]]; const b2=[0.31582031660525683,-0.10639385182998432,-0.2211166534102506,0.24268659193661868,-0.374029188789918];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}