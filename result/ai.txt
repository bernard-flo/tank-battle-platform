function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2876607521092978,-0.8642137592853277,0.23254553700680874,-0.902326897086116,0.42361610643688485,-0.1743209736608825,1.2733288733475354,-0.9509312733388017,-0.7579706720630989,0.404108155239455,-0.9808324718406166,0.515950890427598,0.1103630922673822,0.10556463025772825,-0.11996937603377036,0.5856916389320254],[-0.6509819138373583,-0.34209602812743256,-0.4730180530638193,-0.6794925134703531,-0.3821891125438472,-0.3222444820220166,-0.29112534901350784,0.2248970821152783,-0.03357388988979332,0.20798033323050993,-0.4245417442736764,0.48812373878565574,-0.3219719897817139,0.4481434957189083,-0.9276704674724315,0.8591259163202933],[0.19263360376341712,-0.4727464218887443,1.572164345836549,-0.005739320244971757,-0.40397386323210666,0.3200345953079445,-0.33818071666409316,-0.13666331031789478,0.49362843340624984,0.7622773369192762,0.4307990393048192,-0.6959151736896718,0.6175233861386296,0.752815477194362,-0.37959912331467094,-0.661956379580682],[-0.024439295548532164,0.46384006372871533,0.09246166071538543,-0.8340396264337848,-0.7788760910824112,-0.2913649378479423,-0.044911152429888454,0.27065196285757376,-1.695058372425248,-1.155692625717594,-0.2652478887112221,0.20607332950138166,-0.21004117726823476,0.08398483067238947,0.3039846866297644,0.35171574142864237],[0.847414208633722,-0.0476281429730554,-0.2950382310303456,0.39801561365415417,0.8441126042420668,0.2315653792804928,-0.5021167863180804,-1.7625411861655562,-0.07061752877470291,0.5205488732886485,-0.3140578899350467,-1.1510338291293134,-0.9763018311467525,0.1906514320164586,0.10122573795774922,1.0723204924782634],[0.17291703833899497,0.38820553899254107,0.7748310410078267,0.5934775586680736,0.6942210217625924,1.5626389931704188,0.5884102625418983,0.0729594268320467,0.03606261839227064,0.21441801039287847,-0.5479225972007655,0.5936216049730362,1.2422460655474514,1.2514419169425761,0.7251163815797588,-1.54497670241814]]; const b1=[-0.4166152670035016,1.3804579694808459,-0.4580132187862405,-0.49001772683273936,0.11901877588664622,-0.35345102582226184]; const W2=[[1.4321180523821593,-1.2411978118381835,0.3594234759354051,0.19070577099544242,-1.478152344841793,0.16891261708627664],[0.7801680059472551,-0.2761632216939736,-0.6049308938678204,0.08231838519300387,-1.3145287135758519,0.30638284367867663],[-1.2039666117869101,0.23063283633593468,-0.6147349824119402,-0.580263046728664,-1.4440235935373356,0.3455376101343898],[1.3565550849740555,0.1365425919536409,-0.4170612562926919,-0.016792602562899557,-0.27606296502779815,0.04202357263358433],[0.7074406232828249,-1.2588148946247335,1.1823493009750383,-0.5264265048088527,0.7408693751600574,-0.09011862611275885]]; const b2=[0.35970352118492194,-0.4407236878650074,-0.11011611284602366,0.43803800302316387,0.4193940489148189];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.7451981394177672,0.009117379380208096,-0.06032243816956928,-0.3528511574781008,-0.9083528842944388,0.26470167801759104,0.450982760246607,0.3100401580091034,0.4459650720291144,-0.5658517429169629,0.47120820453248163,0.26919186936310047,-1.1286903440208365,0.36032196986355636,0.8707036436618851,-0.02968337934545251],[-0.3010252799931759,-0.5890906173319732,0.16100352271580848,0.689046740825813,0.06838476439893455,0.8721013481945417,0.7287024073262564,0.32066698802575,0.5456675770981619,0.0024632817916367955,-1.4499409968092134,-0.5578316203477586,0.24626048959256935,0.1579233982399281,-0.37327808086869424,-0.5650638353149902],[0.07981017562460038,0.5019335677713573,-1.2463498635474812,0.2256582950900132,-0.6399541960306792,-1.0643205904291089,-1.0939442331157143,0.6634122921843586,0.7627593987580253,-0.03308509203602872,-0.8251564297088305,-0.4062288800426414,-0.4166402001208031,0.5572206496153433,-0.5895395662657178,1.4149726781993783],[0.11732185792196989,0.1062529926736937,-0.599741109764058,0.6752535644562889,-0.5850943423460846,0.10306358810750685,-0.7017511709252544,-0.2356163830755751,0.5886957658751998,0.0020856335216178773,-0.2233021922757142,1.39819842797102,0.2019177189787673,0.7518774996431474,0.06340654155181838,-0.04148028018476059],[0.1335752439985654,-0.13948349923849654,-0.613400849312347,1.0648979253732742,0.3254869736051947,-0.6347481285387437,-0.1395501681118891,-0.2346177509020553,0.35368702431539417,-0.08097227875507615,0.9828497707336186,0.42161406125030343,-0.564188669106205,0.8282042005554222,0.10297893997594118,0.1494941964915167],[-0.43763672265053805,-0.008332234713691447,-0.018178206520439222,0.39576968066174734,-0.5634650921128788,-0.2842120284222534,-0.7527186075788326,1.162237850190081,-0.16697961077676318,0.01408242764437706,0.03781721081822466,-0.25028702987117685,-0.7433445995413426,-0.23346368998672684,0.48484454845284075,1.882477991757889]]; const b1=[-0.05791996204547971,0.4085441027067515,1.2701651937198213,-0.1878654383437478,-0.5794975967318335,-0.6763851114992558]; const W2=[[-0.17200103664554864,-0.3302750298302674,0.08294943918551867,0.22721762126033568,-0.33842340829232825,0.4035464879601677],[0.05698012176619224,-0.5513008358749589,1.0098369653847101,0.4720132603339666,-0.16301197447028803,0.13056431037175315],[0.5835832185038544,0.5281918269174776,1.4786046245833149,1.6797474358406475,-0.3348672129615332,-0.5100295745682281],[-1.3224190009063113,-0.07551508948166263,0.5789614624614516,-0.031082652094315724,0.6765168196359874,-0.1564358908034805],[-1.4865307188763033,-0.1179684909251138,-0.24152220660874893,1.0267379661320473,0.6456014769205434,0.6326528410211726]]; const b2=[0.35717428530402406,1.3645807497778129,0.025868867300038234,-0.38320055282272214,-0.4769932091371814];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.7451981394177672,0.009117379380208096,-0.06032243816956928,-0.3528511574781008,-0.9083528842944388,0.26470167801759104,0.450982760246607,0.3100401580091034,0.4459650720291144,-0.5658517429169629,0.47120820453248163,0.26919186936310047,-1.1286903440208365,0.36032196986355636,0.8707036436618851,-0.02968337934545251],[-0.3010252799931759,-0.5890906173319732,0.16100352271580848,0.689046740825813,0.06838476439893455,0.8721013481945417,0.7287024073262564,0.32066698802575,0.5456675770981619,0.0024632817916367955,-1.4499409968092134,-0.5578316203477586,0.24626048959256935,0.1579233982399281,-0.37327808086869424,-0.5650638353149902],[0.07981017562460038,0.5019335677713573,-1.2463498635474812,0.2256582950900132,-0.6399541960306792,-1.0643205904291089,-1.0939442331157143,0.6634122921843586,0.7627593987580253,-0.03308509203602872,-0.8251564297088305,-0.4062288800426414,-0.4166402001208031,0.5572206496153433,-0.5895395662657178,1.4149726781993783],[0.11732185792196989,0.1062529926736937,-0.599741109764058,0.6752535644562889,-0.5850943423460846,0.10306358810750685,-0.7017511709252544,-0.2356163830755751,0.5886957658751998,0.0020856335216178773,-0.2233021922757142,1.39819842797102,0.2019177189787673,0.7518774996431474,0.06340654155181838,-0.04148028018476059],[0.1335752439985654,-0.13948349923849654,-0.613400849312347,1.0648979253732742,0.3254869736051947,-0.6347481285387437,-0.1395501681118891,-0.2346177509020553,0.35368702431539417,-0.08097227875507615,0.9828497707336186,0.42161406125030343,-0.564188669106205,0.8282042005554222,0.10297893997594118,0.1494941964915167],[-0.43763672265053805,-0.008332234713691447,-0.018178206520439222,0.39576968066174734,-0.5634650921128788,-0.2842120284222534,-0.7527186075788326,1.162237850190081,-0.16697961077676318,0.01408242764437706,0.03781721081822466,-0.25028702987117685,-0.7433445995413426,-0.23346368998672684,0.48484454845284075,1.882477991757889]]; const b1=[-0.05791996204547971,0.4085441027067515,1.2701651937198213,-0.1878654383437478,-0.5794975967318335,-0.6763851114992558]; const W2=[[-0.17200103664554864,-0.3302750298302674,0.08294943918551867,0.22721762126033568,-0.33842340829232825,0.4035464879601677],[0.05698012176619224,-0.5513008358749589,1.0098369653847101,0.4720132603339666,-0.16301197447028803,0.13056431037175315],[0.5835832185038544,0.5281918269174776,1.4786046245833149,1.6797474358406475,-0.3348672129615332,-0.5100295745682281],[-1.3224190009063113,-0.07551508948166263,0.5789614624614516,-0.031082652094315724,0.6765168196359874,-0.1564358908034805],[-1.4865307188763033,-0.1179684909251138,-0.24152220660874893,1.0267379661320473,0.6456014769205434,0.6326528410211726]]; const b2=[0.35717428530402406,1.3645807497778129,0.025868867300038234,-0.38320055282272214,-0.4769932091371814];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2876607521092978,-0.8642137592853277,0.23254553700680874,-0.902326897086116,0.42361610643688485,-0.1743209736608825,1.2733288733475354,-0.9509312733388017,-0.7579706720630989,0.404108155239455,-0.9808324718406166,0.515950890427598,0.1103630922673822,0.10556463025772825,-0.11996937603377036,0.5856916389320254],[-0.6509819138373583,-0.34209602812743256,-0.4730180530638193,-0.6794925134703531,-0.3821891125438472,-0.3222444820220166,-0.29112534901350784,0.2248970821152783,-0.03357388988979332,0.20798033323050993,-0.4245417442736764,0.48812373878565574,-0.3219719897817139,0.4481434957189083,-0.9276704674724315,0.8591259163202933],[0.19263360376341712,-0.4727464218887443,1.572164345836549,-0.005739320244971757,-0.40397386323210666,0.3200345953079445,-0.33818071666409316,-0.13666331031789478,0.49362843340624984,0.7622773369192762,0.4307990393048192,-0.6959151736896718,0.6175233861386296,0.752815477194362,-0.37959912331467094,-0.661956379580682],[-0.024439295548532164,0.46384006372871533,0.09246166071538543,-0.8340396264337848,-0.7788760910824112,-0.2913649378479423,-0.044911152429888454,0.27065196285757376,-1.695058372425248,-1.155692625717594,-0.2652478887112221,0.20607332950138166,-0.21004117726823476,0.08398483067238947,0.3039846866297644,0.35171574142864237],[0.847414208633722,-0.0476281429730554,-0.2950382310303456,0.39801561365415417,0.8441126042420668,0.2315653792804928,-0.5021167863180804,-1.7625411861655562,-0.07061752877470291,0.5205488732886485,-0.3140578899350467,-1.1510338291293134,-0.9763018311467525,0.1906514320164586,0.10122573795774922,1.0723204924782634],[0.17291703833899497,0.38820553899254107,0.7748310410078267,0.5934775586680736,0.6942210217625924,1.5626389931704188,0.5884102625418983,0.0729594268320467,0.03606261839227064,0.21441801039287847,-0.5479225972007655,0.5936216049730362,1.2422460655474514,1.2514419169425761,0.7251163815797588,-1.54497670241814]]; const b1=[-0.4166152670035016,1.3804579694808459,-0.4580132187862405,-0.49001772683273936,0.11901877588664622,-0.35345102582226184]; const W2=[[1.4321180523821593,-1.2411978118381835,0.3594234759354051,0.19070577099544242,-1.478152344841793,0.16891261708627664],[0.7801680059472551,-0.2761632216939736,-0.6049308938678204,0.08231838519300387,-1.3145287135758519,0.30638284367867663],[-1.2039666117869101,0.23063283633593468,-0.6147349824119402,-0.580263046728664,-1.4440235935373356,0.3455376101343898],[1.3565550849740555,0.1365425919536409,-0.4170612562926919,-0.016792602562899557,-0.27606296502779815,0.04202357263358433],[0.7074406232828249,-1.2588148946247335,1.1823493009750383,-0.5264265048088527,0.7408693751600574,-0.09011862611275885]]; const b2=[0.35970352118492194,-0.4407236878650074,-0.11011611284602366,0.43803800302316387,0.4193940489148189];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.2721745536570603,-0.6313184730506222,0.40601386647090015,0.7373639242169685,-0.8312431863805474,0.5274518909382863,0.5203774113868531,0.48125880376573366,0.614789237799307,-0.16396239436097504,0.27892423938896016,0.77132093521801,-0.7402577330887394,0.10080470697724525,-0.37091739671144275,-0.6758036663664058],[-0.780598753759597,-0.9865320855901075,-0.44951208893937755,-0.5592944003295998,0.32066453457657407,-0.9133379591404028,0.085426920211325,0.151569995366144,1.4355769995657104,0.062264859655791996,0.5519055196371225,0.44347370516790197,0.7448903597176809,0.36042795552247453,0.4032233603173118,1.2531928847636744],[-0.15418062021210124,-0.598654830806513,0.4820125956415796,0.5643602937993656,-0.2534920897399733,0.06285749906842293,0.31685987669269083,0.7713244779366183,-0.4561814581067374,-0.3934758981239796,-1.1983778977176673,-0.4274618143302734,-0.9704703630999498,0.47244188198512527,0.1425074496683961,-0.8238968290806435],[-0.6406711172224427,0.28191361213950716,0.44227618026795007,0.05623364286949184,-0.9047571650100805,0.5402126933371361,-0.4975207899338198,0.13129902548445796,0.4841550887988725,1.9263381175211072,0.18851558752368971,0.1296223498143358,-0.44328795121062037,0.32703913327422457,0.2253171567612574,-1.1890210693706391],[-2.186368812375404,0.6244984456836593,-0.31292532722561467,-0.047589302226419355,0.25775394067086543,0.6720404219935442,-0.07905653875766261,0.8054689371174161,0.12577621458956484,0.5630587159886988,-0.4162592546383017,0.36099812528005093,0.27868380617718924,0.7498172297719246,0.036958987298421356,1.3279263469060596],[-0.4955367945693271,-0.4807575691045244,-0.0426271372183832,-0.24219055075946266,-1.4510903391209236,-0.03450066322749071,-0.5888976200161891,-1.1696240190797265,0.005196468808935987,0.15039308535884352,-1.1705493275013423,-0.29839619838609077,0.15850638049281232,-0.09871251809541584,-0.24705045465410175,-0.780902498124348]]; const b1=[-1.0827737030482676,0.3442994304845782,-0.31531906193307785,-0.01336376505202752,-1.1210303788820066,-0.2833394889609392]; const W2=[[0.09000912785676775,0.2449117939078705,0.2674542961277946,-0.40302804724093755,-0.3981286642420072,0.28961304135352695],[0.766380140390539,0.63312941232837,0.7746648389576171,0.30125443405705526,0.35473549383461145,-0.33830375831492526],[0.9608448077714709,-0.08634888045178848,-0.3481450863850376,-0.6320382123730927,-0.3731101922549355,0.45427854853728344],[-0.7135796535775009,0.9604490819961322,0.045580349952264926,0.9625587933236672,-0.18223397185436158,0.3997780937328334],[0.35733108847904654,0.2721639342055715,-0.5164026966604853,0.3118636913600933,-0.526321189724484,-0.935968872876937]]; const b2=[0.5005580186002563,-0.3248357394672009,-0.7314993293799346,-0.6139362916452339,0.46537777443289696];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2876607521092978,-0.8642137592853277,0.23254553700680874,-0.902326897086116,0.42361610643688485,-0.1743209736608825,1.2733288733475354,-0.9509312733388017,-0.7579706720630989,0.404108155239455,-0.9808324718406166,0.515950890427598,0.1103630922673822,0.10556463025772825,-0.11996937603377036,0.5856916389320254],[-0.6509819138373583,-0.34209602812743256,-0.4730180530638193,-0.6794925134703531,-0.3821891125438472,-0.3222444820220166,-0.29112534901350784,0.2248970821152783,-0.03357388988979332,0.20798033323050993,-0.4245417442736764,0.48812373878565574,-0.3219719897817139,0.4481434957189083,-0.9276704674724315,0.8591259163202933],[0.19263360376341712,-0.4727464218887443,1.572164345836549,-0.005739320244971757,-0.40397386323210666,0.3200345953079445,-0.33818071666409316,-0.13666331031789478,0.49362843340624984,0.7622773369192762,0.4307990393048192,-0.6959151736896718,0.6175233861386296,0.752815477194362,-0.37959912331467094,-0.661956379580682],[-0.024439295548532164,0.46384006372871533,0.09246166071538543,-0.8340396264337848,-0.7788760910824112,-0.2913649378479423,-0.044911152429888454,0.27065196285757376,-1.695058372425248,-1.155692625717594,-0.2652478887112221,0.20607332950138166,-0.21004117726823476,0.08398483067238947,0.3039846866297644,0.35171574142864237],[0.847414208633722,-0.0476281429730554,-0.2950382310303456,0.39801561365415417,0.8441126042420668,0.2315653792804928,-0.5021167863180804,-1.7625411861655562,-0.07061752877470291,0.5205488732886485,-0.3140578899350467,-1.1510338291293134,-0.9763018311467525,0.1906514320164586,0.10122573795774922,1.0723204924782634],[0.17291703833899497,0.38820553899254107,0.7748310410078267,0.5934775586680736,0.6942210217625924,1.5626389931704188,0.5884102625418983,0.0729594268320467,0.03606261839227064,0.21441801039287847,-0.5479225972007655,0.5936216049730362,1.2422460655474514,1.2514419169425761,0.7251163815797588,-1.54497670241814]]; const b1=[-0.4166152670035016,1.3804579694808459,-0.4580132187862405,-0.49001772683273936,0.11901877588664622,-0.35345102582226184]; const W2=[[1.4321180523821593,-1.2411978118381835,0.3594234759354051,0.19070577099544242,-1.478152344841793,0.16891261708627664],[0.7801680059472551,-0.2761632216939736,-0.6049308938678204,0.08231838519300387,-1.3145287135758519,0.30638284367867663],[-1.2039666117869101,0.23063283633593468,-0.6147349824119402,-0.580263046728664,-1.4440235935373356,0.3455376101343898],[1.3565550849740555,0.1365425919536409,-0.4170612562926919,-0.016792602562899557,-0.27606296502779815,0.04202357263358433],[0.7074406232828249,-1.2588148946247335,1.1823493009750383,-0.5264265048088527,0.7408693751600574,-0.09011862611275885]]; const b2=[0.35970352118492194,-0.4407236878650074,-0.11011611284602366,0.43803800302316387,0.4193940489148189];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}