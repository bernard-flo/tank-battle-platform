function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2581997165742282,-0.28708683339673957,0.6642192308484001,-1.0306410965127684,0.27386547370156217,-1.1219851103951037,1.2242164562784894,-0.9618172528937597,-0.31803647016471576,-0.01948653180347945,-0.6745243091790293,-0.19639663915119038,-0.21272491101799804,0.25164171628079973,0.6400746741879635,0.41802882934884755],[-0.2248275062246371,-0.7098789472856035,-1.0370991077556921,0.11953671080916678,0.5181585820725053,0.1152012527497856,0.05928932601778808,0.7299481626191118,0.14571566151164747,0.2801760793607879,-0.9848867472195162,-0.13664157086985207,-0.8158110847793261,0.1532328713371204,-0.7211458104252404,-0.8608919930737153],[0.20102380658814709,-0.934466618289679,-0.028539759062349845,0.5100589537612987,-1.1276756116240203,0.8908361526063916,0.4763956445883305,0.21176499978111546,-0.2613112645839746,0.33059822606190803,0.49556670939256176,-0.46505983238347354,-0.12925302197717786,0.4854607332469432,0.26043703921300915,-0.12114765172209219],[-0.046607113957817525,-0.5217409994081381,0.024063258933309822,-0.12108229274666145,-1.4137858396021847,0.42515800863553027,0.23604294501091566,0.37695539779635356,-0.8873568750641503,-0.5618044170346601,-0.134039800903741,0.801191691362129,-0.0613724096766748,-0.1298064902649404,-0.5098060910064024,0.6025318542312906],[0.1268054341215225,0.011336277880274956,-0.7653838972072332,0.293250002982495,-0.13169568552152466,0.22711747284393766,-0.5322873014938654,-1.1332915897671192,-0.39226246214004795,0.0566377058472609,-0.3600959264668104,-0.5372118224298346,-0.5979324992077747,-0.02319876821729698,0.18453033835709912,0.7775968160972396],[0.5108370744911528,-0.14760393985638273,0.4591689506753552,-0.008532305683637609,0.554046689451215,1.2998238209561404,0.5379974466554928,0.26823537746579573,0.2570224371685019,0.2570181503292361,-0.7832958278132116,0.8108700248187135,1.0942705248025275,0.5248843493105356,0.2529694685459536,-1.3192376174040645]]; const b1=[-0.13379140035832926,0.6456641525428464,0.08913122674250996,-0.5644539466550533,0.4343011768413331,-0.3190742678490599]; const W2=[[1.1942922952663653,-0.18254262928485443,-0.53108513632723,0.6729690371451039,-0.7935066557411807,0.6880506033778924],[0.37013003653306575,-0.182381438071904,-0.3088986769742944,-0.2456990582448875,-1.559804047700111,1.0292799241833346],[-1.1141072054653696,-0.11725425503978701,0.35239161720172146,-1.034055057282997,-0.8224455132110108,0.6186190539355536],[0.26053498874962977,-0.5243276384545243,-0.6172757391356144,0.24546146432794552,-0.28349928918760436,0.2532512934832765],[1.0542257489704183,-1.274869141695184,-0.23760206569878295,-1.3969230030458577,1.0895646850929213,-0.1709356737990036]]; const b2=[0.4030024610384709,0.06787255581597984,0.034975975129798276,-0.06940007901828482,0.8639529857616894];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.642300094994999,-0.4076100664927791,-0.8448000374393414,-0.7264798382403305,-0.18851358533431528,0.5532080085801117,0.4163851532173529,-0.600110628168174,-0.5105986405074234,-0.10432158293454519,0.39596804490094933,0.18151922539224152,-0.8634516524489404,0.5191180750483871,1.0103437406596558,0.14505268091828116],[0.19718165852203723,-0.5772742897316293,-0.2765994284940685,0.17793718123661798,-0.29123815407466935,0.46073556233403823,1.3506205906288464,-0.531692998272628,0.37488529656549474,-0.44650918819023894,-0.2710418574798303,-0.5029554175676599,0.8347423451117297,-0.2303980823665551,0.09557891136114172,-0.3445385040645841],[-0.44071078416923165,0.4618654190846888,-0.21170660866044838,0.9585440714089994,-0.9127642852461307,-1.4383672655735906,-1.3355389792990446,0.31497688629309223,-0.23801532640393683,0.3734414092146371,0.06378786206710682,-0.08847215042564957,0.47032842242568845,-0.013818062830108002,-0.38666257612430016,0.9731872184100807],[-0.25181296448646834,0.015852392109245605,-0.6783182253998999,0.6732278725995552,0.6790789827929185,1.028064476475926,-0.26053425360203386,-0.133167077148001,1.4107666113355124,-0.38624364596530303,-0.2989119198904482,1.131710841559534,0.12986437958178632,1.3875393354846834,0.5894216616344444,-1.3551132272079023],[0.019834395672063465,-0.09258423136628746,-0.44347758163413814,0.005226020545648786,0.25312247085848216,-0.13723123758233985,0.20741150487661522,-0.2813437573169052,0.5640795886063067,-0.756434751329974,0.35869013932577004,0.20002423762733312,0.4339208418793835,0.08004476019357926,0.08742528553653917,-0.029946504725476514],[0.3651969872933399,0.2212981265623083,-0.36463100157008643,1.260538922276273,0.1966438327616343,-0.48976067734960516,-0.5725458931468334,0.8574483950428572,0.042242244176774385,-0.40344974173721293,0.5689324641429446,0.23631090489073858,-1.0655434181477943,-0.004108467636946625,0.08569949076572164,1.1362415469501903]]; const b1=[0.25753735741857336,-0.18440282516068973,0.245844036910697,-0.12604965727037903,0.3594607347307578,-0.010733679949689393]; const W2=[[0.1374426316083568,0.039713695359871876,-0.15948657565963426,0.5291851871683276,0.08171802238020606,0.1606298274731627],[0.5365072387598134,0.21757492878691206,1.3168513507854431,-0.17419750649525556,-0.45844149196837913,-0.4967482957091003],[0.7234951070516081,1.0856583688996242,0.6744238294429963,1.356615300419748,0.6816366192096052,-0.036329350622705134],[-0.7205752872317456,-0.7213835032056017,0.7174277620901817,0.2413969518921141,-0.19379046195082625,-1.4964311744074414],[0.7253477861688292,0.5222903123087723,-0.5223761235583884,0.31139963638271784,1.0001805251309126,0.08303988257477944]]; const b2=[0.5927142692341423,1.2908760916653086,-0.4263438239216923,-0.4897238324991552,0.22703392187231725];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.642300094994999,-0.4076100664927791,-0.8448000374393414,-0.7264798382403305,-0.18851358533431528,0.5532080085801117,0.4163851532173529,-0.600110628168174,-0.5105986405074234,-0.10432158293454519,0.39596804490094933,0.18151922539224152,-0.8634516524489404,0.5191180750483871,1.0103437406596558,0.14505268091828116],[0.19718165852203723,-0.5772742897316293,-0.2765994284940685,0.17793718123661798,-0.29123815407466935,0.46073556233403823,1.3506205906288464,-0.531692998272628,0.37488529656549474,-0.44650918819023894,-0.2710418574798303,-0.5029554175676599,0.8347423451117297,-0.2303980823665551,0.09557891136114172,-0.3445385040645841],[-0.44071078416923165,0.4618654190846888,-0.21170660866044838,0.9585440714089994,-0.9127642852461307,-1.4383672655735906,-1.3355389792990446,0.31497688629309223,-0.23801532640393683,0.3734414092146371,0.06378786206710682,-0.08847215042564957,0.47032842242568845,-0.013818062830108002,-0.38666257612430016,0.9731872184100807],[-0.25181296448646834,0.015852392109245605,-0.6783182253998999,0.6732278725995552,0.6790789827929185,1.028064476475926,-0.26053425360203386,-0.133167077148001,1.4107666113355124,-0.38624364596530303,-0.2989119198904482,1.131710841559534,0.12986437958178632,1.3875393354846834,0.5894216616344444,-1.3551132272079023],[0.019834395672063465,-0.09258423136628746,-0.44347758163413814,0.005226020545648786,0.25312247085848216,-0.13723123758233985,0.20741150487661522,-0.2813437573169052,0.5640795886063067,-0.756434751329974,0.35869013932577004,0.20002423762733312,0.4339208418793835,0.08004476019357926,0.08742528553653917,-0.029946504725476514],[0.3651969872933399,0.2212981265623083,-0.36463100157008643,1.260538922276273,0.1966438327616343,-0.48976067734960516,-0.5725458931468334,0.8574483950428572,0.042242244176774385,-0.40344974173721293,0.5689324641429446,0.23631090489073858,-1.0655434181477943,-0.004108467636946625,0.08569949076572164,1.1362415469501903]]; const b1=[0.25753735741857336,-0.18440282516068973,0.245844036910697,-0.12604965727037903,0.3594607347307578,-0.010733679949689393]; const W2=[[0.1374426316083568,0.039713695359871876,-0.15948657565963426,0.5291851871683276,0.08171802238020606,0.1606298274731627],[0.5365072387598134,0.21757492878691206,1.3168513507854431,-0.17419750649525556,-0.45844149196837913,-0.4967482957091003],[0.7234951070516081,1.0856583688996242,0.6744238294429963,1.356615300419748,0.6816366192096052,-0.036329350622705134],[-0.7205752872317456,-0.7213835032056017,0.7174277620901817,0.2413969518921141,-0.19379046195082625,-1.4964311744074414],[0.7253477861688292,0.5222903123087723,-0.5223761235583884,0.31139963638271784,1.0001805251309126,0.08303988257477944]]; const b2=[0.5927142692341423,1.2908760916653086,-0.4263438239216923,-0.4897238324991552,0.22703392187231725];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2581997165742282,-0.28708683339673957,0.6642192308484001,-1.0306410965127684,0.27386547370156217,-1.1219851103951037,1.2242164562784894,-0.9618172528937597,-0.31803647016471576,-0.01948653180347945,-0.6745243091790293,-0.19639663915119038,-0.21272491101799804,0.25164171628079973,0.6400746741879635,0.41802882934884755],[-0.2248275062246371,-0.7098789472856035,-1.0370991077556921,0.11953671080916678,0.5181585820725053,0.1152012527497856,0.05928932601778808,0.7299481626191118,0.14571566151164747,0.2801760793607879,-0.9848867472195162,-0.13664157086985207,-0.8158110847793261,0.1532328713371204,-0.7211458104252404,-0.8608919930737153],[0.20102380658814709,-0.934466618289679,-0.028539759062349845,0.5100589537612987,-1.1276756116240203,0.8908361526063916,0.4763956445883305,0.21176499978111546,-0.2613112645839746,0.33059822606190803,0.49556670939256176,-0.46505983238347354,-0.12925302197717786,0.4854607332469432,0.26043703921300915,-0.12114765172209219],[-0.046607113957817525,-0.5217409994081381,0.024063258933309822,-0.12108229274666145,-1.4137858396021847,0.42515800863553027,0.23604294501091566,0.37695539779635356,-0.8873568750641503,-0.5618044170346601,-0.134039800903741,0.801191691362129,-0.0613724096766748,-0.1298064902649404,-0.5098060910064024,0.6025318542312906],[0.1268054341215225,0.011336277880274956,-0.7653838972072332,0.293250002982495,-0.13169568552152466,0.22711747284393766,-0.5322873014938654,-1.1332915897671192,-0.39226246214004795,0.0566377058472609,-0.3600959264668104,-0.5372118224298346,-0.5979324992077747,-0.02319876821729698,0.18453033835709912,0.7775968160972396],[0.5108370744911528,-0.14760393985638273,0.4591689506753552,-0.008532305683637609,0.554046689451215,1.2998238209561404,0.5379974466554928,0.26823537746579573,0.2570224371685019,0.2570181503292361,-0.7832958278132116,0.8108700248187135,1.0942705248025275,0.5248843493105356,0.2529694685459536,-1.3192376174040645]]; const b1=[-0.13379140035832926,0.6456641525428464,0.08913122674250996,-0.5644539466550533,0.4343011768413331,-0.3190742678490599]; const W2=[[1.1942922952663653,-0.18254262928485443,-0.53108513632723,0.6729690371451039,-0.7935066557411807,0.6880506033778924],[0.37013003653306575,-0.182381438071904,-0.3088986769742944,-0.2456990582448875,-1.559804047700111,1.0292799241833346],[-1.1141072054653696,-0.11725425503978701,0.35239161720172146,-1.034055057282997,-0.8224455132110108,0.6186190539355536],[0.26053498874962977,-0.5243276384545243,-0.6172757391356144,0.24546146432794552,-0.28349928918760436,0.2532512934832765],[1.0542257489704183,-1.274869141695184,-0.23760206569878295,-1.3969230030458577,1.0895646850929213,-0.1709356737990036]]; const b2=[0.4030024610384709,0.06787255581597984,0.034975975129798276,-0.06940007901828482,0.8639529857616894];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.34507027095886633,-0.26908146484761186,0.31857089498939506,-0.5349807390282012,-0.6214059233977653,-0.4930384835686568,-0.2975501338323582,0.5476384106155175,0.8383120349096947,-0.4173877943498706,0.14728296580542327,1.2312164126833178,-1.2898046559894045,0.7597073704206054,-0.06755742857002174,-0.9112486311899465],[-0.08823823051576626,-0.810129165578307,-1.042718248358481,0.0806808557512241,1.0099788589381273,-0.3182563335982528,-0.7386354007249836,-0.23889956369269663,1.3351591057184247,0.6327067506669415,0.2566263530619022,0.43594706101796177,-0.6324569432465936,0.3550243960929237,1.117113942677411,1.4098528596562172],[0.005589804169470691,-0.09998985415001357,-0.16122382308468358,-0.2799245793317855,-0.15223012041464287,-0.827075903358164,0.061581015211451595,1.35877100060492,0.11971176784903825,-1.5550407285719148,-0.6769603431939267,-0.0942882415977003,0.595925147985422,0.2614748892091272,-0.5447803988024869,-0.15300308851176014],[-0.27156217990250253,0.7542256506671421,0.060826910107844315,0.06469006372467356,-1.0899122288552956,0.4210272075019245,0.6436430153910127,0.7932954108340394,0.5931150202598713,1.5016050090646114,-0.3944573474755696,-0.02690780807661844,0.13568165780332053,-0.3850845772548429,0.8323608530136277,-1.118853151463097],[-2.4908872004172027,1.6203439723272284,0.018428651314107147,-0.29082341376873433,0.004944458688831699,0.49778302333952695,-0.7358354061185836,-0.18919184319049376,-0.2549135823782988,-0.3678467587417388,0.3081239297164895,-0.03367609408270336,0.1536132947325614,-0.2579428369506916,0.0625520513838629,0.22270427356840677],[-0.40922508484301606,0.4473067401106198,-0.4866490438773925,-0.08712440554454491,-1.4201006141006705,0.18945809399423053,-0.41519522979201495,-0.1574086243250345,0.5786039455619851,-0.14701346949230568,-0.12411685977529377,-0.1769122315695219,-0.7996865219378606,0.5769179374936764,-1.1572023532109084,-0.049277742051442266]]; const b1=[-0.6295155844838064,-0.13204333301520635,-0.21804911820630427,-0.1990502359048028,-0.6005544523065971,-0.8991142366532525]; const W2=[[-0.21305548848334788,-0.13737599545063434,0.7132897442330577,-0.4319486670554403,-0.7260550864860007,0.827909255771049],[0.6557097418368405,0.778054876257126,0.6470819732314512,0.17000358600668877,-0.01964947127947153,0.12399005655848411],[-0.029747091233845502,-0.05077814472012376,1.0369177008630204,-0.5147879815133983,-0.26558551565242927,0.16969158388007163],[-0.976680709966333,0.8596454918823845,0.7112370972613605,0.6682822189730674,-0.3873160455551457,-0.29667011500591317],[0.6942324539591558,0.02513979155028301,-0.4960437125314962,0.691310908538469,-0.694747104344418,-0.4170017446857986]]; const b2=[0.2620441888624262,-0.6714482608409946,-1.1044666365249238,-0.7506545826614734,0.39441235148468456];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.2581997165742282,-0.28708683339673957,0.6642192308484001,-1.0306410965127684,0.27386547370156217,-1.1219851103951037,1.2242164562784894,-0.9618172528937597,-0.31803647016471576,-0.01948653180347945,-0.6745243091790293,-0.19639663915119038,-0.21272491101799804,0.25164171628079973,0.6400746741879635,0.41802882934884755],[-0.2248275062246371,-0.7098789472856035,-1.0370991077556921,0.11953671080916678,0.5181585820725053,0.1152012527497856,0.05928932601778808,0.7299481626191118,0.14571566151164747,0.2801760793607879,-0.9848867472195162,-0.13664157086985207,-0.8158110847793261,0.1532328713371204,-0.7211458104252404,-0.8608919930737153],[0.20102380658814709,-0.934466618289679,-0.028539759062349845,0.5100589537612987,-1.1276756116240203,0.8908361526063916,0.4763956445883305,0.21176499978111546,-0.2613112645839746,0.33059822606190803,0.49556670939256176,-0.46505983238347354,-0.12925302197717786,0.4854607332469432,0.26043703921300915,-0.12114765172209219],[-0.046607113957817525,-0.5217409994081381,0.024063258933309822,-0.12108229274666145,-1.4137858396021847,0.42515800863553027,0.23604294501091566,0.37695539779635356,-0.8873568750641503,-0.5618044170346601,-0.134039800903741,0.801191691362129,-0.0613724096766748,-0.1298064902649404,-0.5098060910064024,0.6025318542312906],[0.1268054341215225,0.011336277880274956,-0.7653838972072332,0.293250002982495,-0.13169568552152466,0.22711747284393766,-0.5322873014938654,-1.1332915897671192,-0.39226246214004795,0.0566377058472609,-0.3600959264668104,-0.5372118224298346,-0.5979324992077747,-0.02319876821729698,0.18453033835709912,0.7775968160972396],[0.5108370744911528,-0.14760393985638273,0.4591689506753552,-0.008532305683637609,0.554046689451215,1.2998238209561404,0.5379974466554928,0.26823537746579573,0.2570224371685019,0.2570181503292361,-0.7832958278132116,0.8108700248187135,1.0942705248025275,0.5248843493105356,0.2529694685459536,-1.3192376174040645]]; const b1=[-0.13379140035832926,0.6456641525428464,0.08913122674250996,-0.5644539466550533,0.4343011768413331,-0.3190742678490599]; const W2=[[1.1942922952663653,-0.18254262928485443,-0.53108513632723,0.6729690371451039,-0.7935066557411807,0.6880506033778924],[0.37013003653306575,-0.182381438071904,-0.3088986769742944,-0.2456990582448875,-1.559804047700111,1.0292799241833346],[-1.1141072054653696,-0.11725425503978701,0.35239161720172146,-1.034055057282997,-0.8224455132110108,0.6186190539355536],[0.26053498874962977,-0.5243276384545243,-0.6172757391356144,0.24546146432794552,-0.28349928918760436,0.2532512934832765],[1.0542257489704183,-1.274869141695184,-0.23760206569878295,-1.3969230030458577,1.0895646850929213,-0.1709356737990036]]; const b2=[0.4030024610384709,0.06787255581597984,0.034975975129798276,-0.06940007901828482,0.8639529857616894];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}