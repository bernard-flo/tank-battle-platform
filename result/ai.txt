function name(){return 'Atlas';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1237992797790948,1.1236088580020762,0.023450279894148218,-0.3351277666359498,-0.5392771033065522,0.8474322753043044,0.48477535971724267,0.10073723410143637,0.09799607148289416,-0.07716286592972678,0.23515573898056868,0.10356789273516485,-0.3030040295639623,0.2708974103455615,0.5655207833945582,0.17068474768291736],[1.2730611786481552,-1.0303774033048523,-0.052220378040658766,-0.2647152418109901,0.13402680328162794,0.08419248660139544,0.4858371122867717,-0.9037616693386266,0.4873422707244565,-0.09991753543305891,-1.0473276790313328,-0.07793355083956943,0.38355087618068,0.31112931287374923,-0.6330042759092118,-1.0886576114696578],[0.36794417367702037,-0.1332108812828842,0.10444020869728546,-0.6915221886241927,-0.22560669424424046,-1.3925914233281635,-1.102131715924956,0.9559986089374444,0.7521409100675998,0.6489247510343773,-0.18712184894983924,0.7823164890938651,0.4946349201423225,-0.03036632406583585,0.02448166298641028,1.028912875590843],[0.4827620377951982,0.9220839717810863,-0.6925325844901582,0.17209694662982472,-0.21863385637184699,0.31085985553426776,-1.5871409978361015,0.062189652832124964,1.206005633693212,0.06652992425474051,-0.3624604816190494,1.7376888257749354,-0.07111657959576419,0.1786337492654483,-0.4385467983085223,-0.2713932634390901],[0.8023652489073413,-0.28642801751175206,-1.2253793234496075,1.3785468103096103,0.8227700139150138,-1.0413189539944954,-0.0978339794938044,-1.117073463192011,0.19766038957713955,-0.3797578529578318,0.7367386354793505,0.3335989592323583,-0.6727025180019565,0.4484696014807379,-0.504374009096825,0.4673272150317603],[0.17323894297798645,-0.603698526065454,-1.0240355950808329,0.43553713083090245,-0.42633459205830465,0.21926463668347052,0.24374413624181251,0.8650716285271864,0.4664308739254485,0.9293748070403387,0.5163301995998282,-0.12392508189170753,-0.27720719329444027,-0.5588689819524054,0.31024438207440774,2.0418582705516264]]; const b1=[-0.23212123880702606,0.07083144076505478,0.4620580618308656,-0.1835352559273515,0.05078976867630074,-0.2409938595613466]; const W2=[[-0.41487808930008674,-0.36357726995802403,0.5041807229102049,0.6220460162213843,-0.5328988277189668,-0.6549590078753539],[-0.3696957371723372,-0.7578525418603492,1.3032032867733783,-0.5889737675951715,0.11878053050609369,-0.3534176313467977],[0.7784566413577254,1.05658565417898,0.7654184068247495,1.0582262663295057,0.10685556697486778,-0.01936453729882369],[-1.2290206366721637,-1.1485029398432132,1.2664046113288099,-0.6767282406950396,-0.22009759975184917,-0.6142166961264922],[-0.6630225731258587,-1.0883898137299481,0.4695255186634227,0.19792775203027288,1.04282712649405,0.0912816172901438]]; const b2=[0.5436582549785174,-0.0638063712643377,-1.06908809458702,-0.8269083171220533,0.5124847265016891];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.8342086888115082,0.2912628151286093,0.6623508658620774,-0.8691453752087238,-0.05077719238885581,0.14544137605708127,0.5653593315559003,-1.591854958541106,-0.40382068923257725,0.21288453366412435,-1.251829341964886,0.4866022480197329,0.7818569962382967,0.2599949370861611,-0.4490163494935743,0.6058467384037036],[-0.21289523276850086,-0.729391927161225,0.15069901683671094,-0.5593276137389761,-1.1096485171082955,0.18127463830647467,0.489510593528854,0.3275250074904946,0.4691917795829047,-0.10713840434931524,-0.5818557799893451,1.4684436373534069,-1.0796540345145955,-0.18682787494640912,-0.3864249648813626,0.6160962333624851],[0.374848499664999,0.04459781764056531,0.3757134225515427,-0.24448411746650855,-0.5836270384642883,0.8742945279894975,-0.16378428567982375,0.3196984727141624,-0.38864386776099147,0.6757201531071098,-0.0889514584571238,-0.7858112735102212,-0.2800989559266878,1.062212419684725,0.07279030822284384,0.015139888534174459],[-0.44531294138595623,0.6592314349511635,-0.08898646359612199,0.3802286940705564,-0.5690980288937034,0.18383014266181583,-0.593309300363866,1.706681912822104,-1.430781035317894,-0.9828477391941455,-1.0309765900304657,0.716611280224225,-0.3620714802160962,0.8560134423880733,0.8940539110320401,0.05667568633374437],[0.7608845591337647,0.27712600562785084,-0.8268896734096289,0.41412482954901886,-0.4521508637470293,-0.4388009878983943,0.5596201525803609,-2.1677232866120875,-0.5518079811434072,-0.022142074932886065,0.29516213464464874,-2.213034202079714,-1.5873175869090046,0.22665305997271298,0.8953994476783028,1.09693495251803],[0.11389889062686151,0.5244828450568054,0.9978203545878246,-0.22780786555209953,0.6477063405685367,1.3353182681505327,0.7037791590205813,-0.5260486788607723,0.5415914689047755,1.1232028282751774,-1.471566040204592,0.959557953601087,0.5021071149708607,0.7843485831955612,0.8052617055598974,-1.2849530145767654]]; const b1=[-0.40024664950980654,0.33476146319725014,0.1617708229443727,-0.1879145093389158,0.6338909383564444,-0.32227176877506486]; const W2=[[1.6045255177361768,-0.7712932866976299,0.4698498403703957,0.6874931766572746,-0.8435388555526677,-0.20657995339188506],[0.30761964134376274,-0.3010549002373633,-0.543256101350984,0.3667209030547931,-1.0415727528307555,0.7938572151948615],[-1.4004181993532285,0.5071897728234795,-0.6847734605164009,-0.8877217772233871,-0.7899304731122248,0.6641718353718536],[1.1464814800632004,-0.2146911186451563,-0.1802826211352524,-0.08757112796121086,0.7707168603554742,-0.27848244783766674],[0.5551642479773744,-0.8955609376438474,0.3177333503122549,-0.7195349718324437,0.6390026656747545,-0.2587898457581606]]; const b2=[0.8715400945273274,-0.04318999105564654,-0.10259218945774748,-0.3129753939371847,0.3198555117776437];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1237992797790948,1.1236088580020762,0.023450279894148218,-0.3351277666359498,-0.5392771033065522,0.8474322753043044,0.48477535971724267,0.10073723410143637,0.09799607148289416,-0.07716286592972678,0.23515573898056868,0.10356789273516485,-0.3030040295639623,0.2708974103455615,0.5655207833945582,0.17068474768291736],[1.2730611786481552,-1.0303774033048523,-0.052220378040658766,-0.2647152418109901,0.13402680328162794,0.08419248660139544,0.4858371122867717,-0.9037616693386266,0.4873422707244565,-0.09991753543305891,-1.0473276790313328,-0.07793355083956943,0.38355087618068,0.31112931287374923,-0.6330042759092118,-1.0886576114696578],[0.36794417367702037,-0.1332108812828842,0.10444020869728546,-0.6915221886241927,-0.22560669424424046,-1.3925914233281635,-1.102131715924956,0.9559986089374444,0.7521409100675998,0.6489247510343773,-0.18712184894983924,0.7823164890938651,0.4946349201423225,-0.03036632406583585,0.02448166298641028,1.028912875590843],[0.4827620377951982,0.9220839717810863,-0.6925325844901582,0.17209694662982472,-0.21863385637184699,0.31085985553426776,-1.5871409978361015,0.062189652832124964,1.206005633693212,0.06652992425474051,-0.3624604816190494,1.7376888257749354,-0.07111657959576419,0.1786337492654483,-0.4385467983085223,-0.2713932634390901],[0.8023652489073413,-0.28642801751175206,-1.2253793234496075,1.3785468103096103,0.8227700139150138,-1.0413189539944954,-0.0978339794938044,-1.117073463192011,0.19766038957713955,-0.3797578529578318,0.7367386354793505,0.3335989592323583,-0.6727025180019565,0.4484696014807379,-0.504374009096825,0.4673272150317603],[0.17323894297798645,-0.603698526065454,-1.0240355950808329,0.43553713083090245,-0.42633459205830465,0.21926463668347052,0.24374413624181251,0.8650716285271864,0.4664308739254485,0.9293748070403387,0.5163301995998282,-0.12392508189170753,-0.27720719329444027,-0.5588689819524054,0.31024438207440774,2.0418582705516264]]; const b1=[-0.23212123880702606,0.07083144076505478,0.4620580618308656,-0.1835352559273515,0.05078976867630074,-0.2409938595613466]; const W2=[[-0.41487808930008674,-0.36357726995802403,0.5041807229102049,0.6220460162213843,-0.5328988277189668,-0.6549590078753539],[-0.3696957371723372,-0.7578525418603492,1.3032032867733783,-0.5889737675951715,0.11878053050609369,-0.3534176313467977],[0.7784566413577254,1.05658565417898,0.7654184068247495,1.0582262663295057,0.10685556697486778,-0.01936453729882369],[-1.2290206366721637,-1.1485029398432132,1.2664046113288099,-0.6767282406950396,-0.22009759975184917,-0.6142166961264922],[-0.6630225731258587,-1.0883898137299481,0.4695255186634227,0.19792775203027288,1.04282712649405,0.0912816172901438]]; const b2=[0.5436582549785174,-0.0638063712643377,-1.06908809458702,-0.8269083171220533,0.5124847265016891];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.8342086888115082,0.2912628151286093,0.6623508658620774,-0.8691453752087238,-0.05077719238885581,0.14544137605708127,0.5653593315559003,-1.591854958541106,-0.40382068923257725,0.21288453366412435,-1.251829341964886,0.4866022480197329,0.7818569962382967,0.2599949370861611,-0.4490163494935743,0.6058467384037036],[-0.21289523276850086,-0.729391927161225,0.15069901683671094,-0.5593276137389761,-1.1096485171082955,0.18127463830647467,0.489510593528854,0.3275250074904946,0.4691917795829047,-0.10713840434931524,-0.5818557799893451,1.4684436373534069,-1.0796540345145955,-0.18682787494640912,-0.3864249648813626,0.6160962333624851],[0.374848499664999,0.04459781764056531,0.3757134225515427,-0.24448411746650855,-0.5836270384642883,0.8742945279894975,-0.16378428567982375,0.3196984727141624,-0.38864386776099147,0.6757201531071098,-0.0889514584571238,-0.7858112735102212,-0.2800989559266878,1.062212419684725,0.07279030822284384,0.015139888534174459],[-0.44531294138595623,0.6592314349511635,-0.08898646359612199,0.3802286940705564,-0.5690980288937034,0.18383014266181583,-0.593309300363866,1.706681912822104,-1.430781035317894,-0.9828477391941455,-1.0309765900304657,0.716611280224225,-0.3620714802160962,0.8560134423880733,0.8940539110320401,0.05667568633374437],[0.7608845591337647,0.27712600562785084,-0.8268896734096289,0.41412482954901886,-0.4521508637470293,-0.4388009878983943,0.5596201525803609,-2.1677232866120875,-0.5518079811434072,-0.022142074932886065,0.29516213464464874,-2.213034202079714,-1.5873175869090046,0.22665305997271298,0.8953994476783028,1.09693495251803],[0.11389889062686151,0.5244828450568054,0.9978203545878246,-0.22780786555209953,0.6477063405685367,1.3353182681505327,0.7037791590205813,-0.5260486788607723,0.5415914689047755,1.1232028282751774,-1.471566040204592,0.959557953601087,0.5021071149708607,0.7843485831955612,0.8052617055598974,-1.2849530145767654]]; const b1=[-0.40024664950980654,0.33476146319725014,0.1617708229443727,-0.1879145093389158,0.6338909383564444,-0.32227176877506486]; const W2=[[1.6045255177361768,-0.7712932866976299,0.4698498403703957,0.6874931766572746,-0.8435388555526677,-0.20657995339188506],[0.30761964134376274,-0.3010549002373633,-0.543256101350984,0.3667209030547931,-1.0415727528307555,0.7938572151948615],[-1.4004181993532285,0.5071897728234795,-0.6847734605164009,-0.8877217772233871,-0.7899304731122248,0.6641718353718536],[1.1464814800632004,-0.2146911186451563,-0.1802826211352524,-0.08757112796121086,0.7707168603554742,-0.27848244783766674],[0.5551642479773744,-0.8955609376438474,0.3177333503122549,-0.7195349718324437,0.6390026656747545,-0.2587898457581606]]; const b2=[0.8715400945273274,-0.04318999105564654,-0.10259218945774748,-0.3129753939371847,0.3198555117776437];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.8342086888115082,0.2912628151286093,0.6623508658620774,-0.8691453752087238,-0.05077719238885581,0.14544137605708127,0.5653593315559003,-1.591854958541106,-0.40382068923257725,0.21288453366412435,-1.251829341964886,0.4866022480197329,0.7818569962382967,0.2599949370861611,-0.4490163494935743,0.6058467384037036],[-0.21289523276850086,-0.729391927161225,0.15069901683671094,-0.5593276137389761,-1.1096485171082955,0.18127463830647467,0.489510593528854,0.3275250074904946,0.4691917795829047,-0.10713840434931524,-0.5818557799893451,1.4684436373534069,-1.0796540345145955,-0.18682787494640912,-0.3864249648813626,0.6160962333624851],[0.374848499664999,0.04459781764056531,0.3757134225515427,-0.24448411746650855,-0.5836270384642883,0.8742945279894975,-0.16378428567982375,0.3196984727141624,-0.38864386776099147,0.6757201531071098,-0.0889514584571238,-0.7858112735102212,-0.2800989559266878,1.062212419684725,0.07279030822284384,0.015139888534174459],[-0.44531294138595623,0.6592314349511635,-0.08898646359612199,0.3802286940705564,-0.5690980288937034,0.18383014266181583,-0.593309300363866,1.706681912822104,-1.430781035317894,-0.9828477391941455,-1.0309765900304657,0.716611280224225,-0.3620714802160962,0.8560134423880733,0.8940539110320401,0.05667568633374437],[0.7608845591337647,0.27712600562785084,-0.8268896734096289,0.41412482954901886,-0.4521508637470293,-0.4388009878983943,0.5596201525803609,-2.1677232866120875,-0.5518079811434072,-0.022142074932886065,0.29516213464464874,-2.213034202079714,-1.5873175869090046,0.22665305997271298,0.8953994476783028,1.09693495251803],[0.11389889062686151,0.5244828450568054,0.9978203545878246,-0.22780786555209953,0.6477063405685367,1.3353182681505327,0.7037791590205813,-0.5260486788607723,0.5415914689047755,1.1232028282751774,-1.471566040204592,0.959557953601087,0.5021071149708607,0.7843485831955612,0.8052617055598974,-1.2849530145767654]]; const b1=[-0.40024664950980654,0.33476146319725014,0.1617708229443727,-0.1879145093389158,0.6338909383564444,-0.32227176877506486]; const W2=[[1.6045255177361768,-0.7712932866976299,0.4698498403703957,0.6874931766572746,-0.8435388555526677,-0.20657995339188506],[0.30761964134376274,-0.3010549002373633,-0.543256101350984,0.3667209030547931,-1.0415727528307555,0.7938572151948615],[-1.4004181993532285,0.5071897728234795,-0.6847734605164009,-0.8877217772233871,-0.7899304731122248,0.6641718353718536],[1.1464814800632004,-0.2146911186451563,-0.1802826211352524,-0.08757112796121086,0.7707168603554742,-0.27848244783766674],[0.5551642479773744,-0.8955609376438474,0.3177333503122549,-0.7195349718324437,0.6390026656747545,-0.2587898457581606]]; const b2=[0.8715400945273274,-0.04318999105564654,-0.10259218945774748,-0.3129753939371847,0.3198555117776437];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.12722800410172658,-0.7169722357726682,0.6472467638235387,0.2056746678998848,0.5288895726940207,0.30575877409196317,-0.013241735695027582,0.5427904735565968,0.8663109872188622,-0.9558049725268071,-0.3786514994044817,0.09363106969251546,-0.6002328328210212,-0.3232630788463059,0.8675342571874027,0.3101615507550481],[-1.050474825802633,-0.26479759983929013,-1.105803944580245,-0.24420280124641383,0.3643262970453614,-0.5951842225014051,-1.0240698754133244,0.3942080359723301,1.5654882391555371,0.5110923416053899,0.0720807419346904,0.41519051650488037,0.054822789815988704,0.6461016790913753,0.6786859964069707,1.3482893000806608],[-0.1998549348183321,-0.234602642676614,0.4000403233486601,-0.4988814358012336,-0.66771392061041,0.015731111071450296,0.24169052083176007,0.7342043718625322,-0.7556476012682929,-0.783408785130562,-0.6251622285876282,0.28188756086250033,-0.4239021910697477,0.5460508557648284,-0.11807633464329101,-0.6142553513421969],[0.030997521816655244,0.3345822114244834,0.7229018782801597,-0.0910042770261253,-0.5028788861538994,0.588899173646248,-0.1946660802410674,-0.35283330933518176,0.8490848682874773,0.9853825482696589,0.4145794929179098,-0.13674087677933636,0.6334435173556255,-0.17875210631020172,0.5368845018888709,-2.0821820326369984],[-2.7049742621654165,1.0832552249134624,-0.29504183075793905,0.2986329531887273,-0.21220214398582887,0.7350954618589699,-0.9261463911985955,0.726192213721496,0.3815228185183761,-0.3978048582798124,0.4176498489820605,0.4469238528500532,-0.6467031356282962,0.9983299524535629,-0.8199885278636967,1.3653375362579965],[-0.17537112326460944,-0.6184682773968084,0.826137246952072,-0.21463759470317248,-1.6729241038954448,1.0504086866961635,-0.8108972838516153,-0.3657837224501251,0.39547931057206676,0.984520953729291,-0.8807125406893548,-0.14329067591725766,-0.36457125362585563,-0.04625833402671554,-0.3068567774190253,-0.24119312810680474]]; const b1=[-0.10030286095165929,0.26588494264003626,0.900348548348574,-0.13248727988065342,-1.041384422572215,0.018585995155044964]; const W2=[[-0.4088351371263731,0.8266187759363213,0.5762514762319076,0.19564345129357158,-0.29439448856530803,-0.20309575856016857],[0.5353749152946107,0.9187890085323561,0.09226531172044204,0.3622196974293126,-0.13292413056225755,0.21179684499190124],[-0.12534297463202598,0.24333253362077883,-0.2382367880592045,-0.03289950673796337,-0.5044784260536883,0.46205391473242763],[-0.5193207038738628,0.5399801335592873,0.19599416662127286,1.0641174418294304,-0.8261058617121909,1.010281923600939],[0.9228940316617081,0.10153098070896949,-0.09083840062079557,0.5881713142123229,-1.6280389847511951,-0.17383784555768902]]; const b2=[0.9285144653824069,0.013996731531557186,-0.06619972195983573,-0.5243070878585184,0.3931611117656525];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}