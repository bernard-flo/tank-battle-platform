function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6974305954012334,-0.6319880209604319,-0.02187284206215496,-0.2820037002921954,-0.08345259989282985,0.3307091842508914,-0.5044191511795048,0.10738191275357033,-1.0024494021716295,0.6577766771914099,0.4425588520671801,-1.0475947526303429,0.9633963469813289,0.48424232033503567,0.03788526333950369,-0.9311718481752647],[-1.5120467693033839,-0.6240398670606716,-1.2539926669529398,-0.23772637656368473,-0.9846711977470698,-0.47830949332536793,-0.6727104057360341,-0.7517165454719512,2.477356253973083,0.0538430749705946,0.7174137268476969,0.24468678274237282,-1.4289285900793065,-0.1392594674601653,-0.8759550987286706,-1.590234705594416],[0.308338468302304,-0.6368641436923991,-0.3798670869217681,-0.3178666651513037,-1.2406548502005756,0.6159365295150261,-0.6537110600151204,0.9843629871609016,-0.02076480540116181,-0.10820655793593338,1.53290029302259,-0.23003384475084782,-0.4580920747813215,-0.7223772348238203,-0.4644876487482737,-0.5517018388982994],[0.5041608765308707,0.9521471256445495,0.6068646244419881,-1.2933502247231945,-1.6898583165418577,0.14779304155075876,0.32485240714735175,-0.5388356092251901,-1.2713207252799532,-1.4087031379412505,-0.04421283119341409,0.5655635176817274,0.300425812944851,-0.7392514985282546,-0.8862398009851684,0.9077096053460204],[1.1464317071499548,-2.0740006697245565,-0.4407420803856834,0.9581481220981627,-0.13827556188188267,-0.3950035501325646,-1.539936860653083,-0.3468054317791311,-0.15681880901291806,-0.6355034371191524,-0.3855061727410183,0.4130109926779929,0.6479911110957399,0.28769541624600314,-0.16574182433015533,-0.07168062052624952],[-0.2933135493453917,0.6840187202853159,0.2372020281243158,-1.543751281313099,0.8104745678881432,1.1770995983379051,-0.7587708980136968,-0.4962403191434348,0.9618936707427415,0.9195838825149674,-0.2771707076671259,-0.21995983599144742,0.20800354842706034,1.3471721720279648,0.7883047801090748,-0.7640261065430851]]; const b1=[-0.55783565067182,-0.5195917940995868,0.5183280141473301,0.8882152047071024,-0.3080662987357355,-0.8757676937104949]; const W2=[[0.37577308276659305,-1.8988704255035453,-2.058854085660468,0.5141424077066123,-0.8468757233767931,-0.1488767556790587],[-0.9347906228815948,-0.5700507186994239,-0.5736193582206314,0.07362726011734672,-0.5257491536974058,0.32956488705649817],[-0.3175943695289682,-0.5476230004920524,-0.29453818267234955,-0.5778955529051557,0.052023752988599604,-0.3281473911159512],[1.1604025620930938,1.0491665061949538,-0.10279751677684182,-0.8030272100323526,-1.6981000754249196,-0.6607384821895855],[0.9361354834905591,0.09570849279856093,1.5295204063508994,-0.4963771756256429,1.2063655674126978,-0.7692397419524318]]; const b2=[0.36871150958725407,0.0357591955812559,0.06791799939526741,0.9448666789267413,0.1625183393082201];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6974305954012334,-0.6319880209604319,-0.02187284206215496,-0.2820037002921954,-0.08345259989282985,0.3307091842508914,-0.5044191511795048,0.10738191275357033,-1.0024494021716295,0.6577766771914099,0.4425588520671801,-1.0475947526303429,0.9633963469813289,0.48424232033503567,0.03788526333950369,-0.9311718481752647],[-1.5120467693033839,-0.6240398670606716,-1.2539926669529398,-0.23772637656368473,-0.9846711977470698,-0.47830949332536793,-0.6727104057360341,-0.7517165454719512,2.477356253973083,0.0538430749705946,0.7174137268476969,0.24468678274237282,-1.4289285900793065,-0.1392594674601653,-0.8759550987286706,-1.590234705594416],[0.308338468302304,-0.6368641436923991,-0.3798670869217681,-0.3178666651513037,-1.2406548502005756,0.6159365295150261,-0.6537110600151204,0.9843629871609016,-0.02076480540116181,-0.10820655793593338,1.53290029302259,-0.23003384475084782,-0.4580920747813215,-0.7223772348238203,-0.4644876487482737,-0.5517018388982994],[0.5041608765308707,0.9521471256445495,0.6068646244419881,-1.2933502247231945,-1.6898583165418577,0.14779304155075876,0.32485240714735175,-0.5388356092251901,-1.2713207252799532,-1.4087031379412505,-0.04421283119341409,0.5655635176817274,0.300425812944851,-0.7392514985282546,-0.8862398009851684,0.9077096053460204],[1.1464317071499548,-2.0740006697245565,-0.4407420803856834,0.9581481220981627,-0.13827556188188267,-0.3950035501325646,-1.539936860653083,-0.3468054317791311,-0.15681880901291806,-0.6355034371191524,-0.3855061727410183,0.4130109926779929,0.6479911110957399,0.28769541624600314,-0.16574182433015533,-0.07168062052624952],[-0.2933135493453917,0.6840187202853159,0.2372020281243158,-1.543751281313099,0.8104745678881432,1.1770995983379051,-0.7587708980136968,-0.4962403191434348,0.9618936707427415,0.9195838825149674,-0.2771707076671259,-0.21995983599144742,0.20800354842706034,1.3471721720279648,0.7883047801090748,-0.7640261065430851]]; const b1=[-0.55783565067182,-0.5195917940995868,0.5183280141473301,0.8882152047071024,-0.3080662987357355,-0.8757676937104949]; const W2=[[0.37577308276659305,-1.8988704255035453,-2.058854085660468,0.5141424077066123,-0.8468757233767931,-0.1488767556790587],[-0.9347906228815948,-0.5700507186994239,-0.5736193582206314,0.07362726011734672,-0.5257491536974058,0.32956488705649817],[-0.3175943695289682,-0.5476230004920524,-0.29453818267234955,-0.5778955529051557,0.052023752988599604,-0.3281473911159512],[1.1604025620930938,1.0491665061949538,-0.10279751677684182,-0.8030272100323526,-1.6981000754249196,-0.6607384821895855],[0.9361354834905591,0.09570849279856093,1.5295204063508994,-0.4963771756256429,1.2063655674126978,-0.7692397419524318]]; const b2=[0.36871150958725407,0.0357591955812559,0.06791799939526741,0.9448666789267413,0.1625183393082201];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.3916242663462529,-0.4260596937318488,-0.9824011446899846,-0.05976418378212392,-0.9960413123048665,0.899451847001615,0.4725252782394195,-1.201790098912408,-0.3382376072931907,0.3152968161266274,0.14057092032742438,-1.6761389083138472,-0.01061432521212529,0.024770726110920765,1.133226752939414,0.5775703671365787],[0.11901302792991522,-0.023526801301323605,-0.13515184530551236,0.26208165854506094,-0.3346888246497885,0.03391851584886449,-1.1221651381076136,-0.3684031878203222,-0.2543736857786546,0.0986622663328624,0.44331901456741923,-0.06391142717676125,-0.2502220364282025,0.3118837950858332,-0.7610955359927992,-1.217446534344435],[-0.6615574643377199,0.49127269802055595,-0.4846827573115639,0.5474527512965576,0.8122283958205261,-0.8677936277823419,-0.3493273389534716,0.1489695576060333,0.5847837577678581,0.9601008539027813,-0.17521624912078024,-0.3587840599264982,0.5169560597321059,-0.0843988086206589,-0.9346343421907946,1.4013263714481163],[-0.018937708679076987,1.1905424849661017,-0.41615028750068583,1.2796994687473462,0.10997114568754308,-0.8006315384840387,-0.5004444588808766,0.41865580544217823,0.49847044275417307,-0.0033122454322870518,-0.9894003814225871,1.8751928110245737,-0.8905811769242854,0.1258762255142511,-0.4633174434356418,0.2873797635197384],[-1.5425860572949968,0.6023578579175239,-1.0216108777426551,1.2048258231043636,-0.10199499278858924,-1.0041754821892896,-0.5163907636850433,-1.759801528056468,0.7675708444991944,-0.8560746585797416,0.8757777585650276,0.0985611106289134,-1.5499949138354767,-0.20666808320897018,-0.2692998244834717,0.8592725926235382],[0.029773821652332277,-0.4037795953264416,0.5770597360182399,-2.1833886771061355,-0.6561148715485547,1.0421619028899805,1.3529859911901096,0.6525267925620799,-0.803849976313335,0.04582053493434218,0.07759210798370973,1.8632061492476812,-1.3404148241086886,0.30995845654153575,-0.0023528598352517225,-0.16249026751511542]]; const b1=[-0.6509489332809768,0.004393637263441191,-0.10794604509996153,0.5886069996634289,-0.004332779793447816,0.6660443329427674]; const W2=[[0.05601876233998619,1.3214620459416377,-0.21892465499379749,0.21460949902539941,1.2344931766980642,0.24530881195627577],[-0.3695847904172962,0.9424423010566058,0.09955403933709431,0.7851513667934361,-0.9676255988431819,-0.25208080399502775],[1.5524094752385298,0.8207377505668899,1.7384380383161118,1.526278517518835,1.3602116476945323,-0.9713579341834468],[-1.1287292563543987,-1.7891280697190968,0.03174547353014994,-1.2796051961185737,-0.7346858630775552,0.4705112206190082],[-1.163002249287663,0.9525850187745993,0.21625541500647558,-0.31969079002096346,1.6927555697155658,-0.5364887147715309]]; const b2=[-0.46197461383869776,-0.3471063706397858,0.506973116289972,-0.17392449123111997,-0.22328539646082027];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.18787484472303803,-0.015686668884832583,0.41326232639504135,0.8005222711789579,0.6043849258010092,-0.43989946895836646,0.2555146374264646,0.015093430412689068,0.5070666454931166,-0.8624944282680483,-0.5861529566909973,0.8589221855857647,-1.1164354246499706,-0.10668574574811415,-0.5241050220043977,-0.3251132880310531],[0.1654634374400638,-0.03440119450968092,1.6558616109801692,-0.7910238359390871,0.20902309179187495,0.0015108058653028923,-1.0934263189086593,0.6998522046349647,0.8524567732909112,0.08336666863959927,-0.11818803992328722,-0.3658792512824817,0.7371624712931415,1.095455918310169,0.20710204500667181,0.7819879300383672],[0.16104808827499748,0.01579688981215746,1.6228877962948673,0.3428808783551134,0.1793114832313917,-0.6326381822055924,-0.5543123890962064,1.0247262348585602,0.32647885944268407,0.14872961513545316,0.05223787459195017,-0.8638729382260208,-2.445353486843658,0.7182763585685086,-0.6911283864341935,0.3782998049458548],[-0.023408012726188095,0.3604616421263448,2.027694684772491,1.0245290983027897,-0.674215591902096,0.27549561885241314,-0.5237055363402805,1.4275389824448221,0.7835304804461128,1.078337831746621,0.9793190117466952,0.4745515355903241,-0.58532683620774,-0.14464195445164665,0.16742951342924398,0.4855758390326017],[-1.2414511640829036,1.2293034316502252,-0.587965610023587,0.5189046838601544,0.10095267902901137,-1.0416313523961367,0.02183425063640327,-0.028021823485775255,1.4300720548421373,0.09032360740159841,-1.288816285431666,1.8024499784130026,-1.0958942054565193,-0.7505874923721708,-0.25383376069026,-0.4817197298993721],[-0.5917187040263974,0.044305478681264526,-0.2479312129262522,0.7291212477504599,-1.5134155657811794,-0.18188626621422374,0.050705306349492094,2.0567860604351433,0.4500051815636091,-0.25338618823929504,-0.6371129341753807,0.4242897567923188,0.2155141487247504,0.6880691295747825,0.45272285717037986,-0.532742621380494]]; const b1=[0.07767464130109923,0.9861220074602699,-0.4777222137683691,-1.599841830409945,-0.7992651350362825,0.9878909632434316]; const W2=[[1.103878143764749,-0.9705523592647994,-0.632662524391483,-0.2706923600658511,1.4878931889760385,-0.9434250560742091],[-0.32244675114316385,-0.6704512975039671,0.4687397649932644,1.3472482915554043,-0.37625109578960475,0.531836391836795],[-0.37455053848334574,1.3982142095003385,-0.2481265105091303,1.1536464841190495,0.6947827844850297,0.7440497333834941],[0.7105199854241742,-0.4794471177041515,-0.5507758786839968,1.2347312318192114,-0.20379403288901993,0.15110943364770496],[0.671559420242215,-0.07243481382190088,-0.05683063245872923,-0.5393303990122829,-0.7287899972067804,0.12453533548406756]]; const b2=[0.7422292888283489,-0.2479943001342368,0.2276892785615352,0.07982719648870133,-0.373353943818967];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6974305954012334,-0.6319880209604319,-0.02187284206215496,-0.2820037002921954,-0.08345259989282985,0.3307091842508914,-0.5044191511795048,0.10738191275357033,-1.0024494021716295,0.6577766771914099,0.4425588520671801,-1.0475947526303429,0.9633963469813289,0.48424232033503567,0.03788526333950369,-0.9311718481752647],[-1.5120467693033839,-0.6240398670606716,-1.2539926669529398,-0.23772637656368473,-0.9846711977470698,-0.47830949332536793,-0.6727104057360341,-0.7517165454719512,2.477356253973083,0.0538430749705946,0.7174137268476969,0.24468678274237282,-1.4289285900793065,-0.1392594674601653,-0.8759550987286706,-1.590234705594416],[0.308338468302304,-0.6368641436923991,-0.3798670869217681,-0.3178666651513037,-1.2406548502005756,0.6159365295150261,-0.6537110600151204,0.9843629871609016,-0.02076480540116181,-0.10820655793593338,1.53290029302259,-0.23003384475084782,-0.4580920747813215,-0.7223772348238203,-0.4644876487482737,-0.5517018388982994],[0.5041608765308707,0.9521471256445495,0.6068646244419881,-1.2933502247231945,-1.6898583165418577,0.14779304155075876,0.32485240714735175,-0.5388356092251901,-1.2713207252799532,-1.4087031379412505,-0.04421283119341409,0.5655635176817274,0.300425812944851,-0.7392514985282546,-0.8862398009851684,0.9077096053460204],[1.1464317071499548,-2.0740006697245565,-0.4407420803856834,0.9581481220981627,-0.13827556188188267,-0.3950035501325646,-1.539936860653083,-0.3468054317791311,-0.15681880901291806,-0.6355034371191524,-0.3855061727410183,0.4130109926779929,0.6479911110957399,0.28769541624600314,-0.16574182433015533,-0.07168062052624952],[-0.2933135493453917,0.6840187202853159,0.2372020281243158,-1.543751281313099,0.8104745678881432,1.1770995983379051,-0.7587708980136968,-0.4962403191434348,0.9618936707427415,0.9195838825149674,-0.2771707076671259,-0.21995983599144742,0.20800354842706034,1.3471721720279648,0.7883047801090748,-0.7640261065430851]]; const b1=[-0.55783565067182,-0.5195917940995868,0.5183280141473301,0.8882152047071024,-0.3080662987357355,-0.8757676937104949]; const W2=[[0.37577308276659305,-1.8988704255035453,-2.058854085660468,0.5141424077066123,-0.8468757233767931,-0.1488767556790587],[-0.9347906228815948,-0.5700507186994239,-0.5736193582206314,0.07362726011734672,-0.5257491536974058,0.32956488705649817],[-0.3175943695289682,-0.5476230004920524,-0.29453818267234955,-0.5778955529051557,0.052023752988599604,-0.3281473911159512],[1.1604025620930938,1.0491665061949538,-0.10279751677684182,-0.8030272100323526,-1.6981000754249196,-0.6607384821895855],[0.9361354834905591,0.09570849279856093,1.5295204063508994,-0.4963771756256429,1.2063655674126978,-0.7692397419524318]]; const b2=[0.36871150958725407,0.0357591955812559,0.06791799939526741,0.9448666789267413,0.1625183393082201];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.18787484472303803,-0.015686668884832583,0.41326232639504135,0.8005222711789579,0.6043849258010092,-0.43989946895836646,0.2555146374264646,0.015093430412689068,0.5070666454931166,-0.8624944282680483,-0.5861529566909973,0.8589221855857647,-1.1164354246499706,-0.10668574574811415,-0.5241050220043977,-0.3251132880310531],[0.1654634374400638,-0.03440119450968092,1.6558616109801692,-0.7910238359390871,0.20902309179187495,0.0015108058653028923,-1.0934263189086593,0.6998522046349647,0.8524567732909112,0.08336666863959927,-0.11818803992328722,-0.3658792512824817,0.7371624712931415,1.095455918310169,0.20710204500667181,0.7819879300383672],[0.16104808827499748,0.01579688981215746,1.6228877962948673,0.3428808783551134,0.1793114832313917,-0.6326381822055924,-0.5543123890962064,1.0247262348585602,0.32647885944268407,0.14872961513545316,0.05223787459195017,-0.8638729382260208,-2.445353486843658,0.7182763585685086,-0.6911283864341935,0.3782998049458548],[-0.023408012726188095,0.3604616421263448,2.027694684772491,1.0245290983027897,-0.674215591902096,0.27549561885241314,-0.5237055363402805,1.4275389824448221,0.7835304804461128,1.078337831746621,0.9793190117466952,0.4745515355903241,-0.58532683620774,-0.14464195445164665,0.16742951342924398,0.4855758390326017],[-1.2414511640829036,1.2293034316502252,-0.587965610023587,0.5189046838601544,0.10095267902901137,-1.0416313523961367,0.02183425063640327,-0.028021823485775255,1.4300720548421373,0.09032360740159841,-1.288816285431666,1.8024499784130026,-1.0958942054565193,-0.7505874923721708,-0.25383376069026,-0.4817197298993721],[-0.5917187040263974,0.044305478681264526,-0.2479312129262522,0.7291212477504599,-1.5134155657811794,-0.18188626621422374,0.050705306349492094,2.0567860604351433,0.4500051815636091,-0.25338618823929504,-0.6371129341753807,0.4242897567923188,0.2155141487247504,0.6880691295747825,0.45272285717037986,-0.532742621380494]]; const b1=[0.07767464130109923,0.9861220074602699,-0.4777222137683691,-1.599841830409945,-0.7992651350362825,0.9878909632434316]; const W2=[[1.103878143764749,-0.9705523592647994,-0.632662524391483,-0.2706923600658511,1.4878931889760385,-0.9434250560742091],[-0.32244675114316385,-0.6704512975039671,0.4687397649932644,1.3472482915554043,-0.37625109578960475,0.531836391836795],[-0.37455053848334574,1.3982142095003385,-0.2481265105091303,1.1536464841190495,0.6947827844850297,0.7440497333834941],[0.7105199854241742,-0.4794471177041515,-0.5507758786839968,1.2347312318192114,-0.20379403288901993,0.15110943364770496],[0.671559420242215,-0.07243481382190088,-0.05683063245872923,-0.5393303990122829,-0.7287899972067804,0.12453533548406756]]; const b2=[0.7422292888283489,-0.2479943001342368,0.2276892785615352,0.07982719648870133,-0.373353943818967];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}