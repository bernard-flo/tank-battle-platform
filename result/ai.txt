function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.4840044160817727,0.3959146762929663,0.5944396289911206,-0.22061870646480722,-0.841431342065736,0.04093577333534536,0.1153776251900109,0.13227532886081395,-0.6855452505854523,-0.43448320793769224,-0.9678747233914734,0.005130577393050353,-0.5785002564527965,1.090507782304178,0.40925017743700887,0.6755023042544642],[-1.0422848246828986,-0.35805543821021013,-0.5181723115179965,-0.42096565972522393,0.08029745082027043,-0.3518224873508426,-0.21202479209680772,0.364648646718254,0.41535192984488095,0.12000550794249217,-0.17575519619163382,-0.3134565176693586,-1.9579439514889816,0.41411684061547094,0.06162430112936096,-1.277375124931484],[0.4075856573962885,-0.25708259562233604,0.7229812506970638,-0.4944385935936938,0.8145059639696308,0.07099415391832448,0.5344600950841314,1.3181505800478222,-0.5996769162224089,0.49441147636093624,0.26684250774676177,-1.4564341154134341,-0.11117251840115118,1.2167465290190953,0.1916880039097088,-0.15736580532172714],[0.7712248586199894,-0.20952931387734222,0.5435500171681831,0.17271114644191232,-2.260766875234433,-0.8220016019595913,0.44393008536740863,-1.4617881552036047,-0.9242337274387796,-0.34178286505909256,0.5800969310403248,0.9062974465461955,0.5716290212850714,-1.003873145932922,-0.7934333899982098,0.878823912889602],[0.7547060832660365,-0.5780299038542845,-1.5733172172329548,0.10072858180946889,0.3562160694562043,-0.10286345782129769,0.030745368421885244,-1.302374136717512,0.8218068635335359,0.09590071898044472,-0.660277223591478,-0.033007489565821946,-0.12074715866748058,-0.15228732835823816,0.40042797100238936,0.1448985750827323],[-0.4256056355433457,-1.203053922280699,0.2768752201352009,-1.0178615364771786,0.35982933321587024,0.20610150806592697,-0.7682848323426579,-0.4909054682316133,-0.26363638911856146,-0.7723322830692196,-0.4370897456930486,0.9332131517167395,0.013504492135376855,1.9031187612721774,-0.19061833743742207,0.44622351488745904]]; const b1=[-0.14280859891144268,-0.1422613807809558,0.02260385025860201,-0.23108759910358936,0.7611273155583294,-0.2000296432333635]; const W2=[[1.11118967375322,-0.06648575035012419,0.37248950848322787,0.1700097653835932,-1.6895535193222655,0.354104817446209],[-0.6128623330832185,-0.1573076996931406,-0.5491854400198489,0.5263817085547893,-0.41907908068562627,-0.08295303144162176],[-1.030740342462994,0.7039353526020251,0.729101031012497,0.177081058966925,-0.45144357637035804,-0.09301734774651924],[1.2303665818247775,0.648800835435289,0.4198483757346869,-0.5368843005965332,0.8131379870132528,-0.5783405091670459],[0.599173561556493,-0.5857169655082246,-0.05538452192836618,-1.5010050198717537,1.5088476179494446,0.5486973052124859]]; const b2=[1.0951069692350894,0.12789345048355305,0.08412022536003558,-1.7337661886437683,-0.798264009177092];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.9830807333800213,1.0231110900882132,0.03187816189777407,-0.25773518717886307,0.5205495334545265,0.8220919316353217,-0.5386919195834046,-0.6714933089418192,1.046890225244501,-0.3829411608502244,0.9692277166261893,1.2840452366461266,-0.18727038469098328,0.032514266889354174,-1.064580585820717,-0.23714167253792154],[-0.9173408378674658,-0.4175457822920924,0.61003284117078,0.2793911258549311,-0.553793227422249,0.03978327859478488,-0.7771987077132864,0.23330649286074487,0.8601238274232106,0.7204096281369706,0.28934296975301943,0.9384448208005713,0.7655952783615497,1.6015077211011828,0.26140462025079414,0.4550575925974676],[0.415287961505259,0.14674304203710575,0.36347932584231923,0.10726967919436436,-0.6240075305688542,-1.4292045144810446,-0.906678848892727,0.8152839405662882,-0.6651003223160775,-0.5766549198237038,-0.5816273511722672,-0.30059401005167735,-2.453147334807506,0.34566661638945173,-0.22205122928392504,-0.034914273011585825],[0.4766970148660502,1.135079259200994,1.544693205409263,0.6230633153867267,0.456330123575627,0.49147974105019465,-0.22618816999979244,0.11824894818995046,1.4037314024442074,1.2893913542272881,-0.03315556429954716,0.40878322377543463,0.887129945288727,-0.2973669511307545,0.8630424614291015,0.5894325867104302],[-1.5183627811976053,1.092800558455827,-1.8148102553958467,0.35548566258608777,0.1499091877111164,0.5431649683357462,-0.9796109028753252,-0.04814310197313258,-0.24034630369584323,-0.19719821138243587,0.056876783749255574,0.4679229890371971,-0.5123014705011965,-0.8140258223631279,-0.017726007798190172,0.1746151861875841],[-0.19489612646466992,-0.6062967093465239,0.29393197823754885,0.6988521461901963,0.7996279869206145,0.31685481305001156,-0.3377215126583852,0.6738387664011122,0.5924501831527531,0.17418463945924567,-0.639414550187553,-0.13857491451563253,-0.17403976497947332,1.117238628322748,0.23898659252582877,-0.06393429186980264]]; const b1=[0.5909135176131608,1.2524664973200414,-0.5836943836191435,-0.17388505805309903,-0.058041990300269505,-1.1779912118472562]; const W2=[[-0.49133985172310524,-0.6277001920492717,0.1864847447464416,0.0950878033112461,0.4388540436909469,-0.41868945805860863],[-0.5377956718829088,0.8480333796249809,0.23791318019699165,0.4667707272862444,0.47683641135638477,-0.09661139687565726],[-0.8841902418699805,0.3669040218250881,1.211906075336929,-0.6674880220667322,0.9422773178201552,0.824761150540779],[0.10141698016322652,0.25409556686934687,0.29328750040542095,1.0370605890057227,0.8771121491629382,0.18893792576746804],[0.6944062616625586,-0.1804788267283085,0.30786088324267946,-0.3945621938391587,-1.608125805464676,0.6360345355014069]]; const b2=[0.5219649356142603,0.6704286013150399,-0.0577966438902561,0.8322390446577207,0.3018045192023079];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.4840044160817727,0.3959146762929663,0.5944396289911206,-0.22061870646480722,-0.841431342065736,0.04093577333534536,0.1153776251900109,0.13227532886081395,-0.6855452505854523,-0.43448320793769224,-0.9678747233914734,0.005130577393050353,-0.5785002564527965,1.090507782304178,0.40925017743700887,0.6755023042544642],[-1.0422848246828986,-0.35805543821021013,-0.5181723115179965,-0.42096565972522393,0.08029745082027043,-0.3518224873508426,-0.21202479209680772,0.364648646718254,0.41535192984488095,0.12000550794249217,-0.17575519619163382,-0.3134565176693586,-1.9579439514889816,0.41411684061547094,0.06162430112936096,-1.277375124931484],[0.4075856573962885,-0.25708259562233604,0.7229812506970638,-0.4944385935936938,0.8145059639696308,0.07099415391832448,0.5344600950841314,1.3181505800478222,-0.5996769162224089,0.49441147636093624,0.26684250774676177,-1.4564341154134341,-0.11117251840115118,1.2167465290190953,0.1916880039097088,-0.15736580532172714],[0.7712248586199894,-0.20952931387734222,0.5435500171681831,0.17271114644191232,-2.260766875234433,-0.8220016019595913,0.44393008536740863,-1.4617881552036047,-0.9242337274387796,-0.34178286505909256,0.5800969310403248,0.9062974465461955,0.5716290212850714,-1.003873145932922,-0.7934333899982098,0.878823912889602],[0.7547060832660365,-0.5780299038542845,-1.5733172172329548,0.10072858180946889,0.3562160694562043,-0.10286345782129769,0.030745368421885244,-1.302374136717512,0.8218068635335359,0.09590071898044472,-0.660277223591478,-0.033007489565821946,-0.12074715866748058,-0.15228732835823816,0.40042797100238936,0.1448985750827323],[-0.4256056355433457,-1.203053922280699,0.2768752201352009,-1.0178615364771786,0.35982933321587024,0.20610150806592697,-0.7682848323426579,-0.4909054682316133,-0.26363638911856146,-0.7723322830692196,-0.4370897456930486,0.9332131517167395,0.013504492135376855,1.9031187612721774,-0.19061833743742207,0.44622351488745904]]; const b1=[-0.14280859891144268,-0.1422613807809558,0.02260385025860201,-0.23108759910358936,0.7611273155583294,-0.2000296432333635]; const W2=[[1.11118967375322,-0.06648575035012419,0.37248950848322787,0.1700097653835932,-1.6895535193222655,0.354104817446209],[-0.6128623330832185,-0.1573076996931406,-0.5491854400198489,0.5263817085547893,-0.41907908068562627,-0.08295303144162176],[-1.030740342462994,0.7039353526020251,0.729101031012497,0.177081058966925,-0.45144357637035804,-0.09301734774651924],[1.2303665818247775,0.648800835435289,0.4198483757346869,-0.5368843005965332,0.8131379870132528,-0.5783405091670459],[0.599173561556493,-0.5857169655082246,-0.05538452192836618,-1.5010050198717537,1.5088476179494446,0.5486973052124859]]; const b2=[1.0951069692350894,0.12789345048355305,0.08412022536003558,-1.7337661886437683,-0.798264009177092];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.4840044160817727,0.3959146762929663,0.5944396289911206,-0.22061870646480722,-0.841431342065736,0.04093577333534536,0.1153776251900109,0.13227532886081395,-0.6855452505854523,-0.43448320793769224,-0.9678747233914734,0.005130577393050353,-0.5785002564527965,1.090507782304178,0.40925017743700887,0.6755023042544642],[-1.0422848246828986,-0.35805543821021013,-0.5181723115179965,-0.42096565972522393,0.08029745082027043,-0.3518224873508426,-0.21202479209680772,0.364648646718254,0.41535192984488095,0.12000550794249217,-0.17575519619163382,-0.3134565176693586,-1.9579439514889816,0.41411684061547094,0.06162430112936096,-1.277375124931484],[0.4075856573962885,-0.25708259562233604,0.7229812506970638,-0.4944385935936938,0.8145059639696308,0.07099415391832448,0.5344600950841314,1.3181505800478222,-0.5996769162224089,0.49441147636093624,0.26684250774676177,-1.4564341154134341,-0.11117251840115118,1.2167465290190953,0.1916880039097088,-0.15736580532172714],[0.7712248586199894,-0.20952931387734222,0.5435500171681831,0.17271114644191232,-2.260766875234433,-0.8220016019595913,0.44393008536740863,-1.4617881552036047,-0.9242337274387796,-0.34178286505909256,0.5800969310403248,0.9062974465461955,0.5716290212850714,-1.003873145932922,-0.7934333899982098,0.878823912889602],[0.7547060832660365,-0.5780299038542845,-1.5733172172329548,0.10072858180946889,0.3562160694562043,-0.10286345782129769,0.030745368421885244,-1.302374136717512,0.8218068635335359,0.09590071898044472,-0.660277223591478,-0.033007489565821946,-0.12074715866748058,-0.15228732835823816,0.40042797100238936,0.1448985750827323],[-0.4256056355433457,-1.203053922280699,0.2768752201352009,-1.0178615364771786,0.35982933321587024,0.20610150806592697,-0.7682848323426579,-0.4909054682316133,-0.26363638911856146,-0.7723322830692196,-0.4370897456930486,0.9332131517167395,0.013504492135376855,1.9031187612721774,-0.19061833743742207,0.44622351488745904]]; const b1=[-0.14280859891144268,-0.1422613807809558,0.02260385025860201,-0.23108759910358936,0.7611273155583294,-0.2000296432333635]; const W2=[[1.11118967375322,-0.06648575035012419,0.37248950848322787,0.1700097653835932,-1.6895535193222655,0.354104817446209],[-0.6128623330832185,-0.1573076996931406,-0.5491854400198489,0.5263817085547893,-0.41907908068562627,-0.08295303144162176],[-1.030740342462994,0.7039353526020251,0.729101031012497,0.177081058966925,-0.45144357637035804,-0.09301734774651924],[1.2303665818247775,0.648800835435289,0.4198483757346869,-0.5368843005965332,0.8131379870132528,-0.5783405091670459],[0.599173561556493,-0.5857169655082246,-0.05538452192836618,-1.5010050198717537,1.5088476179494446,0.5486973052124859]]; const b2=[1.0951069692350894,0.12789345048355305,0.08412022536003558,-1.7337661886437683,-0.798264009177092];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1120828060861263,0.08218810394476125,-0.8031722274557864,-0.7953597030984183,-0.28034982055236524,1.1729089401167543,-0.26586886241464464,-0.7226329368075195,0.22438055416177677,0.32344169736731726,0.10867638657744906,0.4714565328753296,-0.2399046519787859,-0.7072049686635842,1.5750421877718863,0.003401398030459052],[0.7439433342259767,0.21601817325104447,0.33586225377010054,-0.49894733915082734,-1.5168889882504233,-0.5096473436523125,0.5010627407873044,0.16657338431340604,-0.5939877682022294,0.29012071647069143,-0.0446817908240916,0.5482798530575158,1.0445659473018136,0.6075493658545345,-0.536532214585496,-0.16049681332739268],[-0.3510692110330206,0.631753814343969,-0.39731734857666157,0.31579831724945695,0.4028317005514949,-0.6891949129525724,-1.49098380020917,0.2659846933748944,-0.33990241147246736,-0.08047891422290795,0.48697616313383496,-0.5103483785336108,0.8134372011793235,-0.6690440073690596,-0.7412906383792013,-0.236275221525895],[-0.8525691149704976,-0.4930625644394045,0.14307756516301756,-0.26509975713722456,0.13657058395911342,1.0913546223362753,-0.3135091711910285,-0.03733053919195965,1.4784818558545665,0.09174154293019818,-1.1031578973226022,1.8053730057179467,-0.6733903360641584,1.380815335410646,1.2042059394987195,-0.18604410789106882],[-0.7519939247941431,0.08417587193548265,-0.14149840263146313,0.97991747945642,1.2263698262333969,-0.20390825126331236,-0.2979191830608296,-0.16382603270335253,1.3791190110141935,0.04181994245915462,0.3587306836138342,-0.6639151677778515,0.46721867663548594,-0.6396577375594659,0.03085206787956478,-0.8008230145564409],[0.235792700746386,-0.42439241263013644,-0.29714228593586767,-0.2658100156750501,0.46169519281997384,0.8356044237730782,0.5614767167321715,1.7392585978826511,0.3561776539060315,-0.08008594289447135,-1.2305281525245277,-0.020456361465263986,-0.40072690622830814,0.24208711363927787,-0.007172770660918442,0.012903558171659349]]; const b1=[0.9881325051450379,-0.466462176164583,-0.33319231422461837,-0.49069085083181213,0.04785534606844853,1.4329884587321728]; const W2=[[-0.4029520909284247,0.17270391893931775,0.5615523698629302,0.42880953622951895,-0.27490882120387633,-0.5808691083826856],[-0.42754269665262307,-0.19811377113658823,0.6344804312193537,0.15073620323734183,-0.35041669230813,-0.3612415766964504],[2.3784501581829014,0.7862764036039829,0.11599244760415593,1.3081602618096733,-0.5607941242843713,-0.7075781442769096],[-0.2987883562069808,-1.7381706711188287,0.4253730240657252,0.8440153342161177,-0.4841713863530143,0.5197665591647467],[-0.6551311412123987,-0.3867960533592736,0.9469050627597367,-0.36110455472557373,0.9258817182806481,0.5808354966618674]]; const b2=[-0.16042231695660314,0.5545242770257248,0.01341797199388846,0.18212317272176273,0.14826255034483118];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.4840044160817727,0.3959146762929663,0.5944396289911206,-0.22061870646480722,-0.841431342065736,0.04093577333534536,0.1153776251900109,0.13227532886081395,-0.6855452505854523,-0.43448320793769224,-0.9678747233914734,0.005130577393050353,-0.5785002564527965,1.090507782304178,0.40925017743700887,0.6755023042544642],[-1.0422848246828986,-0.35805543821021013,-0.5181723115179965,-0.42096565972522393,0.08029745082027043,-0.3518224873508426,-0.21202479209680772,0.364648646718254,0.41535192984488095,0.12000550794249217,-0.17575519619163382,-0.3134565176693586,-1.9579439514889816,0.41411684061547094,0.06162430112936096,-1.277375124931484],[0.4075856573962885,-0.25708259562233604,0.7229812506970638,-0.4944385935936938,0.8145059639696308,0.07099415391832448,0.5344600950841314,1.3181505800478222,-0.5996769162224089,0.49441147636093624,0.26684250774676177,-1.4564341154134341,-0.11117251840115118,1.2167465290190953,0.1916880039097088,-0.15736580532172714],[0.7712248586199894,-0.20952931387734222,0.5435500171681831,0.17271114644191232,-2.260766875234433,-0.8220016019595913,0.44393008536740863,-1.4617881552036047,-0.9242337274387796,-0.34178286505909256,0.5800969310403248,0.9062974465461955,0.5716290212850714,-1.003873145932922,-0.7934333899982098,0.878823912889602],[0.7547060832660365,-0.5780299038542845,-1.5733172172329548,0.10072858180946889,0.3562160694562043,-0.10286345782129769,0.030745368421885244,-1.302374136717512,0.8218068635335359,0.09590071898044472,-0.660277223591478,-0.033007489565821946,-0.12074715866748058,-0.15228732835823816,0.40042797100238936,0.1448985750827323],[-0.4256056355433457,-1.203053922280699,0.2768752201352009,-1.0178615364771786,0.35982933321587024,0.20610150806592697,-0.7682848323426579,-0.4909054682316133,-0.26363638911856146,-0.7723322830692196,-0.4370897456930486,0.9332131517167395,0.013504492135376855,1.9031187612721774,-0.19061833743742207,0.44622351488745904]]; const b1=[-0.14280859891144268,-0.1422613807809558,0.02260385025860201,-0.23108759910358936,0.7611273155583294,-0.2000296432333635]; const W2=[[1.11118967375322,-0.06648575035012419,0.37248950848322787,0.1700097653835932,-1.6895535193222655,0.354104817446209],[-0.6128623330832185,-0.1573076996931406,-0.5491854400198489,0.5263817085547893,-0.41907908068562627,-0.08295303144162176],[-1.030740342462994,0.7039353526020251,0.729101031012497,0.177081058966925,-0.45144357637035804,-0.09301734774651924],[1.2303665818247775,0.648800835435289,0.4198483757346869,-0.5368843005965332,0.8131379870132528,-0.5783405091670459],[0.599173561556493,-0.5857169655082246,-0.05538452192836618,-1.5010050198717537,1.5088476179494446,0.5486973052124859]]; const b2=[1.0951069692350894,0.12789345048355305,0.08412022536003558,-1.7337661886437683,-0.798264009177092];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}