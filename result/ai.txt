function name(){return 'Atlas';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.2657377070877038,-0.7952702862910104,0.19296319361382877,0.1488267337565337,0.1062076178464431,-0.40840636050482804,-1.2370873293673883,-0.020080868974961683,0.99486003107816,0.0020856005270114865,-1.2653944175584602,2.181554596874829,-0.4088713731061995,0.18323847208043367,-0.052417903143596165,0.023031725673239654],[-0.031560308966121255,-0.025725793300662443,-0.9379502527235585,-0.6952143207428332,0.5169137326538746,-0.15892013897838433,-0.9541764818768737,0.5803422177669738,1.5259584467542402,-0.06663699554183444,0.9168402371107633,0.594215749323565,-0.012199540793099949,0.8835436166952371,-0.14765905155802922,-0.21402841740873904],[0.21921482853133073,-0.653084954529757,0.9169513625419613,0.5045635672019796,-0.2537218461920696,-0.6138995404008566,-0.5004620986274207,0.6527658070104263,-0.16477744134907424,-1.0510430801693555,-0.174040742977539,-0.040310934844384,-1.0560373167148132,0.5245892622335633,-0.41554960827200055,0.31832901501380184],[-1.237944449059895,0.6189195521280839,0.802853670629891,-0.3693598627934167,-0.4878767007706538,0.48462232270160643,0.1567993620653788,1.0589458272576056,1.0869599842187396,0.7485769848626267,0.17589450088820058,-0.6204908821378252,0.5973766191212722,-0.5919295377927859,1.0593990337840251,-0.28252856242140384],[-1.251728325623625,0.055220362409097085,-1.0533805716815035,0.610246701454474,0.30015775030160596,-0.5263489279450121,0.09393265784890695,0.24003743588475768,0.4095068467466203,-0.8065110655725475,-0.07107049748200742,0.9768350974248364,-0.6449334295219745,-0.3079101590352931,-0.4134464586438126,0.9973099841686219],[-0.47994167751141015,-0.041421213497090215,-0.35980787966747185,0.13918466318775854,-0.516871520398365,0.5660475015638468,0.3754623024312006,0.697819283303447,-0.5739166159566655,0.9112854547359412,-1.0932330559724213,-0.9505634861047898,0.06511159847394246,-0.5431937024889693,-1.145391289213786,0.8247783224399237]]; const b1=[0.04074617188760009,0.5368952799612008,1.2114138845872948,0.01497486744291876,-0.46067869451183113,0.7084980171775898]; const W2=[[-0.39039452494460036,-0.2794764607147658,-0.07289050287918664,-0.14498870342773823,-0.7183317857025575,-0.37019866905418036],[0.8193210987423857,0.6166458022491335,0.46942419436246596,0.17497361966816555,-0.1255716574415498,-0.8336628764321786],[0.7455117512964395,1.3925854121515115,-0.299512537391995,-0.017205747746284875,-0.274274901511875,0.30283537612319045],[0.009754919774336512,0.9834355233762954,0.13983484502950405,1.5603011095068298,0.7290965286649089,1.472869340921957],[0.6421198233826227,-0.7061964846012813,-1.3356609807412283,-0.05745853592205756,-1.222923265432146,0.576503604416534]]; const b2=[0.1141066717758209,0.1214085420302936,0.2935106028796921,0.4115561800170242,-0.4838575105363571];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-2.071524302142164,0.03621742778184657,0.4460919553889322,-0.6161256026351775,0.322236113488017,-1.02773027178625,-0.738753117270131,-0.5884105408915452,-1.629418407916322,-0.6671527783590535,-0.290106247295984,0.693116661675475,0.26127595571279183,0.8399287731609665,-0.23329015085587299,0.009804006796048599],[-0.37053593220576025,-0.6186737866944738,-0.3063870460890734,-0.0018624295360349999,-0.7851174945044618,0.17214432851373893,-0.5942546265443035,0.11075946106397172,0.43962701230577417,-0.4487892360706889,-0.5944102954566726,-1.063248890374965,-0.7504484025050823,0.22804603432909645,-0.5752781089759229,-1.1761181959874194],[0.02699841487283832,0.22042556261501733,-0.29659728350639497,0.04776854094554768,0.26075018751140244,0.07531243468250452,-0.3869261988291159,1.4871560236057821,0.2569226302057847,0.7140497439027937,0.820626614774963,-0.06980981821076804,-0.6785566932159952,-0.09744679270091919,-0.39375872023408726,0.13158246483281716],[0.11522547575529492,0.7307816930845265,-0.030106567659027264,0.05050358385218633,-1.178130839303715,0.748491266329734,0.05271136266517798,0.46198806967701983,-1.5010034048962448,-1.2220786033050972,0.36961046813496534,0.46841514177893684,-0.14995518638835856,0.08099319935692441,-1.5536614507552267,-0.2500353506365934],[1.3449085341802145,-1.099853476028891,-1.174165778035471,0.22796901986328955,-0.013201795769575104,-0.14095686830322654,-0.24083283111273196,-1.1581127419814055,-0.6670056166919753,0.009691221822673929,-0.47636510434084556,-0.34332618859526753,-0.12808230345268085,-0.2355913416453229,0.23506162936395242,-0.40781673525038203],[-0.4965554770500282,0.4155489386218183,-0.67250754020094,-0.6989415003917909,0.9531971798592808,0.5216847139089024,-0.052113828420904604,-0.02541281564597169,0.019052356305402262,-0.003340866980497067,-0.25582289729037305,1.1099217815832336,0.5201111215388772,1.1091560659497943,0.35355187499995067,-0.8398141935305885]]; const b1=[-0.19785477674324906,0.283632683684599,-0.8206216058942347,-0.35657402862616727,-0.8941281149899145,-0.6236642972162216]; const W2=[[1.2020058461498255,0.17155535231557467,-0.2565495924949445,-0.4688169331997375,-1.046416460112505,0.3280724962759101],[-0.14916966228848746,-0.6875956101852146,-0.795096883438052,-0.5064537931421901,-0.20268784927340594,0.46215016695218936],[-0.617251495156304,0.8819700394776046,0.28019764018554105,-0.8921111025902324,0.5747573220334583,-0.7323193965111183],[-0.12509578584999226,-0.03868093777221546,0.23039162519151354,-0.18221560052556213,-0.18398443700205377,-0.8760178846394718],[0.22422470528143357,-0.7364184130887625,0.479276482404147,-0.5026139704569121,0.62764374989094,-0.7848350565842812]]; const b2=[0.70242640397151,-0.2530431319733888,0.16502067983777194,0.7214530685291243,0.716591701893546];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.06261507152449025,0.6219701715397938,-0.47979355488570685,0.4837406823105378,-0.8268453429476196,0.43885021130336915,0.6079011962999104,1.4484752740568259,0.08958520945138533,0.3610878191737319,0.9164192527673636,-0.45456854536090346,-0.7485896556254885,0.6484092143576482,0.7855134196360283,0.5315932511809619],[0.36831426463275363,-0.3313073254712062,0.7336707392745095,-0.03226536146624219,-1.8364589454640747,0.5182763408889062,0.7129884783243801,-0.12710841658223596,0.5112733641190592,0.505833493940588,-0.9107492226151952,0.5668926831210864,1.3926953029678535,1.1213512181172436,-0.9574931907023956,-0.3807416220808066],[-0.4975578135823685,0.39862624243004496,-0.9252520280150179,0.2716080456514532,0.4508335537380316,-2.044966624017699,-0.28772526517526464,-0.33392401197312926,0.0562734599201812,0.6783572267091815,-0.3102561713575649,0.16914913589351144,0.7520192512579241,-0.49754177129494337,-0.8429359397327255,0.4680167478979842],[-0.6705398224196977,0.41024200787178217,0.41817184274576874,0.586891780618391,-0.2430289687774401,-0.21745115576769974,-0.970064437869451,-0.7591388684300874,1.0780326475550492,-0.8052756458411578,-0.6734886073969367,0.23543205272806403,0.24405410545853234,1.1112224402609434,-0.2231347159602794,0.5760734466873851],[-0.6765857006349727,0.8045912045516228,-0.1291442025813251,1.9281951270572821,0.6191710182102353,-0.23226905353169874,0.5175138155738254,-1.2502054896930044,0.47209334662534075,0.8823158335293386,0.24756205766171507,0.13738005894308442,-1.0845844052899132,-0.1723260233900661,0.32253798828098584,-0.24855558475143225],[-0.2578368881974214,-0.8473276009442993,-0.3605066919341143,-0.5598192655050912,-0.14836801860562043,0.048957709710502256,1.5424910440200785,0.2550476421745954,0.2927371248591737,-0.32347280485201446,0.04875367133852334,1.3491868953328423,-0.9882272835039725,0.12331764588846944,0.872748426964093,1.0390670364223216]]; const b1=[-0.41548088741776856,-0.046042565567851614,-0.7876841870046147,0.28224334909211074,0.21115845760781324,1.2194233380257007]; const W2=[[-1.1037642405002355,0.38201770607481045,1.4998720973502142,-0.17376729757334486,-0.6561657402505395,0.37875908384988366],[0.38094948684936536,-0.15204576618678528,0.406957008937506,0.9274812352817859,-0.3094922322557531,-0.08264086068411468],[1.1173698416588451,0.27217280036661146,-0.05066781859457049,0.667874000268474,-0.13193394198838063,-1.164031540858279],[0.030589747676375817,-1.0137590575850726,0.2033960105510969,-0.17059029558890396,-0.4862646383476921,-0.41321688415436986],[0.186325008799157,0.3010723620151734,-0.9364129139933389,0.6247722639510062,0.9505124035030955,-0.5594093990347524]]; const b2=[0.48054862702082846,-0.8703248033383029,-0.24178422203001432,0.12411783720532117,0.21781174698184252];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-2.071524302142164,0.03621742778184657,0.4460919553889322,-0.6161256026351775,0.322236113488017,-1.02773027178625,-0.738753117270131,-0.5884105408915452,-1.629418407916322,-0.6671527783590535,-0.290106247295984,0.693116661675475,0.26127595571279183,0.8399287731609665,-0.23329015085587299,0.009804006796048599],[-0.37053593220576025,-0.6186737866944738,-0.3063870460890734,-0.0018624295360349999,-0.7851174945044618,0.17214432851373893,-0.5942546265443035,0.11075946106397172,0.43962701230577417,-0.4487892360706889,-0.5944102954566726,-1.063248890374965,-0.7504484025050823,0.22804603432909645,-0.5752781089759229,-1.1761181959874194],[0.02699841487283832,0.22042556261501733,-0.29659728350639497,0.04776854094554768,0.26075018751140244,0.07531243468250452,-0.3869261988291159,1.4871560236057821,0.2569226302057847,0.7140497439027937,0.820626614774963,-0.06980981821076804,-0.6785566932159952,-0.09744679270091919,-0.39375872023408726,0.13158246483281716],[0.11522547575529492,0.7307816930845265,-0.030106567659027264,0.05050358385218633,-1.178130839303715,0.748491266329734,0.05271136266517798,0.46198806967701983,-1.5010034048962448,-1.2220786033050972,0.36961046813496534,0.46841514177893684,-0.14995518638835856,0.08099319935692441,-1.5536614507552267,-0.2500353506365934],[1.3449085341802145,-1.099853476028891,-1.174165778035471,0.22796901986328955,-0.013201795769575104,-0.14095686830322654,-0.24083283111273196,-1.1581127419814055,-0.6670056166919753,0.009691221822673929,-0.47636510434084556,-0.34332618859526753,-0.12808230345268085,-0.2355913416453229,0.23506162936395242,-0.40781673525038203],[-0.4965554770500282,0.4155489386218183,-0.67250754020094,-0.6989415003917909,0.9531971798592808,0.5216847139089024,-0.052113828420904604,-0.02541281564597169,0.019052356305402262,-0.003340866980497067,-0.25582289729037305,1.1099217815832336,0.5201111215388772,1.1091560659497943,0.35355187499995067,-0.8398141935305885]]; const b1=[-0.19785477674324906,0.283632683684599,-0.8206216058942347,-0.35657402862616727,-0.8941281149899145,-0.6236642972162216]; const W2=[[1.2020058461498255,0.17155535231557467,-0.2565495924949445,-0.4688169331997375,-1.046416460112505,0.3280724962759101],[-0.14916966228848746,-0.6875956101852146,-0.795096883438052,-0.5064537931421901,-0.20268784927340594,0.46215016695218936],[-0.617251495156304,0.8819700394776046,0.28019764018554105,-0.8921111025902324,0.5747573220334583,-0.7323193965111183],[-0.12509578584999226,-0.03868093777221546,0.23039162519151354,-0.18221560052556213,-0.18398443700205377,-0.8760178846394718],[0.22422470528143357,-0.7364184130887625,0.479276482404147,-0.5026139704569121,0.62764374989094,-0.7848350565842812]]; const b2=[0.70242640397151,-0.2530431319733888,0.16502067983777194,0.7214530685291243,0.716591701893546];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-2.071524302142164,0.03621742778184657,0.4460919553889322,-0.6161256026351775,0.322236113488017,-1.02773027178625,-0.738753117270131,-0.5884105408915452,-1.629418407916322,-0.6671527783590535,-0.290106247295984,0.693116661675475,0.26127595571279183,0.8399287731609665,-0.23329015085587299,0.009804006796048599],[-0.37053593220576025,-0.6186737866944738,-0.3063870460890734,-0.0018624295360349999,-0.7851174945044618,0.17214432851373893,-0.5942546265443035,0.11075946106397172,0.43962701230577417,-0.4487892360706889,-0.5944102954566726,-1.063248890374965,-0.7504484025050823,0.22804603432909645,-0.5752781089759229,-1.1761181959874194],[0.02699841487283832,0.22042556261501733,-0.29659728350639497,0.04776854094554768,0.26075018751140244,0.07531243468250452,-0.3869261988291159,1.4871560236057821,0.2569226302057847,0.7140497439027937,0.820626614774963,-0.06980981821076804,-0.6785566932159952,-0.09744679270091919,-0.39375872023408726,0.13158246483281716],[0.11522547575529492,0.7307816930845265,-0.030106567659027264,0.05050358385218633,-1.178130839303715,0.748491266329734,0.05271136266517798,0.46198806967701983,-1.5010034048962448,-1.2220786033050972,0.36961046813496534,0.46841514177893684,-0.14995518638835856,0.08099319935692441,-1.5536614507552267,-0.2500353506365934],[1.3449085341802145,-1.099853476028891,-1.174165778035471,0.22796901986328955,-0.013201795769575104,-0.14095686830322654,-0.24083283111273196,-1.1581127419814055,-0.6670056166919753,0.009691221822673929,-0.47636510434084556,-0.34332618859526753,-0.12808230345268085,-0.2355913416453229,0.23506162936395242,-0.40781673525038203],[-0.4965554770500282,0.4155489386218183,-0.67250754020094,-0.6989415003917909,0.9531971798592808,0.5216847139089024,-0.052113828420904604,-0.02541281564597169,0.019052356305402262,-0.003340866980497067,-0.25582289729037305,1.1099217815832336,0.5201111215388772,1.1091560659497943,0.35355187499995067,-0.8398141935305885]]; const b1=[-0.19785477674324906,0.283632683684599,-0.8206216058942347,-0.35657402862616727,-0.8941281149899145,-0.6236642972162216]; const W2=[[1.2020058461498255,0.17155535231557467,-0.2565495924949445,-0.4688169331997375,-1.046416460112505,0.3280724962759101],[-0.14916966228848746,-0.6875956101852146,-0.795096883438052,-0.5064537931421901,-0.20268784927340594,0.46215016695218936],[-0.617251495156304,0.8819700394776046,0.28019764018554105,-0.8921111025902324,0.5747573220334583,-0.7323193965111183],[-0.12509578584999226,-0.03868093777221546,0.23039162519151354,-0.18221560052556213,-0.18398443700205377,-0.8760178846394718],[0.22422470528143357,-0.7364184130887625,0.479276482404147,-0.5026139704569121,0.62764374989094,-0.7848350565842812]]; const b2=[0.70242640397151,-0.2530431319733888,0.16502067983777194,0.7214530685291243,0.716591701893546];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-2.071524302142164,0.03621742778184657,0.4460919553889322,-0.6161256026351775,0.322236113488017,-1.02773027178625,-0.738753117270131,-0.5884105408915452,-1.629418407916322,-0.6671527783590535,-0.290106247295984,0.693116661675475,0.26127595571279183,0.8399287731609665,-0.23329015085587299,0.009804006796048599],[-0.37053593220576025,-0.6186737866944738,-0.3063870460890734,-0.0018624295360349999,-0.7851174945044618,0.17214432851373893,-0.5942546265443035,0.11075946106397172,0.43962701230577417,-0.4487892360706889,-0.5944102954566726,-1.063248890374965,-0.7504484025050823,0.22804603432909645,-0.5752781089759229,-1.1761181959874194],[0.02699841487283832,0.22042556261501733,-0.29659728350639497,0.04776854094554768,0.26075018751140244,0.07531243468250452,-0.3869261988291159,1.4871560236057821,0.2569226302057847,0.7140497439027937,0.820626614774963,-0.06980981821076804,-0.6785566932159952,-0.09744679270091919,-0.39375872023408726,0.13158246483281716],[0.11522547575529492,0.7307816930845265,-0.030106567659027264,0.05050358385218633,-1.178130839303715,0.748491266329734,0.05271136266517798,0.46198806967701983,-1.5010034048962448,-1.2220786033050972,0.36961046813496534,0.46841514177893684,-0.14995518638835856,0.08099319935692441,-1.5536614507552267,-0.2500353506365934],[1.3449085341802145,-1.099853476028891,-1.174165778035471,0.22796901986328955,-0.013201795769575104,-0.14095686830322654,-0.24083283111273196,-1.1581127419814055,-0.6670056166919753,0.009691221822673929,-0.47636510434084556,-0.34332618859526753,-0.12808230345268085,-0.2355913416453229,0.23506162936395242,-0.40781673525038203],[-0.4965554770500282,0.4155489386218183,-0.67250754020094,-0.6989415003917909,0.9531971798592808,0.5216847139089024,-0.052113828420904604,-0.02541281564597169,0.019052356305402262,-0.003340866980497067,-0.25582289729037305,1.1099217815832336,0.5201111215388772,1.1091560659497943,0.35355187499995067,-0.8398141935305885]]; const b1=[-0.19785477674324906,0.283632683684599,-0.8206216058942347,-0.35657402862616727,-0.8941281149899145,-0.6236642972162216]; const W2=[[1.2020058461498255,0.17155535231557467,-0.2565495924949445,-0.4688169331997375,-1.046416460112505,0.3280724962759101],[-0.14916966228848746,-0.6875956101852146,-0.795096883438052,-0.5064537931421901,-0.20268784927340594,0.46215016695218936],[-0.617251495156304,0.8819700394776046,0.28019764018554105,-0.8921111025902324,0.5747573220334583,-0.7323193965111183],[-0.12509578584999226,-0.03868093777221546,0.23039162519151354,-0.18221560052556213,-0.18398443700205377,-0.8760178846394718],[0.22422470528143357,-0.7364184130887625,0.479276482404147,-0.5026139704569121,0.62764374989094,-0.7848350565842812]]; const b2=[0.70242640397151,-0.2530431319733888,0.16502067983777194,0.7214530685291243,0.716591701893546];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}