function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.2852182908531322,-0.9820175750488456,-0.6612169441094661,0.5088730997310189,0.03864321196187359,-0.9651134862832522,0.7171290541224016,0.48104581812653824,0.5327412982663933,-0.9481989443530792,1.0950288204581078,-0.6105406967831172,-0.11056564910350497,0.3554794909445287,0.14203732746933517,-0.9750384993676651],[-1.1152714320377612,0.06253022405144981,-0.5363243415919887,-0.43196989888836856,-0.453269098350608,0.9967542724327076,-0.45255458920787883,-1.0849152037955156,0.06333338320565729,0.04216650409907263,0.9427298197273002,-0.10467312043874366,-0.8832470811282394,-1.0048620258818524,0.07926909873012189,-0.4609563122063308],[0.33711405459025734,-0.28590314878055434,0.6038975029145128,-0.46668460998141315,-1.0577377946832538,1.1402254385850918,-0.4097703949221807,-0.6239383828765569,-0.09400513957813494,0.2375907893030884,0.5509832967773505,1.0143654374555604,0.27189824949528507,-0.523853582906037,-0.04237299801138539,-0.8719878270807646],[-0.0950230164791046,1.0560425977003858,0.34703861570382455,0.7941805656636554,-0.25173583810723754,0.8466827639603713,0.16986365586516072,-0.7557762221679502,0.12659944819207292,0.18896349878957586,0.8102601380460568,-0.5015222528603678,0.7147626151015893,-0.9158643824201692,0.48171766582683606,1.0400343761988995],[-0.23784994210299337,-0.7322761533507789,0.4786382427971434,-0.33658292994056427,-0.058818221769486145,0.24194259380268468,-0.7616336995297189,-0.09090388003757766,-1.138373666905885,-0.4849546863778853,0.8433554483096477,0.16978142448230216,0.36803125737189113,-0.3289550319032173,0.7681594372070766,0.5294300597113162],[0.5124464492458958,0.16824307744816025,-0.3490651517638622,-1.1290938095373784,-0.7303719696543114,0.6400048673828145,-0.15585700385408863,-1.1367691720106565,-0.06308982821951847,-0.653781991033764,-0.12586144888211548,1.1143589275340453,0.1359323869659408,0.8988724544059656,0.21433238190699644,-0.049578669061786096]]; const b1=[-0.3064618979130085,-0.26593132623609417,-0.11612651823463993,-0.2681459549740296,-0.021025671977788596,0.06793287414310811]; const W2=[[0.3200355648796622,0.12524235850438534,-0.13652395684307528,0.10752375946671781,-0.5775802634057078,-0.27098647386440694],[0.38337174348262393,0.45510839549128634,0.43576531214191694,1.0099606998788568,-1.2224890019319694,-0.03153047552251496],[-0.973802606443945,0.8065224773550924,0.6309431007407705,0.424152192896384,-0.6766473428809893,-0.22351055725501162],[-0.24041188948797343,-0.2439881462147432,-0.7727148868359428,0.10955752053986245,-0.6918971943510458,0.5391096227660566],[-0.09888201571276456,0.6081698458078713,1.0076934626460294,0.5558561611701398,0.0717921169758291,-0.23118281827335785]]; const b2=[-0.5901073682797391,0.4889239462066732,0.6587227338945313,0.278880805400871,-0.43762435192186955];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-14,Math.min(18,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}} 
}


// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.2861096614357339,-0.7733989151249171,0.9136120826386875,0.5940107413437241,-0.7284843953509079,0.7546215084159331,-0.5914857719422982,0.2881976301870768,-0.597213895140964,-0.8160674091582343,-0.1614021886399487,0.9645272940198257,-0.16378480221931468,0.24466002299326006,0.6671886903041016,0.09698051667003438],[-0.7630167437049133,0.09749094062659225,0.1504193479661875,-0.6923742248076885,1.1362309663058796,-0.008739402251955797,1.0889806028313425,-0.919983544566199,0.33334814193270823,1.0583320040740847,0.02118190901148642,-0.6404002122791485,0.9794148918309751,0.4149560315452878,-0.8692422444976964,-0.10417499876445513],[0.2527326212503791,1.1087994928142986,-0.7821423452189523,-0.6443618031438351,0.9123823845671448,0.7308286835162034,-0.643342773288801,-0.2869485600239011,-0.7092519241523118,-0.01626410206460016,-0.4619721231078664,-0.005526430405565996,-0.6390580307666813,-0.5259035893194152,0.8707025681903358,0.8344902286735574],[0.5900700969714834,-0.42955657217641285,0.7893751848580721,0.47178061125375814,-0.13572502552664956,0.34444850680754713,-0.3068290069365942,0.18985843051687312,0.04649317066569192,-0.8126050554361671,-0.7870743067788598,0.982324603556731,-0.09713478224518113,0.3691316371595328,0.48071056607428697,-0.9026808453613614],[0.5087353685774691,0.7816949026500093,-0.14995878806802398,0.19085984154158742,-0.5798213051468648,-0.5152142217767458,0.790207387423191,1.0937549931099069,-0.32800696736155244,1.0452902846493037,-0.8468385701991706,-0.8282219280205252,-0.861906733040676,-0.6619698450695652,0.7864027825268922,0.13379145569256323],[-0.03475453513319482,0.3499315407825474,-0.05970389452057523,0.31750693062029467,0.16607834808902777,0.5047991775103844,-0.7067395114006333,0.5575704119884342,-0.9676903873490379,0.9008835259943462,-1.1067327479498303,-1.0843416222683948,0.30412459172171635,0.428428378509923,-0.8109161565920608,-0.1727264750801787]]; const b1=[-0.0730606236898016,0.7899546021805041,-0.39153809149086893,-0.31701354305656015,0.6569401929520396,-0.8010075509317702]; const W2=[[-0.70227225438861,0.6018381983150817,-0.42738060073749645,-0.5884747171223804,-0.13248783348069712,0.1148291205428144],[0.8404357593565798,0.11688669239913287,-0.6935102390517738,0.1644805124261139,-1.0402482734562943,-0.46210229290349003],[-0.8951291169878397,0.14269495763529444,-0.3098951815801894,0.41880256777717795,0.1897692310169268,0.37498713641892817],[-0.4947938386152484,0.36037368808416026,0.8874215993535289,0.23172298624453225,0.6179918508413229,-0.5203148755944136],[-0.2018470831289531,-0.21876550654619123,-0.3574975281365909,-0.5556815220801349,0.3518764070705222,0.1535441784988027]]; const b2=[0.02979671590258297,0.7371219207153474,0.6412224053734034,-0.6018277185507649,0.4415553001318023];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-14,Math.min(18,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}} 
}


// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.2870010320183358,-0.5647802552009886,0.1884411088513307,0.6791483829564293,0.8043879978718207,0.1743565025796081,0.3998994025285121,0.09534944224761555,0.5728309119871888,-0.6839358739633894,0.8821668027975051,0.23959528428725774,-0.2170039553351244,0.13384055504199144,-1.1076599473966424,-1.1310004678277765],[-0.41076205537206534,0.13245165720173424,0.8371630375243637,-0.9527785507270085,0.4257310304268569,-1.0142330769366195,0.3305157943350532,-0.7550518853368824,0.6033629006597592,-0.22550249648641385,-0.9003660017043272,1.1238726964159573,0.5420768642546789,-0.46522591156308213,0.4822464128099955,0.2526063146774207],[0.16835118791050063,0.2035021338736409,0.13181780718309288,-0.8220389963062571,0.5825025632820331,0.3214319284473153,-0.8769151516554213,0.05004126282875454,0.9755012918090218,-0.27011899343228873,0.8250724575424269,-1.0254182982666926,0.7499856895068626,-0.5279535957327935,-0.5162218661434533,0.24096828389236902],[-1.024836790113439,0.38484425848229886,-1.0682882465231902,0.1493806568438607,-0.01971421294606146,-0.1577857503452771,-0.7835216697383489,1.1354930832016965,-0.03361310686068908,0.48582639087360024,-0.08440875106826629,0.16617145943831924,-0.9090321795919518,-0.6458723437962756,0.4797034663217383,-0.545396066386112],[-1.0446793212775791,-0.004334041884712425,-0.7785558189331916,0.7183026130237389,-1.1008243885242437,1.027628963179334,0.04204847384059063,-0.021586134278119173,0.48235973218278017,0.2755352551409822,-0.23703258817247874,0.4737747200121578,0.208155277082267,-0.9949846582359132,0.8046461278467081,-0.26184714832618994],[-0.5819555195122853,0.5316200041169348,0.2296573627227121,-0.5358923297575424,1.062528665832367,0.3695934876379541,1.0423779815883325,-0.04809000454798573,0.4277090540569528,0.15554904248694612,0.21239595351796514,-0.9830421715353248,0.47231679647749214,-0.04201569738611943,0.463835305444392,-0.29587428109857117]]; const b1=[0.16034065053340518,0.04584053017800682,-0.6669496647470979,-0.3658811311390906,-0.4650939425372272,0.13005202441244668]; const W2=[[0.06576106129813973,-0.7531995496137999,-0.6037603553952092,0.5109384289735319,0.42455780341861726,0.5138394860163888],[-1.0835454057718268,-0.1719526527995366,0.6298352585738376,-0.5972967111528378,-1.1887304273262225,-1.0199147189460729],[1.1970113251613248,-0.4802799843700556,1.0783723335808313,0.7023054737690382,1.2626229950867416,1.284577192382905],[-0.4193132286656911,0.7244863969936237,0.2759436855828259,0.19940646111951355,-0.16411367158501264,0.44713721016588104],[-0.688729913660495,0.9151341594325226,-0.11922226713486536,-0.3697534811379745,-1.1986449126756389,0.8915960959232404]]; const b2=[0.7273803602735001,1.2051579134900026,1.0651703766349634,0.5186822369039715,-0.10862957772534099];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-14,Math.min(18,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}} 
}


// ===== 다음 로봇 =====

function name(){return 'Aegis';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.28789240260093774,-0.35616159527706015,-0.5367298649360261,0.7642860245691347,0.03726039055903918,-0.4059085032567169,-0.9087154235361878,-0.09749874569184591,-0.5571242814201686,-0.5518043387685446,-0.3742642063005511,-0.4853367254453098,-0.2702231084509341,0.023021087090722592,-0.582508584561876,-0.05898145179007708],[-0.05850736703921755,0.16741237377687623,-0.7760932734529704,1.086817123889182,-0.28476890545216604,0.2802732489142272,-0.4279490141612359,-0.5901202261075658,0.8733776593868101,0.7906630034885982,0.47808608811536923,0.5881456045755522,0.10473883667838257,0.954592145864058,-0.4662649304178229,0.6093876281192963],[0.08396975457062239,-0.7017952250670164,1.0457779595851382,-0.999716189468679,0.25262274199692136,-0.08796482662157268,-1.1104875300220416,0.3870310856814103,0.36025450723484487,-0.5239738847999772,-0.18788296234279,0.25468983440769155,-0.16097059075510378,-0.5300036021461718,0.3968537000582677,-0.35255366088881945],[-0.339743676662851,-1.1007549113944999,-0.6259516773689425,-0.1730192975660365,0.09629659963452641,-0.6600200074981013,1.0397856679954067,-0.2188722646489908,-0.11371938438707008,-0.5157421633521426,0.6182568046423274,-0.6499816846800925,0.5790704235967876,0.6391236757834262,0.47869636656918946,-0.18811128741086258],[-0.2980940105971167,-0.7903629864194344,0.8928471507371514,-1.0542546160296198,0.678172528633888,0.2704721475999039,-0.7061104397420097,-1.136927261666145,-1.0072735688083976,-0.4942197743673389,0.37277339385421326,-0.5242286324906695,-1.0217827133303001,0.9720005291332492,0.8228894731665237,-0.657485752344943],[-1.1291565038913758,0.7133084674513219,0.519018619965999,0.9107084104001308,-0.34102101695980425,0.234387797765524,0.4914954740417876,-0.6537504210844054,-0.4768915050725665,-0.5897854410204536,-0.7684753455497499,-0.8817427208022546,0.6405090012332677,-0.5124597732821619,-0.5614132330546652,-0.41902208711696365]]; const b1=[0.3937419247566122,-0.6982735418244902,0.8576387624157683,-0.41474871922162104,0.2128719223926011,-0.7388884006624317]; const W2=[[1.0391756739337408,-0.4968787810629884,-1.137986909768774,-0.18567244437771674,-0.9805364668824563,-1.0372881168784314],[-0.39770515725196,-0.38138487393301557,-0.4617997330873739,0.9947975240752094,-0.956288435125325,0.8882294437238549],[0.6883351234034251,-0.7879482387321648,-0.02573484414216007,0.5595996858696687,-0.24705922305806513,-0.3921295365038396],[-0.826741334663644,-0.7658240391641913,-0.06455642115547226,0.397037763540176,-1.2028606043960577,-0.7131296190359001],[-0.4057356921096183,-0.10508361192887733,0.19856271750143795,0.15494003411846702,-0.2421010995439955,-0.43495673572410753]]; const b2=[-0.23612221808548134,-0.7418581758956095,0.8430327738153358,-0.2623027022374567,-0.4584873982142861];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-14,Math.min(18,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}} 
}


// ===== 다음 로봇 =====

function name(){return 'Orion';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.28878377318353965,-0.14754293535313168,1.0380991618121271,0.84942366618184,-0.7298672167537424,-0.9861735090930418,0.08266975093462281,-0.29034693363130726,0.6129205257079844,-0.41967280357369985,0.669304785136903,1.0897312653576328,-0.3234422615667438,-0.08779838086054625,-0.057357221727109664,1.0130375642476226],[0.29374732129363035,0.20237309035201867,-0.0893495838947942,0.8264127979698621,-0.9952688413311888,-0.7252204257704364,1.1135861778779854,-0.425188566878249,1.1433924181138613,-0.49317149707190033,-0.4434618226004443,0.05241851273514753,-0.33259919089791334,0.07441020275568833,0.8852237268898691,0.9661689415611718],[-0.0004116787692558521,0.6929074165278366,-0.34026188854832706,1.1226066179044096,-0.07725707928819059,-0.49736158169046085,0.9559400921468484,0.7240209085340659,-0.25499227733933194,-0.7778287761676657,1.099161618307503,-0.7652020334534351,-1.0719268710170702,-0.5320536085595502,-0.9900707342755213,-0.9460756056700077],[0.3453494367877368,-0.28635408073578816,-0.18361510821469473,-0.49541925197593384,0.2123074122151145,1.1377457358845846,0.5630930051936518,0.7267623880358325,-0.19382566191345107,0.7826892829576249,-0.9790776401825895,0.8338651717370062,-0.23282697374998296,-0.3758803051723819,0.4776892668166406,0.16917349156438677],[0.4484913000833457,0.723608069581354,0.26425011987198377,-0.5268118445474682,0.15716944525650933,-0.4866846679795265,0.8457306472109003,0.04773161148133953,-0.19690686926406498,1.0360251966598502,0.9825793758809054,0.7777680155420135,0.04827929679264287,0.6389857159669012,0.8411328184863394,-1.053124356363696],[0.6236425122650437,0.8949969307857093,0.8083798772092861,0.05730915002229375,0.5554293007835347,0.09918210789309412,-0.059387033504756825,1.040589162914685,0.9185079363334241,0.9648800760076566,0.5506533559180455,-0.7804432700691845,0.8087012059890435,-0.9829038491782042,0.713338228981788,-0.5421698931353562]]; const b1=[0.627143198979819,0.35761238659210803,0.5822271891595393,-0.4636163073041515,0.8908377873224295,0.19217117468178546]; const W2=[[-0.29279101086845416,0.03808347144818014,0.7856333360624579,-0.9762592987218545,-0.2134908299342475,-0.42827775135596236],[0.07142601011354155,-0.6252076256264019,0.6725323274551267,0.3674324165837448,-0.961592528389672,0.492390662115624],[0.662002994937823,0.630228132144601,-0.9232504413168063,0.7548607642075189,0.5085857854593978,0.14968051363240953],[-0.7477682098042612,0.01620117476354377,-0.44424717798695135,0.36156925212395596,0.4545873139762757,0.4439559969571316],[-0.8392009389771151,0.7336430025970664,0.7148822074278449,0.7423104299377443,0.024373089909640377,-0.30625895120814883]]; const b2=[0.661461426332002,-0.4478426821175596,-0.8685297751493123,0.9481045855088404,0.20526004457037425];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-14,Math.min(18,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}} 
}


// ===== 다음 로봇 =====

function name(){return 'Nova';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.2896751437661411,0.061075724570796686,0.3129281880247705,0.9345613077945449,0.8030051764689863,0.7335614856061434,1.074054925405433,-0.4831951215707686,-0.517034667699373,-0.28754126837885496,-0.5871262239611535,0.3647992556250652,-0.37666141468255354,-0.198617848811815,0.4677941411076565,-0.21494342025018842],[0.6460020096264785,0.23733380692716066,0.597394105663382,0.566008472050542,0.5942312233252989,0.5692859000804102,0.35512136938169636,-0.2602569076489324,-0.8865928236945981,0.5229940029031117,0.9349902672192525,-0.48330857910525726,-0.7699372184742095,-0.8057717403526817,-0.06328761633794922,-0.9770497455324627],[-0.08479311210913432,-0.21238994241282116,0.573698263853718,0.9449294247419875,-0.4071369005733022,-0.9067583367593489,0.722367713780228,1.0610107313867219,-0.8702390619135086,-1.0316836675353542,0.08620619842228616,0.5149060992209487,0.31711684925647377,-0.5341036149729285,-0.07699516807380014,0.7604024500843143],[1.030442550238325,0.5280467499229236,0.25872146093955317,-0.8178192063858312,0.3283182247957024,0.6355114787317606,0.08640034239189709,-0.6276029598148546,-0.2739319394398322,-0.21887927126811801,-0.27641208447199594,0.017712027618594473,-1.0447243710967535,0.9091157144073199,0.4766821670640915,0.5264582705396361],[-1.1049233897717026,-0.0624208749533679,-0.3643469109931837,0.0006309269346833624,-0.36383363812086955,1.0561585169765535,0.09757173362829974,-1.0676095159066863,0.6134598302802676,0.26627016715152907,-0.7076146426279131,-0.22023533696081377,1.1183413069155859,0.3059709028005533,0.8593761638061554,0.8512370401530611],[0.07644152788595338,1.0766853941200965,1.0977411344525732,-0.7960901103555433,-0.8481203820086364,-0.036023581979336194,-0.6102695410513015,0.4349287463782654,0.013907377203904892,0.21954559250025674,-0.43021794314966955,-0.6791438193361143,0.9768934107448191,0.8466520754612639,-0.3119103095172695,-0.6653176991537487]]; const b1=[0.860544473203026,-0.3865016854103891,0.3068156159033103,-0.5124838953866819,-0.23119634816683754,-0.676769250393093]; const W2=[[0.42728461547284036,0.39590619426067125,0.379350169478415,0.23720590072327902,0.34831134615484893,0.06482527083771411],[0.7297521895967081,-1.1731910093817142,-0.395733076863278,-0.35090913272542157,-1.3053104392329256,0.13034503868498032],[0.5399099604593149,0.09182690130647447,0.29796417533547265,0.8939374046438461,-0.8317790460945758,0.7987243884269205],[-0.7306443147717845,0.5282730996284571,-0.7130102348992392,0.3550661139883022,-0.22571578685851207,-0.5639977469880827],[0.8948159409919326,-0.06129779715237618,-0.7809119086144287,-0.6095143932696698,0.5996484162483015,0.11469270277062729]]; const b2=[-0.34681543942932397,-0.20766670425833825,-0.7653059538023793,0.08328340797063043,-0.6268626018722687];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-14,Math.min(18,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}} 
}

