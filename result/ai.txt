function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.609908717331247,0.2761433236486529,0.05583090454852943,-0.004859811054214583,0.07629702470631314,0.9438421561144222,0.40796055459685826,0.1212437550885011,-1.8561365785273412,-0.2418685853831747,-0.5205176500326641,1.0528456173689595,-0.6373388818966055,0.5988141063129447,0.09331210358319514,0.6901551086285991],[-0.6009399361825153,-0.8655090785467671,-0.35838698680982134,-0.7324373927685004,-1.2713307004239474,-0.09243262285583662,-0.34055302955555394,0.03870234209351357,0.9044095462526791,-0.20724977947494305,0.027281665744469163,0.3812666701665401,-1.2286713764288484,-0.31036689027961173,0.005749383590730961,-0.7663036421134667],[0.10826005436933217,0.8265221754178687,-0.981408335358624,-0.45204094913621473,0.20023022293296133,1.0990889357861473,1.2379678660104052,-0.04792778515334128,-0.5351038137101715,1.1731407199136288,0.463895620102379,-1.1508770396650188,-0.25641889596947576,0.22639867980266482,0.42543922739604384,-0.1224181243348644],[-0.22288958714418683,0.6700320225466432,-0.0024490205277308066,0.5536490409788412,-0.9943492090290607,1.2528423997577556,0.7130356842394995,0.7065591713676426,-0.6604014299363987,-1.2320432096604979,0.6534719641630791,0.2801692960038468,1.0622978132553953,-0.6008675967899385,-0.8609085950947524,0.01374404398645335],[0.1996541093382494,-0.8137227087056631,-1.4240848858569497,-0.7510139781698979,0.33242782945045357,-0.8064473920015618,-0.5877088865401425,-0.7469845669035768,1.1915551822904151,-0.17646008400691882,-0.20154840812007757,0.5978204119895187,-0.24416327748952177,0.26075630434154695,-0.3144173579430708,-0.630161916145479],[0.8271238584050841,0.8397950449816591,0.11831613690503033,-0.5258691524304463,1.0483771407280962,-0.48276232881310566,0.4286521833702568,0.16840235378800267,-0.6209936982186939,-0.3513885579315926,-0.10723825646859694,0.3223397919152582,0.892500851556264,1.5137202955957039,-0.45206691870299237,-0.6004329983147318]]; const b1=[0.24350775851227296,0.03999554085237079,-1.1515666927391115,-0.44673573776671377,0.29765863312333724,-0.8116210713585301]; const W2=[[0.3839475984034143,-0.7953706924251674,-0.6401858061963804,0.4717415307512778,-1.1201864704922022,0.1537534914956502],[0.01895757566221784,-1.294027479340654,0.35940923638274946,0.8092882067147529,0.5566979850406418,0.241402799707516],[-1.1927081994425799,-0.11765779613815341,0.4812348889290737,-1.1777441852023305,0.8966575728050846,-0.7543900960822442],[0.892505645039504,0.6289152611935731,1.5297567122727407,0.4834067327551246,0.27230556505655246,-0.2528502960778689],[0.7501468772470785,-0.17970929999858856,0.2976501850295888,-0.18611602411421302,0.6933374596989549,0.9699017393788198]]; const b2=[1.9859552749061236,-1.3243433722130447,-1.2321645202651497,0.16535262357815458,-0.10227444757016213];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.609908717331247,0.2761433236486529,0.05583090454852943,-0.004859811054214583,0.07629702470631314,0.9438421561144222,0.40796055459685826,0.1212437550885011,-1.8561365785273412,-0.2418685853831747,-0.5205176500326641,1.0528456173689595,-0.6373388818966055,0.5988141063129447,0.09331210358319514,0.6901551086285991],[-0.6009399361825153,-0.8655090785467671,-0.35838698680982134,-0.7324373927685004,-1.2713307004239474,-0.09243262285583662,-0.34055302955555394,0.03870234209351357,0.9044095462526791,-0.20724977947494305,0.027281665744469163,0.3812666701665401,-1.2286713764288484,-0.31036689027961173,0.005749383590730961,-0.7663036421134667],[0.10826005436933217,0.8265221754178687,-0.981408335358624,-0.45204094913621473,0.20023022293296133,1.0990889357861473,1.2379678660104052,-0.04792778515334128,-0.5351038137101715,1.1731407199136288,0.463895620102379,-1.1508770396650188,-0.25641889596947576,0.22639867980266482,0.42543922739604384,-0.1224181243348644],[-0.22288958714418683,0.6700320225466432,-0.0024490205277308066,0.5536490409788412,-0.9943492090290607,1.2528423997577556,0.7130356842394995,0.7065591713676426,-0.6604014299363987,-1.2320432096604979,0.6534719641630791,0.2801692960038468,1.0622978132553953,-0.6008675967899385,-0.8609085950947524,0.01374404398645335],[0.1996541093382494,-0.8137227087056631,-1.4240848858569497,-0.7510139781698979,0.33242782945045357,-0.8064473920015618,-0.5877088865401425,-0.7469845669035768,1.1915551822904151,-0.17646008400691882,-0.20154840812007757,0.5978204119895187,-0.24416327748952177,0.26075630434154695,-0.3144173579430708,-0.630161916145479],[0.8271238584050841,0.8397950449816591,0.11831613690503033,-0.5258691524304463,1.0483771407280962,-0.48276232881310566,0.4286521833702568,0.16840235378800267,-0.6209936982186939,-0.3513885579315926,-0.10723825646859694,0.3223397919152582,0.892500851556264,1.5137202955957039,-0.45206691870299237,-0.6004329983147318]]; const b1=[0.24350775851227296,0.03999554085237079,-1.1515666927391115,-0.44673573776671377,0.29765863312333724,-0.8116210713585301]; const W2=[[0.3839475984034143,-0.7953706924251674,-0.6401858061963804,0.4717415307512778,-1.1201864704922022,0.1537534914956502],[0.01895757566221784,-1.294027479340654,0.35940923638274946,0.8092882067147529,0.5566979850406418,0.241402799707516],[-1.1927081994425799,-0.11765779613815341,0.4812348889290737,-1.1777441852023305,0.8966575728050846,-0.7543900960822442],[0.892505645039504,0.6289152611935731,1.5297567122727407,0.4834067327551246,0.27230556505655246,-0.2528502960778689],[0.7501468772470785,-0.17970929999858856,0.2976501850295888,-0.18611602411421302,0.6933374596989549,0.9699017393788198]]; const b2=[1.9859552749061236,-1.3243433722130447,-1.2321645202651497,0.16535262357815458,-0.10227444757016213];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[2.0140718738067545,-0.49704827388802497,0.8582452484912089,0.6731015449371133,1.0708640961555216,0.06332927121988775,-0.5191076169681055,0.005974812605509416,-0.8517150481206391,-0.7948754093100263,0.6707147373456263,0.9431682772777213,-1.3634069839624174,-0.40662051610036604,-0.44776744696532905,1.0123235867313825],[0.117404055613378,-0.9658676050054525,0.541060432691754,-1.4638474141841338,1.4824363553386877,0.20377386479453735,-0.2076749074049815,-0.7835745971691175,0.9444085062363475,0.7551781969631375,0.15301557257585358,0.5077862981443703,1.1141747484934585,1.5300571374626961,0.8769891119893178,0.3783858029802927],[1.0269648327577847,-0.5599024730647605,0.5041245804728023,0.7861439663248093,0.07376332932176691,-0.07991086818249216,-1.6334801406717696,-0.2851741822117952,-0.3169944008529116,-1.3204037108262319,-2.0764367281569216,-0.061961637145579146,-0.806000576925256,0.2331513129515932,-0.5236118059941904,0.5481097856831365],[-0.9157962436242308,0.414312086404356,-0.07680996567401535,-0.8720001914582955,-0.7914984266650292,0.19996869255659044,0.030978294227279067,1.111278598478148,1.3723881855338427,0.37202615625889723,0.13060205582381743,-0.1389255115238469,-0.7897832395676165,0.14231290783430806,0.4368793870702899,-0.6962004483013855],[-1.0912951557156867,0.8825868726437887,-0.6151184532361061,-1.2248249391072217,0.004135012769680965,0.17999674502211388,0.8604135733572871,0.8878532979053828,-0.368144489955697,0.8379824278820791,0.9877888535717694,0.35914862082668436,-0.7298801903153255,-0.766496370232213,-0.8219125177635053,1.2777431099770087],[-0.3945447194773309,-0.5439246381996167,-0.013067828093184963,-0.15499141280656112,-0.3189355569600672,0.5180766718328791,0.7500079122307626,1.3260142048528212,1.3322112103590222,-0.35673199876392747,-1.0973499357808019,0.9135089861316574,-0.17060310133959516,0.585086027164445,-1.113185829077861,0.6449095845665124]]; const b1=[-0.30830663001417136,0.324228447476593,-0.4574714597565333,-0.16977979321829487,1.0325519327094956,0.5667573467712687]; const W2=[[0.8901242374171257,0.13874421919340763,-0.0889829000155537,-0.2296755696620681,0.9999636451654395,0.8333917989815784],[0.24162845530397364,0.6808615830021603,2.340956972387306,-0.2207763698819188,-0.5662716550682877,-0.7551673239291941],[0.05201653517616218,1.1763833974433069,-0.6296596836009315,0.7923326389421353,0.6847022147649132,0.37694545330189155],[-0.29173056542001996,-0.3831561511706141,0.37273589691087705,0.9772156854601384,-0.0896122913622406,-0.5303358298879061],[1.2815283231542878,-0.6191329747676522,-0.6885455383902445,-0.6962053729728266,-0.7719494111859582,0.44906524604420067]]; const b2=[1.1157878359798228,0.4012324237613237,0.07575783176058734,0.3823779628174133,0.19618030461914704];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.609908717331247,0.2761433236486529,0.05583090454852943,-0.004859811054214583,0.07629702470631314,0.9438421561144222,0.40796055459685826,0.1212437550885011,-1.8561365785273412,-0.2418685853831747,-0.5205176500326641,1.0528456173689595,-0.6373388818966055,0.5988141063129447,0.09331210358319514,0.6901551086285991],[-0.6009399361825153,-0.8655090785467671,-0.35838698680982134,-0.7324373927685004,-1.2713307004239474,-0.09243262285583662,-0.34055302955555394,0.03870234209351357,0.9044095462526791,-0.20724977947494305,0.027281665744469163,0.3812666701665401,-1.2286713764288484,-0.31036689027961173,0.005749383590730961,-0.7663036421134667],[0.10826005436933217,0.8265221754178687,-0.981408335358624,-0.45204094913621473,0.20023022293296133,1.0990889357861473,1.2379678660104052,-0.04792778515334128,-0.5351038137101715,1.1731407199136288,0.463895620102379,-1.1508770396650188,-0.25641889596947576,0.22639867980266482,0.42543922739604384,-0.1224181243348644],[-0.22288958714418683,0.6700320225466432,-0.0024490205277308066,0.5536490409788412,-0.9943492090290607,1.2528423997577556,0.7130356842394995,0.7065591713676426,-0.6604014299363987,-1.2320432096604979,0.6534719641630791,0.2801692960038468,1.0622978132553953,-0.6008675967899385,-0.8609085950947524,0.01374404398645335],[0.1996541093382494,-0.8137227087056631,-1.4240848858569497,-0.7510139781698979,0.33242782945045357,-0.8064473920015618,-0.5877088865401425,-0.7469845669035768,1.1915551822904151,-0.17646008400691882,-0.20154840812007757,0.5978204119895187,-0.24416327748952177,0.26075630434154695,-0.3144173579430708,-0.630161916145479],[0.8271238584050841,0.8397950449816591,0.11831613690503033,-0.5258691524304463,1.0483771407280962,-0.48276232881310566,0.4286521833702568,0.16840235378800267,-0.6209936982186939,-0.3513885579315926,-0.10723825646859694,0.3223397919152582,0.892500851556264,1.5137202955957039,-0.45206691870299237,-0.6004329983147318]]; const b1=[0.24350775851227296,0.03999554085237079,-1.1515666927391115,-0.44673573776671377,0.29765863312333724,-0.8116210713585301]; const W2=[[0.3839475984034143,-0.7953706924251674,-0.6401858061963804,0.4717415307512778,-1.1201864704922022,0.1537534914956502],[0.01895757566221784,-1.294027479340654,0.35940923638274946,0.8092882067147529,0.5566979850406418,0.241402799707516],[-1.1927081994425799,-0.11765779613815341,0.4812348889290737,-1.1777441852023305,0.8966575728050846,-0.7543900960822442],[0.892505645039504,0.6289152611935731,1.5297567122727407,0.4834067327551246,0.27230556505655246,-0.2528502960778689],[0.7501468772470785,-0.17970929999858856,0.2976501850295888,-0.18611602411421302,0.6933374596989549,0.9699017393788198]]; const b2=[1.9859552749061236,-1.3243433722130447,-1.2321645202651497,0.16535262357815458,-0.10227444757016213];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6809168526373638,0.21084497968297045,0.24953791181438748,0.6645083098258875,-1.5378780843008422,0.4150812620451664,0.216996078627281,1.4207632423494543,0.4233529130695153,0.12149655985556573,-0.1762801294979044,-0.1371347372969249,1.3779046818860348,0.06097714312029222,0.4105443727565977,-0.408382014175562],[1.0328459115614579,-0.22686302022114269,0.597638486896829,0.09759538654684845,-1.4834110617525071,-0.3370886316246603,0.15800339622980203,1.1725592268558487,0.09446791746173196,-0.16262198621904217,-1.83603704028166,0.6636228842939297,1.0997929673422864,0.6765013590869964,-0.4150739788719304,-0.6717459298339737],[-0.8809427961723796,0.2047128475677656,-0.5907325717585261,0.5969854655334145,-0.5777145384667689,-1.3700087332099216,-0.9097322929581992,0.35362422098877094,-0.8060297330002799,0.27023285205469927,-0.14497891465012466,-0.35069258339928266,0.15889146117542546,-0.8952436840112356,0.2531055224573647,0.86731140452268],[-0.8688861595230528,-0.43057142267936654,0.4350869151111513,0.27789998544911604,-0.20906080670924723,0.8412170732093014,-0.22373602941862247,0.10683324395526783,1.4286101435063439,0.7971199171858178,-1.3484293314548124,1.5293029633039308,-0.9786619645512485,0.8653998130806819,0.40929814043549007,0.5439812069239702],[-0.9347523830687563,-0.20827315114563216,-0.04797710891237618,0.17132825636768179,0.2905323216519844,-1.647687124343685,-0.3869618835286881,0.18375182517429922,1.5882852995089212,0.0047709944709123375,0.5960177201079215,-0.23953930260219877,0.665546615250469,0.6605971346546547,0.1383158874114408,-0.5858203289974667],[0.15906791787316027,-1.3170462545157762,-0.34665319064107436,0.5706556780927551,0.5543156642611177,-0.02378027507566874,0.6457997279979986,0.7445958119056729,-0.19282729579812105,-0.17204566537772467,-0.7362972878083255,0.015319010092380292,-0.005138559407741786,-0.24467491771607838,0.40572165959860945,1.2355080444953397]]; const b1=[0.444912706600386,-0.24171351073849073,0.14083705849888742,-0.1600145043392539,-0.13129258181542064,0.9132227921212981]; const W2=[[-0.8263973016059329,-0.04325708439190151,1.7381728935553733,0.606694684321243,-0.05292428723076073,-0.3312244508823768],[-0.30628640857056266,-0.5680250744310131,-0.6533676008264148,0.19115776270056603,-0.7257583545755243,-1.4991408742110408],[0.3474888805420985,-0.18284213563376128,-0.21820142339653228,0.09734198589468161,-0.1730082672377281,-1.4736925442034885],[-0.15692314601687166,-2.0418735263957064,-0.7902374405852729,-0.2105294366442963,-1.192150993002766,-0.690322054682514],[-0.5075873689348728,-0.12830946223234568,-0.849339420674701,-0.3080338702657837,1.423440138244874,0.12023513185966174]]; const b2=[-0.0016194484594826955,-0.348735775645339,0.5824530146075527,-0.636769135095436,-1.1004496891002888];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.609908717331247,0.2761433236486529,0.05583090454852943,-0.004859811054214583,0.07629702470631314,0.9438421561144222,0.40796055459685826,0.1212437550885011,-1.8561365785273412,-0.2418685853831747,-0.5205176500326641,1.0528456173689595,-0.6373388818966055,0.5988141063129447,0.09331210358319514,0.6901551086285991],[-0.6009399361825153,-0.8655090785467671,-0.35838698680982134,-0.7324373927685004,-1.2713307004239474,-0.09243262285583662,-0.34055302955555394,0.03870234209351357,0.9044095462526791,-0.20724977947494305,0.027281665744469163,0.3812666701665401,-1.2286713764288484,-0.31036689027961173,0.005749383590730961,-0.7663036421134667],[0.10826005436933217,0.8265221754178687,-0.981408335358624,-0.45204094913621473,0.20023022293296133,1.0990889357861473,1.2379678660104052,-0.04792778515334128,-0.5351038137101715,1.1731407199136288,0.463895620102379,-1.1508770396650188,-0.25641889596947576,0.22639867980266482,0.42543922739604384,-0.1224181243348644],[-0.22288958714418683,0.6700320225466432,-0.0024490205277308066,0.5536490409788412,-0.9943492090290607,1.2528423997577556,0.7130356842394995,0.7065591713676426,-0.6604014299363987,-1.2320432096604979,0.6534719641630791,0.2801692960038468,1.0622978132553953,-0.6008675967899385,-0.8609085950947524,0.01374404398645335],[0.1996541093382494,-0.8137227087056631,-1.4240848858569497,-0.7510139781698979,0.33242782945045357,-0.8064473920015618,-0.5877088865401425,-0.7469845669035768,1.1915551822904151,-0.17646008400691882,-0.20154840812007757,0.5978204119895187,-0.24416327748952177,0.26075630434154695,-0.3144173579430708,-0.630161916145479],[0.8271238584050841,0.8397950449816591,0.11831613690503033,-0.5258691524304463,1.0483771407280962,-0.48276232881310566,0.4286521833702568,0.16840235378800267,-0.6209936982186939,-0.3513885579315926,-0.10723825646859694,0.3223397919152582,0.892500851556264,1.5137202955957039,-0.45206691870299237,-0.6004329983147318]]; const b1=[0.24350775851227296,0.03999554085237079,-1.1515666927391115,-0.44673573776671377,0.29765863312333724,-0.8116210713585301]; const W2=[[0.3839475984034143,-0.7953706924251674,-0.6401858061963804,0.4717415307512778,-1.1201864704922022,0.1537534914956502],[0.01895757566221784,-1.294027479340654,0.35940923638274946,0.8092882067147529,0.5566979850406418,0.241402799707516],[-1.1927081994425799,-0.11765779613815341,0.4812348889290737,-1.1777441852023305,0.8966575728050846,-0.7543900960822442],[0.892505645039504,0.6289152611935731,1.5297567122727407,0.4834067327551246,0.27230556505655246,-0.2528502960778689],[0.7501468772470785,-0.17970929999858856,0.2976501850295888,-0.18611602411421302,0.6933374596989549,0.9699017393788198]]; const b2=[1.9859552749061236,-1.3243433722130447,-1.2321645202651497,0.16535262357815458,-0.10227444757016213];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}