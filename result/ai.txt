function name(){return 'Atlas';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6496168658979339,-0.5533874684016483,-0.6368968289314838,-0.4374699604772634,0.378861796328609,-0.4505820964826675,-0.12074491979956972,-1.0063974779307678,0.6928127483406648,0.5097836761152468,0.1903456995800321,0.08312097902566315,-0.4001054047303779,-0.022673602472898638,0.6920382093719143,1.0774656874498068],[0.7581177520780094,-0.0009076730336498862,-0.3150229875164555,-0.15794844534097774,-1.1920543651320232,0.2408703896895433,-0.6326644826933533,-0.05505342807864543,0.2871312129466644,0.42309506281879666,-0.2653575238620652,-0.5060411429452587,0.6216332211087066,0.0920892252278371,-1.3295905389782186,-0.2145097622409761],[0.0953731148433367,1.4598455080049613,-1.1549726126495767,1.3827389252461042,0.4593477896296198,-1.6517250517881579,0.03349758883528228,-1.1191155387058713,-0.11376893224581437,0.34345259715145454,0.38000772274777195,-0.7400985225153764,-0.2762834938861044,-0.14021022076357775,0.09406071131575397,0.4406439774211955],[-0.7382114222300621,-0.7191403880228558,-0.3888696311821755,0.7457581295572151,0.28676547265809643,1.087145410164117,-0.8435036949951045,0.539774030911907,0.8358314351842998,-0.6057687278576698,-1.098843680633688,0.8762324518090232,0.4475197289977664,1.056585174117072,1.2465993586701918,0.30108709456565597],[-1.2255298105735228,0.3548961776138534,0.47899051780991037,0.8309486148930552,-0.23291937295059528,-1.363134156760487,-0.0484225006343052,-0.8087326808448674,2.178595491933113,0.792417293038953,0.936868916895816,-0.4602096598559336,-1.3982693915606235,0.3107700432644442,-0.007748916929054592,-0.09939748962591666],[0.5632394637543761,-0.5190380694792893,-0.6747836273471723,-0.3715053863798147,0.7736165312499119,1.3860925539504196,0.3215236116610341,0.28842424912905523,-0.3889652219104453,-0.3094428864508618,-0.6755695210460306,0.9812512221439968,-0.21306888014647818,0.8810626841693334,0.023014795202743327,1.4724328450153088]]; const b1=[1.3578754365214944,0.11582509455961626,-0.49817689677639204,-0.6102749689506801,-0.5017755763126497,1.9331572800952888]; const W2=[[-0.9539441418383332,0.6495245858305748,1.356295287245779,0.2166334375365271,-0.15238775958209655,-0.2871860280275616],[-0.011422611462914678,0.6789941209995942,-0.6381195567643644,0.4690640748195506,-0.5003558431469752,-1.0395480321174912],[0.5259196770721923,0.14441183987716788,1.5544750286641156,0.3348964084322534,-0.2865194993148146,-0.759877879434482],[-0.4581028595967833,-1.55722431675649,0.9425733867246233,-0.685406450707288,-0.7786153646349184,0.003995389712375338],[-0.10273527779236863,0.8118045778588557,0.48074455040806024,0.33741509887944093,0.9443654545320062,-0.2926310110447932]]; const b2=[-0.5941117348374615,-0.1029237692649308,0.038396181201377944,0.40930429437268595,-0.04924734272500059];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.7928332500451014,0.7837253804138238,0.9927793990657496,-0.5135691735110828,0.06240420596103444,-0.12122600060130437,0.36661158794989995,0.7547968248677038,-1.528665357056559,0.2787795718975127,-1.1430208095752963,0.24170211210940468,-0.11881864446242865,0.7660264433182065,-0.39798396316018037,-0.5639592575081511],[-0.046609254857885155,-0.6720506497364476,-0.8281067702081361,0.627208415658241,-0.12849245171701767,-1.0028002398666183,-0.7574235359539095,-0.36817934643516653,1.5582787998790522,0.5820943842170065,-0.7267382054472514,-0.9226423885293289,-0.9057028023363498,1.1092014134065562,-0.49366782206230925,-1.6715778191456192],[0.5784903762673174,-0.15634200951428784,0.05649621320439337,-0.5084997223090759,-0.06392337913510454,0.542862464946249,0.2606642389207156,0.9307528738010687,0.025335036355243257,0.7177416841562838,-0.28280601499362756,-0.6002251223885476,-0.09699947232669956,0.3465902428973265,0.1787790823890235,0.2237533632685186],[0.105991431931177,0.3784837485562607,0.13159754383063396,-0.7758771908814153,-1.7870467365370832,0.8736923549910894,0.4725111599843933,-0.014680995211720727,-0.4737222708440856,-0.7123991566005755,0.3694281644380767,0.7212845424491161,0.4298337020182026,0.30381519061104256,-0.7064749182896611,0.2620945969468635],[0.568069630527369,-1.3386823026920927,-1.3847756094512242,1.2709080577483016,0.3275731095882902,-0.9324431798241535,-0.2043163510855725,0.08944050297043375,0.41847830808140407,0.5072217138463596,0.05511197853355679,0.2001762313838728,-0.3593273020419004,-0.289035279592588,-0.14047621972042984,0.0016163176749725075],[-0.8699432369683022,0.6689974293363571,0.48160630255051684,-0.16115484079964143,0.7287937168533632,-0.10457074801073071,-0.9002767164919991,0.27197673577460174,-0.3006042250621264,-0.3927036605023912,-0.8255769899199433,0.8233769788861179,0.39058334099682135,1.9773327420529,0.24430792112595445,-0.7120479324600191]]; const b1=[0.16262411768897542,0.4771760675628622,-0.5921143569086456,0.3316713848943774,0.7607667990049766,-1.1563884236680728]; const W2=[[0.8108386762943757,-0.05736924677092628,-0.02255410650129338,0.2964382089772102,-2.053337750394884,0.09092323699653705],[-0.01697493108159974,-1.3305654035195806,-0.3301313891092976,0.8486531761841115,-0.8479251687292991,-0.1427946173390841],[-1.4750152567085764,-0.38269010498117934,-0.24935557978381998,-0.5591791583269531,0.3361802541553191,-0.23247876771972847],[1.3191826415195582,0.7597210472084561,-0.03104787717320927,0.17675738749264208,-0.16657722226238672,-0.9427536502899323],[0.4490826357297029,-0.15924928741149882,0.01000670973505335,0.22677659598726463,1.3701492698819682,0.21090100081060298]]; const b2=[1.290842747172045,-0.3239858211461083,-0.5910338990819436,-0.2690156358141866,0.1506404549096001];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.7928332500451014,0.7837253804138238,0.9927793990657496,-0.5135691735110828,0.06240420596103444,-0.12122600060130437,0.36661158794989995,0.7547968248677038,-1.528665357056559,0.2787795718975127,-1.1430208095752963,0.24170211210940468,-0.11881864446242865,0.7660264433182065,-0.39798396316018037,-0.5639592575081511],[-0.046609254857885155,-0.6720506497364476,-0.8281067702081361,0.627208415658241,-0.12849245171701767,-1.0028002398666183,-0.7574235359539095,-0.36817934643516653,1.5582787998790522,0.5820943842170065,-0.7267382054472514,-0.9226423885293289,-0.9057028023363498,1.1092014134065562,-0.49366782206230925,-1.6715778191456192],[0.5784903762673174,-0.15634200951428784,0.05649621320439337,-0.5084997223090759,-0.06392337913510454,0.542862464946249,0.2606642389207156,0.9307528738010687,0.025335036355243257,0.7177416841562838,-0.28280601499362756,-0.6002251223885476,-0.09699947232669956,0.3465902428973265,0.1787790823890235,0.2237533632685186],[0.105991431931177,0.3784837485562607,0.13159754383063396,-0.7758771908814153,-1.7870467365370832,0.8736923549910894,0.4725111599843933,-0.014680995211720727,-0.4737222708440856,-0.7123991566005755,0.3694281644380767,0.7212845424491161,0.4298337020182026,0.30381519061104256,-0.7064749182896611,0.2620945969468635],[0.568069630527369,-1.3386823026920927,-1.3847756094512242,1.2709080577483016,0.3275731095882902,-0.9324431798241535,-0.2043163510855725,0.08944050297043375,0.41847830808140407,0.5072217138463596,0.05511197853355679,0.2001762313838728,-0.3593273020419004,-0.289035279592588,-0.14047621972042984,0.0016163176749725075],[-0.8699432369683022,0.6689974293363571,0.48160630255051684,-0.16115484079964143,0.7287937168533632,-0.10457074801073071,-0.9002767164919991,0.27197673577460174,-0.3006042250621264,-0.3927036605023912,-0.8255769899199433,0.8233769788861179,0.39058334099682135,1.9773327420529,0.24430792112595445,-0.7120479324600191]]; const b1=[0.16262411768897542,0.4771760675628622,-0.5921143569086456,0.3316713848943774,0.7607667990049766,-1.1563884236680728]; const W2=[[0.8108386762943757,-0.05736924677092628,-0.02255410650129338,0.2964382089772102,-2.053337750394884,0.09092323699653705],[-0.01697493108159974,-1.3305654035195806,-0.3301313891092976,0.8486531761841115,-0.8479251687292991,-0.1427946173390841],[-1.4750152567085764,-0.38269010498117934,-0.24935557978381998,-0.5591791583269531,0.3361802541553191,-0.23247876771972847],[1.3191826415195582,0.7597210472084561,-0.03104787717320927,0.17675738749264208,-0.16657722226238672,-0.9427536502899323],[0.4490826357297029,-0.15924928741149882,0.01000670973505335,0.22677659598726463,1.3701492698819682,0.21090100081060298]]; const b2=[1.290842747172045,-0.3239858211461083,-0.5910338990819436,-0.2690156358141866,0.1506404549096001];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.7928332500451014,0.7837253804138238,0.9927793990657496,-0.5135691735110828,0.06240420596103444,-0.12122600060130437,0.36661158794989995,0.7547968248677038,-1.528665357056559,0.2787795718975127,-1.1430208095752963,0.24170211210940468,-0.11881864446242865,0.7660264433182065,-0.39798396316018037,-0.5639592575081511],[-0.046609254857885155,-0.6720506497364476,-0.8281067702081361,0.627208415658241,-0.12849245171701767,-1.0028002398666183,-0.7574235359539095,-0.36817934643516653,1.5582787998790522,0.5820943842170065,-0.7267382054472514,-0.9226423885293289,-0.9057028023363498,1.1092014134065562,-0.49366782206230925,-1.6715778191456192],[0.5784903762673174,-0.15634200951428784,0.05649621320439337,-0.5084997223090759,-0.06392337913510454,0.542862464946249,0.2606642389207156,0.9307528738010687,0.025335036355243257,0.7177416841562838,-0.28280601499362756,-0.6002251223885476,-0.09699947232669956,0.3465902428973265,0.1787790823890235,0.2237533632685186],[0.105991431931177,0.3784837485562607,0.13159754383063396,-0.7758771908814153,-1.7870467365370832,0.8736923549910894,0.4725111599843933,-0.014680995211720727,-0.4737222708440856,-0.7123991566005755,0.3694281644380767,0.7212845424491161,0.4298337020182026,0.30381519061104256,-0.7064749182896611,0.2620945969468635],[0.568069630527369,-1.3386823026920927,-1.3847756094512242,1.2709080577483016,0.3275731095882902,-0.9324431798241535,-0.2043163510855725,0.08944050297043375,0.41847830808140407,0.5072217138463596,0.05511197853355679,0.2001762313838728,-0.3593273020419004,-0.289035279592588,-0.14047621972042984,0.0016163176749725075],[-0.8699432369683022,0.6689974293363571,0.48160630255051684,-0.16115484079964143,0.7287937168533632,-0.10457074801073071,-0.9002767164919991,0.27197673577460174,-0.3006042250621264,-0.3927036605023912,-0.8255769899199433,0.8233769788861179,0.39058334099682135,1.9773327420529,0.24430792112595445,-0.7120479324600191]]; const b1=[0.16262411768897542,0.4771760675628622,-0.5921143569086456,0.3316713848943774,0.7607667990049766,-1.1563884236680728]; const W2=[[0.8108386762943757,-0.05736924677092628,-0.02255410650129338,0.2964382089772102,-2.053337750394884,0.09092323699653705],[-0.01697493108159974,-1.3305654035195806,-0.3301313891092976,0.8486531761841115,-0.8479251687292991,-0.1427946173390841],[-1.4750152567085764,-0.38269010498117934,-0.24935557978381998,-0.5591791583269531,0.3361802541553191,-0.23247876771972847],[1.3191826415195582,0.7597210472084561,-0.03104787717320927,0.17675738749264208,-0.16657722226238672,-0.9427536502899323],[0.4490826357297029,-0.15924928741149882,0.01000670973505335,0.22677659598726463,1.3701492698819682,0.21090100081060298]]; const b2=[1.290842747172045,-0.3239858211461083,-0.5910338990819436,-0.2690156358141866,0.1506404549096001];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.009360576390821107,0.12387260242123971,0.9188525760733917,-0.03923005621283472,-0.7860480724600944,-0.34759797463428455,-0.3014449477006124,-0.8374533464717626,0.43356253290864505,-0.7054458262391752,1.177668189713025,0.9270578921975494,-0.5687740503695586,0.6417909210257869,-0.9296884242438437,0.4728006858334941],[-1.1949401836894866,0.400457925001943,1.1742637762349215,-1.0296579726376063,1.1997004585501065,-0.5283430657340816,-0.6051749309208032,0.0582588316871106,1.4622975811529573,0.2704482542338198,-0.31642578277208416,0.06630327130066915,0.06374425758817187,1.1258385076562134,-0.3317204530347693,0.24411782386598257],[-0.5856548559471711,0.5816789693837783,0.9959885036640852,0.9703413716504973,-0.7334719908723913,-0.3065633040352065,-0.30201865326843225,-0.1057705733076808,-0.6640738941528073,-0.20435423042171344,-1.1164944116684452,0.2800799790475338,-1.6169616727487248,0.3686468179189245,0.41617790663797416,0.6054188723702437],[-0.11612077583960163,-0.2848016241434469,0.3357071119428395,-0.13302503013940606,-0.5502571163521217,0.2408786103571584,0.17597351451054405,0.779663556226897,0.6331693312241184,0.7536841160024655,-0.9043307149419851,-0.6036732802178341,0.3027954805919732,-0.7148762286166923,1.6738671534065994,0.5127478119419725],[-1.0045995779165262,0.8338818790237492,-1.1006222925556741,0.3088748009571889,-0.04466039442509574,0.8351055902323248,-0.465709001028884,0.532149037492799,-0.1760867039349309,0.595846706957023,0.8473549026651531,-0.062347083258510405,-0.6991884427735502,-0.15557021380746563,0.2520011185251336,-0.16145653315727687],[-0.5066399890349356,0.4491630782173847,0.20891017557506103,0.22799023489639195,0.053370865660822,0.1216443917468371,-0.28527568276815346,1.3200090869931125,1.2164976685675617,-0.23271104613484817,-0.297389539785063,0.4993624826484011,-0.11008746330926657,-0.171844521969163,-0.16584800099657016,0.1452857741292703]]; const b1=[0.528988329175332,1.5038845185968392,-0.07856417942925278,0.08931855157647617,0.19104257263695637,0.5483268241548569]; const W2=[[-0.1415370571281907,-0.05170255020599002,-0.010604911774742098,-0.6349264253351352,-0.5766810950484429,-0.2262531727624172],[0.6588333859626858,0.9533593977104353,0.5006158805067283,0.24283042042592234,-1.2381708138528074,-0.7651917186266197],[0.051537797029676403,1.0158696361039639,-0.12723583506048017,0.24212928583003313,0.03441471105137199,1.2022224873706866],[-0.7171535449671305,-0.2105012743184938,0.5091927192024056,0.6197248506310076,0.1902260261797828,-0.12794136598920539],[0.2781821653849168,0.6672232364814147,-0.12431039056885965,-0.8267107336830544,-0.3234250001662017,0.1380390299673875]]; const b2=[-0.005365179252443142,0.6585394162294844,-0.08481630412942573,0.16683654102521464,-0.07177535940585368];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.7928332500451014,0.7837253804138238,0.9927793990657496,-0.5135691735110828,0.06240420596103444,-0.12122600060130437,0.36661158794989995,0.7547968248677038,-1.528665357056559,0.2787795718975127,-1.1430208095752963,0.24170211210940468,-0.11881864446242865,0.7660264433182065,-0.39798396316018037,-0.5639592575081511],[-0.046609254857885155,-0.6720506497364476,-0.8281067702081361,0.627208415658241,-0.12849245171701767,-1.0028002398666183,-0.7574235359539095,-0.36817934643516653,1.5582787998790522,0.5820943842170065,-0.7267382054472514,-0.9226423885293289,-0.9057028023363498,1.1092014134065562,-0.49366782206230925,-1.6715778191456192],[0.5784903762673174,-0.15634200951428784,0.05649621320439337,-0.5084997223090759,-0.06392337913510454,0.542862464946249,0.2606642389207156,0.9307528738010687,0.025335036355243257,0.7177416841562838,-0.28280601499362756,-0.6002251223885476,-0.09699947232669956,0.3465902428973265,0.1787790823890235,0.2237533632685186],[0.105991431931177,0.3784837485562607,0.13159754383063396,-0.7758771908814153,-1.7870467365370832,0.8736923549910894,0.4725111599843933,-0.014680995211720727,-0.4737222708440856,-0.7123991566005755,0.3694281644380767,0.7212845424491161,0.4298337020182026,0.30381519061104256,-0.7064749182896611,0.2620945969468635],[0.568069630527369,-1.3386823026920927,-1.3847756094512242,1.2709080577483016,0.3275731095882902,-0.9324431798241535,-0.2043163510855725,0.08944050297043375,0.41847830808140407,0.5072217138463596,0.05511197853355679,0.2001762313838728,-0.3593273020419004,-0.289035279592588,-0.14047621972042984,0.0016163176749725075],[-0.8699432369683022,0.6689974293363571,0.48160630255051684,-0.16115484079964143,0.7287937168533632,-0.10457074801073071,-0.9002767164919991,0.27197673577460174,-0.3006042250621264,-0.3927036605023912,-0.8255769899199433,0.8233769788861179,0.39058334099682135,1.9773327420529,0.24430792112595445,-0.7120479324600191]]; const b1=[0.16262411768897542,0.4771760675628622,-0.5921143569086456,0.3316713848943774,0.7607667990049766,-1.1563884236680728]; const W2=[[0.8108386762943757,-0.05736924677092628,-0.02255410650129338,0.2964382089772102,-2.053337750394884,0.09092323699653705],[-0.01697493108159974,-1.3305654035195806,-0.3301313891092976,0.8486531761841115,-0.8479251687292991,-0.1427946173390841],[-1.4750152567085764,-0.38269010498117934,-0.24935557978381998,-0.5591791583269531,0.3361802541553191,-0.23247876771972847],[1.3191826415195582,0.7597210472084561,-0.03104787717320927,0.17675738749264208,-0.16657722226238672,-0.9427536502899323],[0.4490826357297029,-0.15924928741149882,0.01000670973505335,0.22677659598726463,1.3701492698819682,0.21090100081060298]]; const b2=[1.290842747172045,-0.3239858211461083,-0.5910338990819436,-0.2690156358141866,0.1506404549096001];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}