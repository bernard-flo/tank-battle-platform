function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6231701683180979,-0.10055840856688153,0.036002104785456124,-0.29334692698439996,-0.11247671596274782,-0.34863436562655814,0.445683730259556,-0.42843408430276436,-1.1360208039851427,-0.12609482854821694,-0.8190972039214752,0.5652334759807741,-0.3338036582882955,0.5666169500026647,0.15902925862616857,0.012361569163230224],[-0.3910552169972263,-0.4303499907403196,-0.5405496857587387,-0.11855138279830083,-0.38426385623205533,0.14217134024704633,0.1491741145749692,0.8944094987630415,-0.07077942096276763,0.522834229289184,-0.4399081141756367,0.1729781728949591,-0.7188188663446663,-0.12555459267611452,-0.4040177612085356,-0.18520213146720207],[0.10247437433226109,-0.43239180357336515,0.4477035750674212,-0.1674930826974947,-0.4173277012836453,0.7167542441102683,-0.1021259893756722,0.12974395634004154,-0.4333669795626134,0.6814427681272632,0.2636909272741353,-0.41452037617401355,0.24171566425576319,0.6168980588888404,-0.4186620504123146,-0.7104607225246011],[0.10401247891043043,0.10712981288459716,-0.47538312671186833,-0.23879855581144535,-0.6205880725874283,-0.14140587902153587,-0.10504550808205443,0.16035566244864563,-1.5147670997474925,-0.6268632959892713,-0.1250418222503084,0.6036826381681715,0.10908761108623227,-0.011648119282325065,-0.060600854269600435,-0.02045063315155274],[0.19949857084510608,-0.31382649333609997,-0.6941103246296836,0.6056329639083706,-0.12961132653707164,-0.7091014435531056,-0.5233812556061223,-1.0389879621762805,0.08965437438648863,0.18519286589077716,-0.09564975941642773,-0.8742251009919888,-0.22770376704433717,0.05525904589484973,0.332616655922591,0.6101906908398534],[0.2394164741819219,-0.37838886817252726,0.8162450835346055,-0.3501447945027917,0.705708941363795,0.9130268862949533,0.31431914197964106,0.2181701209369157,-0.009247505144319712,-0.26838170653572246,-0.5629620154749452,0.2711644059411704,0.4708736870511168,0.9409676739624036,0.07323660864120551,-0.5728914488548086]]; const b1=[0.18888997853618578,-0.2787010913529671,0.022978872353286772,-0.032238867350253775,0.7825363402640424,-0.45459152339971926]; const W2=[[0.580000705916544,-0.7237325230502081,-0.37756110806910725,0.3093981692611727,-0.7385157165428082,0.12404357031997994],[0.12425423272116445,-0.7570359488084591,0.3939966469899755,-0.16426451311108067,-0.5225276376757593,0.3921232921186323],[-0.7339828681425522,0.34231604401211035,-0.11920786553818592,-0.483728144826974,-0.1723328331222129,0.016441511857702207],[0.4443759914544828,-0.15700589964802605,-0.4004686711896175,0.008825294092227987,-0.3739752940206666,0.1367605627225802],[1.0227152933157502,-0.8097968387754138,0.4114379456275439,-0.8365831362053253,0.6427131538264206,-0.3612398488716019]]; const b2=[0.49046463084200365,-0.2642564362608194,0.09050515940436983,0.2289067996081281,-0.07260740535268323];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.4237500619233396,-0.03041102813168098,-0.6151138223989455,-0.5443818087161756,-0.10810882342103989,0.27690774980791033,0.46184868537356466,0.34275420575652793,0.2971646818967566,0.14579354483360835,0.21079832002510965,0.11436052535720255,-0.025706535710258938,-0.03229802183894509,1.007579480890705,0.16695319637535297],[0.366663446029623,-0.2674787360544102,0.08758905619141366,-0.027603249546269748,-0.7581605884892502,0.014300885455434106,0.6162908079667737,0.07212833646827538,0.24784211220288827,-0.1397167513479304,-0.36572202118226455,-0.06253156004335703,0.7526198780295068,-0.10144171866519239,-0.3959123041614336,-0.9924396684367218],[0.026819599881437346,0.38239201202528117,-0.6229107353354288,-0.053946687578730564,-0.49120812614461606,-0.9942883288549883,-1.1345784449014955,0.44331145899783736,-0.13229686368288784,0.19341113317702444,-0.19500656054107965,0.40387333439722245,0.14768117699482286,-0.3402914795822569,-0.547290085833878,0.4487348143472108],[-0.3177610964603283,0.6083765683416814,-0.4610625609520232,0.5174557547649776,0.3259801768399026,0.33413003651990225,-0.24095387021897247,-0.1578254264823159,0.4295075166672797,0.2526567610418028,-0.34713682924058575,0.951726247600401,0.08816859347455111,1.2724184698171492,0.30286975363015056,-0.3571406689644818],[-0.36891109933400107,-0.1515713263993166,-0.27960686086184455,0.6647230281503986,0.304480827833969,-0.8098999638259257,-0.08477880533121021,-0.4058303478355857,0.21587233494735591,0.6335058728087064,0.2901589635478253,0.07007027980553579,-0.13271380055849763,-0.12572629882501965,-0.25306789131848206,0.25857399905161427],[-0.46524232361608947,-0.3545791690782497,-0.09676792118460667,0.6984576414010624,-0.13506339568729783,-0.3203102607644446,0.22297841001607988,1.1211174375231219,0.008401928588845226,0.17798183547695628,-0.032846561353763126,0.31284660913858825,-0.3869142008664902,-0.47734853179292114,0.3325862019270631,0.9713284183027886]]; const b1=[0.29376862072808013,0.13312571051225067,0.17593113768699845,0.320779163373891,-0.18091385568402568,0.1306709520060784]; const W2=[[-0.1765188788372007,0.07538509209935733,0.21850647082678576,-0.4076733323687723,-0.15887772405644698,0.034354942325061304],[0.2941382112451834,-0.2954594647287447,0.34508880309778855,0.25132148789818454,0.02480874952659584,-0.06442847087802289],[0.5340011934761747,0.34664070405246894,0.34838937906479395,1.0778319982486768,-0.027616241479277936,-0.6379533266289988],[-1.1393437769800476,-1.0060787761998886,0.6398097761119881,-0.3211316728574615,-0.7262042193675255,-1.02023795216583],[0.12725535041586217,0.09239351123170059,-0.10757594491207614,0.17677570164631162,1.0683698345016686,0.6624289097341773]]; const b2=[0.3077996443537668,0.7441399658364428,-0.3087953796661831,-0.29347528179860466,0.22588044150447836];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.4237500619233396,-0.03041102813168098,-0.6151138223989455,-0.5443818087161756,-0.10810882342103989,0.27690774980791033,0.46184868537356466,0.34275420575652793,0.2971646818967566,0.14579354483360835,0.21079832002510965,0.11436052535720255,-0.025706535710258938,-0.03229802183894509,1.007579480890705,0.16695319637535297],[0.366663446029623,-0.2674787360544102,0.08758905619141366,-0.027603249546269748,-0.7581605884892502,0.014300885455434106,0.6162908079667737,0.07212833646827538,0.24784211220288827,-0.1397167513479304,-0.36572202118226455,-0.06253156004335703,0.7526198780295068,-0.10144171866519239,-0.3959123041614336,-0.9924396684367218],[0.026819599881437346,0.38239201202528117,-0.6229107353354288,-0.053946687578730564,-0.49120812614461606,-0.9942883288549883,-1.1345784449014955,0.44331145899783736,-0.13229686368288784,0.19341113317702444,-0.19500656054107965,0.40387333439722245,0.14768117699482286,-0.3402914795822569,-0.547290085833878,0.4487348143472108],[-0.3177610964603283,0.6083765683416814,-0.4610625609520232,0.5174557547649776,0.3259801768399026,0.33413003651990225,-0.24095387021897247,-0.1578254264823159,0.4295075166672797,0.2526567610418028,-0.34713682924058575,0.951726247600401,0.08816859347455111,1.2724184698171492,0.30286975363015056,-0.3571406689644818],[-0.36891109933400107,-0.1515713263993166,-0.27960686086184455,0.6647230281503986,0.304480827833969,-0.8098999638259257,-0.08477880533121021,-0.4058303478355857,0.21587233494735591,0.6335058728087064,0.2901589635478253,0.07007027980553579,-0.13271380055849763,-0.12572629882501965,-0.25306789131848206,0.25857399905161427],[-0.46524232361608947,-0.3545791690782497,-0.09676792118460667,0.6984576414010624,-0.13506339568729783,-0.3203102607644446,0.22297841001607988,1.1211174375231219,0.008401928588845226,0.17798183547695628,-0.032846561353763126,0.31284660913858825,-0.3869142008664902,-0.47734853179292114,0.3325862019270631,0.9713284183027886]]; const b1=[0.29376862072808013,0.13312571051225067,0.17593113768699845,0.320779163373891,-0.18091385568402568,0.1306709520060784]; const W2=[[-0.1765188788372007,0.07538509209935733,0.21850647082678576,-0.4076733323687723,-0.15887772405644698,0.034354942325061304],[0.2941382112451834,-0.2954594647287447,0.34508880309778855,0.25132148789818454,0.02480874952659584,-0.06442847087802289],[0.5340011934761747,0.34664070405246894,0.34838937906479395,1.0778319982486768,-0.027616241479277936,-0.6379533266289988],[-1.1393437769800476,-1.0060787761998886,0.6398097761119881,-0.3211316728574615,-0.7262042193675255,-1.02023795216583],[0.12725535041586217,0.09239351123170059,-0.10757594491207614,0.17677570164631162,1.0683698345016686,0.6624289097341773]]; const b2=[0.3077996443537668,0.7441399658364428,-0.3087953796661831,-0.29347528179860466,0.22588044150447836];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6231701683180979,-0.10055840856688153,0.036002104785456124,-0.29334692698439996,-0.11247671596274782,-0.34863436562655814,0.445683730259556,-0.42843408430276436,-1.1360208039851427,-0.12609482854821694,-0.8190972039214752,0.5652334759807741,-0.3338036582882955,0.5666169500026647,0.15902925862616857,0.012361569163230224],[-0.3910552169972263,-0.4303499907403196,-0.5405496857587387,-0.11855138279830083,-0.38426385623205533,0.14217134024704633,0.1491741145749692,0.8944094987630415,-0.07077942096276763,0.522834229289184,-0.4399081141756367,0.1729781728949591,-0.7188188663446663,-0.12555459267611452,-0.4040177612085356,-0.18520213146720207],[0.10247437433226109,-0.43239180357336515,0.4477035750674212,-0.1674930826974947,-0.4173277012836453,0.7167542441102683,-0.1021259893756722,0.12974395634004154,-0.4333669795626134,0.6814427681272632,0.2636909272741353,-0.41452037617401355,0.24171566425576319,0.6168980588888404,-0.4186620504123146,-0.7104607225246011],[0.10401247891043043,0.10712981288459716,-0.47538312671186833,-0.23879855581144535,-0.6205880725874283,-0.14140587902153587,-0.10504550808205443,0.16035566244864563,-1.5147670997474925,-0.6268632959892713,-0.1250418222503084,0.6036826381681715,0.10908761108623227,-0.011648119282325065,-0.060600854269600435,-0.02045063315155274],[0.19949857084510608,-0.31382649333609997,-0.6941103246296836,0.6056329639083706,-0.12961132653707164,-0.7091014435531056,-0.5233812556061223,-1.0389879621762805,0.08965437438648863,0.18519286589077716,-0.09564975941642773,-0.8742251009919888,-0.22770376704433717,0.05525904589484973,0.332616655922591,0.6101906908398534],[0.2394164741819219,-0.37838886817252726,0.8162450835346055,-0.3501447945027917,0.705708941363795,0.9130268862949533,0.31431914197964106,0.2181701209369157,-0.009247505144319712,-0.26838170653572246,-0.5629620154749452,0.2711644059411704,0.4708736870511168,0.9409676739624036,0.07323660864120551,-0.5728914488548086]]; const b1=[0.18888997853618578,-0.2787010913529671,0.022978872353286772,-0.032238867350253775,0.7825363402640424,-0.45459152339971926]; const W2=[[0.580000705916544,-0.7237325230502081,-0.37756110806910725,0.3093981692611727,-0.7385157165428082,0.12404357031997994],[0.12425423272116445,-0.7570359488084591,0.3939966469899755,-0.16426451311108067,-0.5225276376757593,0.3921232921186323],[-0.7339828681425522,0.34231604401211035,-0.11920786553818592,-0.483728144826974,-0.1723328331222129,0.016441511857702207],[0.4443759914544828,-0.15700589964802605,-0.4004686711896175,0.008825294092227987,-0.3739752940206666,0.1367605627225802],[1.0227152933157502,-0.8097968387754138,0.4114379456275439,-0.8365831362053253,0.6427131538264206,-0.3612398488716019]]; const b2=[0.49046463084200365,-0.2642564362608194,0.09050515940436983,0.2289067996081281,-0.07260740535268323];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.05271343726395493,-0.14465435793019646,0.2380087172783585,0.4652951349387991,-0.08243597577232203,-0.016728295126636095,-0.2627512042771908,0.5461199311090762,0.4485851696938702,-0.17237068181206036,-0.2788221632701372,0.6837356711612728,-0.7285024913423216,0.19499730400358467,-0.34814925491744886,-0.12341140518633692],[-0.3475257009025022,-0.945734853740326,-0.5360589478025894,-0.09170203616727637,0.3905490348690822,-0.16030645658454365,-0.3479349174452468,-0.3152533389217299,1.015071926445159,0.7966445958482593,0.46142588567006715,0.15041660154927297,-0.21483996564554977,0.32210638502642586,0.5418261966416095,0.6810033117206052],[-0.5141163674707903,-0.019384612976133253,0.43767018591335266,-0.2338425102385118,-0.005502863658048446,-0.4371811766535231,-0.8364747548638162,0.7529217358405799,-0.0652561340946089,-0.15024330647158074,-0.6925816728414869,0.06516927996862032,-0.31953912786088906,0.410231834687114,-0.5383096313957203,0.3216401802689478],[-0.638329149798464,0.48740381730955745,0.3215658760222043,-0.40645456593275053,-0.9661920036894204,0.26466883292990095,-0.24120894755172934,0.47503184620784833,0.5673959232424733,1.0782764619465217,-0.07243627186332546,-0.1137345239851739,-0.251389287888112,-0.40340942418501113,0.3705715800217318,-1.0337162321701654],[-1.354363623400198,0.8372991463171766,0.022202910373720797,-0.7078801544100557,-0.13819916458700102,0.4107027062404745,-0.7034311514509031,0.5361569457612226,-0.2570482896639111,0.23477141963471318,-0.18629257104510238,0.2693336721515058,0.04358892901724276,-0.35838358592413766,-0.22195826548423403,0.8396015896203091],[-0.19117299830912426,-0.4080609967026919,-0.44550629883491377,0.3283890249351473,-1.0319444185228852,0.022230026200036,-0.23198403934199255,-0.18674603206652923,-0.0625089053389509,-0.03204959310444147,-0.7446808354920187,-0.15986820543468624,-0.12137925498470356,-0.12952230124325187,-0.45536132187400596,-0.11647013659977892]]; const b1=[-0.3930325747377877,-0.1831502227912824,-0.10616741329639093,0.025401591098022838,-0.6279237909591031,-0.06927404413865956]; const W2=[[-0.04655465433542255,-0.03844881907367649,-0.007373519409951235,-0.00708807194623054,-0.36934330629477086,0.3874725482281256],[0.3165039090272129,1.28493744591063,0.3720935837126693,0.46160596706181206,0.15814320606092347,-0.09911276815280273],[-0.029927144503426484,0.4165907138312194,0.19776811832173555,0.32069619707020336,0.15239440838637885,0.4299348840771539],[-0.45373010167363137,0.8779091146676867,0.026601512725343196,0.4574237000213697,0.23554081431448937,0.2050325345662464],[0.5771587880255785,-0.2509370246500147,-0.39327370774796333,0.2061981409159699,-0.5405819912713387,-0.2674387791293463]]; const b2=[0.35082230816387516,-0.001180817335979034,0.014870549340099138,-0.06291852545680185,0.2768850529104826];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6231701683180979,-0.10055840856688153,0.036002104785456124,-0.29334692698439996,-0.11247671596274782,-0.34863436562655814,0.445683730259556,-0.42843408430276436,-1.1360208039851427,-0.12609482854821694,-0.8190972039214752,0.5652334759807741,-0.3338036582882955,0.5666169500026647,0.15902925862616857,0.012361569163230224],[-0.3910552169972263,-0.4303499907403196,-0.5405496857587387,-0.11855138279830083,-0.38426385623205533,0.14217134024704633,0.1491741145749692,0.8944094987630415,-0.07077942096276763,0.522834229289184,-0.4399081141756367,0.1729781728949591,-0.7188188663446663,-0.12555459267611452,-0.4040177612085356,-0.18520213146720207],[0.10247437433226109,-0.43239180357336515,0.4477035750674212,-0.1674930826974947,-0.4173277012836453,0.7167542441102683,-0.1021259893756722,0.12974395634004154,-0.4333669795626134,0.6814427681272632,0.2636909272741353,-0.41452037617401355,0.24171566425576319,0.6168980588888404,-0.4186620504123146,-0.7104607225246011],[0.10401247891043043,0.10712981288459716,-0.47538312671186833,-0.23879855581144535,-0.6205880725874283,-0.14140587902153587,-0.10504550808205443,0.16035566244864563,-1.5147670997474925,-0.6268632959892713,-0.1250418222503084,0.6036826381681715,0.10908761108623227,-0.011648119282325065,-0.060600854269600435,-0.02045063315155274],[0.19949857084510608,-0.31382649333609997,-0.6941103246296836,0.6056329639083706,-0.12961132653707164,-0.7091014435531056,-0.5233812556061223,-1.0389879621762805,0.08965437438648863,0.18519286589077716,-0.09564975941642773,-0.8742251009919888,-0.22770376704433717,0.05525904589484973,0.332616655922591,0.6101906908398534],[0.2394164741819219,-0.37838886817252726,0.8162450835346055,-0.3501447945027917,0.705708941363795,0.9130268862949533,0.31431914197964106,0.2181701209369157,-0.009247505144319712,-0.26838170653572246,-0.5629620154749452,0.2711644059411704,0.4708736870511168,0.9409676739624036,0.07323660864120551,-0.5728914488548086]]; const b1=[0.18888997853618578,-0.2787010913529671,0.022978872353286772,-0.032238867350253775,0.7825363402640424,-0.45459152339971926]; const W2=[[0.580000705916544,-0.7237325230502081,-0.37756110806910725,0.3093981692611727,-0.7385157165428082,0.12404357031997994],[0.12425423272116445,-0.7570359488084591,0.3939966469899755,-0.16426451311108067,-0.5225276376757593,0.3921232921186323],[-0.7339828681425522,0.34231604401211035,-0.11920786553818592,-0.483728144826974,-0.1723328331222129,0.016441511857702207],[0.4443759914544828,-0.15700589964802605,-0.4004686711896175,0.008825294092227987,-0.3739752940206666,0.1367605627225802],[1.0227152933157502,-0.8097968387754138,0.4114379456275439,-0.8365831362053253,0.6427131538264206,-0.3612398488716019]]; const b2=[0.49046463084200365,-0.2642564362608194,0.09050515940436983,0.2289067996081281,-0.07260740535268323];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}