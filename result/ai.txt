function name(){return 'Atlas';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.7660853348526088,-1.0912792413209147,0.07719676097775542,0.8698680582479588,-0.08050496366178052,0.027285242843319346,-0.08672434228595746,1.2147754805618987,0.40337436992136844,-0.6447797318447599,0.054273426180973715,1.6473977174964267,-0.8955503356482765,-0.6325210968285736,1.2657937216072705,-0.4892104131602744],[-0.6852196619890956,-1.1530102525277302,-0.8598858907845794,0.34486645921963743,1.4054079768249383,-0.9691051461969312,-0.11215885799892325,0.1853925828119203,1.0196031587686132,0.6667751957943483,0.8185773143723789,0.5532696747054454,0.7034245323003032,0.5458247581099918,1.3044380574816115,0.5838520789435715],[-0.3389910108005216,0.9495275529252706,0.9364888681277903,-0.1801452701782409,0.4765950842335487,-0.8105371018189635,0.07738848163156939,1.7092196761214447,0.14372056122909366,-0.9207925706579048,-0.458117614294739,-0.5868040386473733,-0.275331403072159,0.6881568407990155,-0.4413830252683932,-0.7089554843949676],[-0.20311829531695524,1.00141710191849,-0.08499232604075022,-0.034427940342076906,-0.32663610786901565,0.6892678503872396,0.6520380808554047,1.1687989068422437,0.39789096678371344,1.1322325781803229,0.791025785628936,-0.7398485228903003,-0.25618013092446656,-0.4732663827325608,0.09233354637908364,-0.838242291067174],[-2.9524371485433,1.3859425938833771,1.184622600762394,-0.22307637387709706,-0.2495480182591992,0.3308755949099387,-1.2979048151708,-0.3847320458515307,-0.9231824226871788,-0.1474382863767107,-0.23779056513722788,-0.009395172100093614,0.242941132129321,0.11201066487193104,0.3086457384083788,0.3435372494424668],[-0.34398073083042047,-1.0835849739686574,-0.5192138530171111,-0.26295189133292485,-1.1168502410636267,0.4362694775884399,-0.3241797094377606,0.6837003405154121,0.7884461462109481,0.3280221468272001,-0.11488647158694815,-0.3960472946614477,-0.822821402719443,0.2726346688171833,-0.6150960158064893,-1.5386820029751405]]; const b1=[-0.0384586759289718,-0.6168204277769767,-0.5576576073935468,-1.2080780764529289,-0.6295600385354583,-0.15840705802622407]; const W2=[[-0.5054717789231619,0.763255824684317,0.6055719297962431,-0.4774676280154878,-1.571741725774424,0.4666762749369571],[0.5728443050008758,1.323827388310858,0.7622817275150807,0.2687224436866108,-0.9793338197326108,0.3407972576743918],[-0.5083852945316597,-0.002794327994448162,-0.37106421459687844,0.13327276524852236,0.1457750257309444,0.3620695706867531],[-0.616483295906864,0.044943517745466864,1.2745311441151024,1.235355163203534,1.0105828569370603,-0.3401522307688776],[1.3267250892092362,-0.33604547674936425,0.11447657788512751,0.44892716959709944,-0.5659547245421136,-0.45501810309268664]]; const b2=[1.0002082412852469,-0.6905095025675645,-0.9322280445737127,-1.2103115802033506,0.5271166638205873];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.030132773729292326,-0.23950406063697793,-0.4769037596629058,-0.8928055685036215,-0.5613362885638618,0.18523637713960184,0.7366670958724147,0.043815107336303165,-0.7604163737206231,-0.9092610864950312,0.15911379779333895,-0.42762848316759444,-0.38001446186643323,0.12327969304781372,1.0351549297532552,1.0183698364935365],[0.47247160317041753,-0.36989743518956686,0.5926949033247102,0.07189572508420555,0.30707327519005406,0.4411507347619291,0.8651452718667196,-1.0155485511703075,0.5184433824170708,-0.12886189719916769,-1.517505310070161,-0.39908565953898256,0.7463026263854681,0.4357341710543928,-0.8393541177493345,0.15679695016496287],[1.2083971188473064,0.1631991853863906,0.11288329563803587,-0.6834810147726389,-0.014468963248900978,-0.8531902364568309,-0.9890399600698687,0.5509369869870893,0.4661401995012903,-0.1809538684553562,0.1662476826152795,0.3183301735398305,0.6945946433975286,0.1404066588346686,-0.8756632096826438,0.6674942116040681],[-0.24932531519184153,0.5924639748703987,-0.567665959225544,1.932463528664319,1.0574155446777929,0.342911571400316,-0.5542300308595076,-0.39117418277309407,1.418704473698618,-0.18214929683777564,-0.58537822859647,0.9402529721635655,0.9442861108988586,0.7708419138691507,0.5051100613610691,-0.7455471956790326],[-0.07298504967399766,-0.06853033553555737,-0.9105376397472795,0.9420373696509781,0.04968246165417875,-0.7620074723946499,0.756222967295814,-0.44135937465450303,0.39361811173722205,-0.11533648662288826,0.523256624794422,0.35724669463403824,0.747035333466499,0.3211377467621688,0.7920002546666364,0.6699502691918835],[-0.010836184614938788,-0.04782777105640326,-0.618871398001222,0.9347702705184215,0.1730465919091218,0.4743682555808266,-0.4954741604442715,1.9592657455996543,-0.8722943261320246,-0.7102831704911298,0.41598193094903574,0.4036449755479563,-1.0497785534827657,-0.7129609457801165,0.1549509454602208,1.4185170011749741]]; const b1=[-0.9649374765782648,0.32194909787542725,0.1404454750238865,-0.18372620151126864,-0.05624577504267276,-0.6228545771465148]; const W2=[[0.12021584074265942,0.2602260637613812,-0.2058468627924528,-0.28621025548685963,0.1141319104660232,0.23813430441306238],[0.6519642239154154,-0.01840973294293958,0.9345937980217329,0.11677765754230023,0.33941602925340736,-0.2712050212930604],[0.9536701860088782,0.6503139302975656,0.24456993824054604,1.1626200604610786,0.7609956179620136,-0.36048597146611816],[-1.1163358553316265,-0.43651667712822995,-0.10493494660820007,-0.016197460842217126,-0.08700981675800823,-0.7270849927260116],[-0.536989564210832,-0.4217596836358839,-0.5845408575253922,-0.04399789221386577,1.5320757901725406,-0.12608928681755377]]; const b2=[1.5382237441539295,1.6352987254303626,-0.22238062441349654,-0.2810689642849651,-0.41191036312643253];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.030132773729292326,-0.23950406063697793,-0.4769037596629058,-0.8928055685036215,-0.5613362885638618,0.18523637713960184,0.7366670958724147,0.043815107336303165,-0.7604163737206231,-0.9092610864950312,0.15911379779333895,-0.42762848316759444,-0.38001446186643323,0.12327969304781372,1.0351549297532552,1.0183698364935365],[0.47247160317041753,-0.36989743518956686,0.5926949033247102,0.07189572508420555,0.30707327519005406,0.4411507347619291,0.8651452718667196,-1.0155485511703075,0.5184433824170708,-0.12886189719916769,-1.517505310070161,-0.39908565953898256,0.7463026263854681,0.4357341710543928,-0.8393541177493345,0.15679695016496287],[1.2083971188473064,0.1631991853863906,0.11288329563803587,-0.6834810147726389,-0.014468963248900978,-0.8531902364568309,-0.9890399600698687,0.5509369869870893,0.4661401995012903,-0.1809538684553562,0.1662476826152795,0.3183301735398305,0.6945946433975286,0.1404066588346686,-0.8756632096826438,0.6674942116040681],[-0.24932531519184153,0.5924639748703987,-0.567665959225544,1.932463528664319,1.0574155446777929,0.342911571400316,-0.5542300308595076,-0.39117418277309407,1.418704473698618,-0.18214929683777564,-0.58537822859647,0.9402529721635655,0.9442861108988586,0.7708419138691507,0.5051100613610691,-0.7455471956790326],[-0.07298504967399766,-0.06853033553555737,-0.9105376397472795,0.9420373696509781,0.04968246165417875,-0.7620074723946499,0.756222967295814,-0.44135937465450303,0.39361811173722205,-0.11533648662288826,0.523256624794422,0.35724669463403824,0.747035333466499,0.3211377467621688,0.7920002546666364,0.6699502691918835],[-0.010836184614938788,-0.04782777105640326,-0.618871398001222,0.9347702705184215,0.1730465919091218,0.4743682555808266,-0.4954741604442715,1.9592657455996543,-0.8722943261320246,-0.7102831704911298,0.41598193094903574,0.4036449755479563,-1.0497785534827657,-0.7129609457801165,0.1549509454602208,1.4185170011749741]]; const b1=[-0.9649374765782648,0.32194909787542725,0.1404454750238865,-0.18372620151126864,-0.05624577504267276,-0.6228545771465148]; const W2=[[0.12021584074265942,0.2602260637613812,-0.2058468627924528,-0.28621025548685963,0.1141319104660232,0.23813430441306238],[0.6519642239154154,-0.01840973294293958,0.9345937980217329,0.11677765754230023,0.33941602925340736,-0.2712050212930604],[0.9536701860088782,0.6503139302975656,0.24456993824054604,1.1626200604610786,0.7609956179620136,-0.36048597146611816],[-1.1163358553316265,-0.43651667712822995,-0.10493494660820007,-0.016197460842217126,-0.08700981675800823,-0.7270849927260116],[-0.536989564210832,-0.4217596836358839,-0.5845408575253922,-0.04399789221386577,1.5320757901725406,-0.12608928681755377]]; const b2=[1.5382237441539295,1.6352987254303626,-0.22238062441349654,-0.2810689642849651,-0.41191036312643253];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.6976694647048611,-0.8674340319436884,0.3003644012502843,-0.727916319124236,0.4464478992252575,-0.9123882959215219,1.1751274173343051,-1.2509484929103856,-1.1289623107231646,0.07555142062877697,-1.2670771190015886,0.6572583258122036,-0.2979085418263651,0.8813670136140186,-0.15725375273319092,0.2548901605223976],[-0.9897251420600974,-0.44326292969255093,-1.012103335295518,0.7165347343906291,0.10848065142596608,-0.09453385998482823,0.34416530346219354,0.7142728570494659,0.5244687116091565,-0.29712912255420915,-0.1661665922191782,0.23422794832829424,-0.0010358794854717357,-0.08741248210369221,0.48578789588375565,-0.5411418035998308],[0.3910923813050916,-1.001594178934275,0.10911330322502999,0.8233451298005359,-0.22553123031543096,-0.21719690313274992,-0.1266298339973784,0.5831122002890823,-0.4348758273593981,-0.2794407110369431,1.5818459463668326,-1.0931576965654288,0.2776073216993086,0.9694305569540647,0.26011892543837245,-1.0686793140346722],[-0.3406119603029791,-0.43882769276444683,0.6298928858044937,-0.8239058218855967,-1.8121244973849815,-0.023313584937414734,-0.3664859732426697,-0.10512109760711798,-1.7272548530438343,-1.0197632377737365,-0.6817359515581797,0.895199846058575,-0.6683301597275326,-0.19735262649041774,-0.05825716026853075,0.5878884154977168],[0.16090961114877905,-0.1390458377244426,-0.09688127340881088,0.5741242428569506,-0.4502042309290196,-0.32327296154298074,0.21464305452525373,-1.4121941279325845,-0.12889812564723163,0.0008145673407331522,0.3100049343670017,-1.0003431384303345,-0.1881115979858755,0.3136139925201286,-0.14446963816132574,1.6507458239511543],[0.23284289411695105,-0.38816678920093695,1.0719087406561274,0.13019209743808974,1.3806092484357966,0.15309147123457378,0.18136174443982453,0.6386157342078153,0.11974254917054707,-0.0660736948785984,-0.9405628078344737,1.4175951440316612,0.7510498212291242,0.6767285244407002,0.22367352147164274,-1.8601824222716727]]; const b1=[0.3619368819083475,0.03415447160078554,-0.03424675952169878,-0.8142307618342323,0.5309376561966007,-1.1171999598795472]; const W2=[[0.9521258128627428,-1.0737630353503922,-1.1710365242061143,1.5818038413681548,-0.7453575070680473,0.3581319249309885],[0.37442539159821964,-1.0709349447716456,-0.17059836600152817,-0.1843621808597384,-1.291484254707064,0.2910447459211787],[-0.9201573383461932,-0.2048793478432316,0.6946420517246429,-1.3165390822062621,-0.5203949670069294,0.09602830027034422],[0.10716328704726871,-0.5615929012550194,-0.3591327659550734,0.3201846927082673,-0.34253657427913115,0.5304752932390688],[0.9393114033516398,-1.886628503042817,0.8844078816717197,-0.9660145304166409,0.5036905076065883,-0.17633292387047184]]; const b2=[0.3258288796453774,-0.7965828581348368,0.23495424629333878,0.7178608490446179,1.2225889592173576];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.6976694647048611,-0.8674340319436884,0.3003644012502843,-0.727916319124236,0.4464478992252575,-0.9123882959215219,1.1751274173343051,-1.2509484929103856,-1.1289623107231646,0.07555142062877697,-1.2670771190015886,0.6572583258122036,-0.2979085418263651,0.8813670136140186,-0.15725375273319092,0.2548901605223976],[-0.9897251420600974,-0.44326292969255093,-1.012103335295518,0.7165347343906291,0.10848065142596608,-0.09453385998482823,0.34416530346219354,0.7142728570494659,0.5244687116091565,-0.29712912255420915,-0.1661665922191782,0.23422794832829424,-0.0010358794854717357,-0.08741248210369221,0.48578789588375565,-0.5411418035998308],[0.3910923813050916,-1.001594178934275,0.10911330322502999,0.8233451298005359,-0.22553123031543096,-0.21719690313274992,-0.1266298339973784,0.5831122002890823,-0.4348758273593981,-0.2794407110369431,1.5818459463668326,-1.0931576965654288,0.2776073216993086,0.9694305569540647,0.26011892543837245,-1.0686793140346722],[-0.3406119603029791,-0.43882769276444683,0.6298928858044937,-0.8239058218855967,-1.8121244973849815,-0.023313584937414734,-0.3664859732426697,-0.10512109760711798,-1.7272548530438343,-1.0197632377737365,-0.6817359515581797,0.895199846058575,-0.6683301597275326,-0.19735262649041774,-0.05825716026853075,0.5878884154977168],[0.16090961114877905,-0.1390458377244426,-0.09688127340881088,0.5741242428569506,-0.4502042309290196,-0.32327296154298074,0.21464305452525373,-1.4121941279325845,-0.12889812564723163,0.0008145673407331522,0.3100049343670017,-1.0003431384303345,-0.1881115979858755,0.3136139925201286,-0.14446963816132574,1.6507458239511543],[0.23284289411695105,-0.38816678920093695,1.0719087406561274,0.13019209743808974,1.3806092484357966,0.15309147123457378,0.18136174443982453,0.6386157342078153,0.11974254917054707,-0.0660736948785984,-0.9405628078344737,1.4175951440316612,0.7510498212291242,0.6767285244407002,0.22367352147164274,-1.8601824222716727]]; const b1=[0.3619368819083475,0.03415447160078554,-0.03424675952169878,-0.8142307618342323,0.5309376561966007,-1.1171999598795472]; const W2=[[0.9521258128627428,-1.0737630353503922,-1.1710365242061143,1.5818038413681548,-0.7453575070680473,0.3581319249309885],[0.37442539159821964,-1.0709349447716456,-0.17059836600152817,-0.1843621808597384,-1.291484254707064,0.2910447459211787],[-0.9201573383461932,-0.2048793478432316,0.6946420517246429,-1.3165390822062621,-0.5203949670069294,0.09602830027034422],[0.10716328704726871,-0.5615929012550194,-0.3591327659550734,0.3201846927082673,-0.34253657427913115,0.5304752932390688],[0.9393114033516398,-1.886628503042817,0.8844078816717197,-0.9660145304166409,0.5036905076065883,-0.17633292387047184]]; const b2=[0.3258288796453774,-0.7965828581348368,0.23495424629333878,0.7178608490446179,1.2225889592173576];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.6976694647048611,-0.8674340319436884,0.3003644012502843,-0.727916319124236,0.4464478992252575,-0.9123882959215219,1.1751274173343051,-1.2509484929103856,-1.1289623107231646,0.07555142062877697,-1.2670771190015886,0.6572583258122036,-0.2979085418263651,0.8813670136140186,-0.15725375273319092,0.2548901605223976],[-0.9897251420600974,-0.44326292969255093,-1.012103335295518,0.7165347343906291,0.10848065142596608,-0.09453385998482823,0.34416530346219354,0.7142728570494659,0.5244687116091565,-0.29712912255420915,-0.1661665922191782,0.23422794832829424,-0.0010358794854717357,-0.08741248210369221,0.48578789588375565,-0.5411418035998308],[0.3910923813050916,-1.001594178934275,0.10911330322502999,0.8233451298005359,-0.22553123031543096,-0.21719690313274992,-0.1266298339973784,0.5831122002890823,-0.4348758273593981,-0.2794407110369431,1.5818459463668326,-1.0931576965654288,0.2776073216993086,0.9694305569540647,0.26011892543837245,-1.0686793140346722],[-0.3406119603029791,-0.43882769276444683,0.6298928858044937,-0.8239058218855967,-1.8121244973849815,-0.023313584937414734,-0.3664859732426697,-0.10512109760711798,-1.7272548530438343,-1.0197632377737365,-0.6817359515581797,0.895199846058575,-0.6683301597275326,-0.19735262649041774,-0.05825716026853075,0.5878884154977168],[0.16090961114877905,-0.1390458377244426,-0.09688127340881088,0.5741242428569506,-0.4502042309290196,-0.32327296154298074,0.21464305452525373,-1.4121941279325845,-0.12889812564723163,0.0008145673407331522,0.3100049343670017,-1.0003431384303345,-0.1881115979858755,0.3136139925201286,-0.14446963816132574,1.6507458239511543],[0.23284289411695105,-0.38816678920093695,1.0719087406561274,0.13019209743808974,1.3806092484357966,0.15309147123457378,0.18136174443982453,0.6386157342078153,0.11974254917054707,-0.0660736948785984,-0.9405628078344737,1.4175951440316612,0.7510498212291242,0.6767285244407002,0.22367352147164274,-1.8601824222716727]]; const b1=[0.3619368819083475,0.03415447160078554,-0.03424675952169878,-0.8142307618342323,0.5309376561966007,-1.1171999598795472]; const W2=[[0.9521258128627428,-1.0737630353503922,-1.1710365242061143,1.5818038413681548,-0.7453575070680473,0.3581319249309885],[0.37442539159821964,-1.0709349447716456,-0.17059836600152817,-0.1843621808597384,-1.291484254707064,0.2910447459211787],[-0.9201573383461932,-0.2048793478432316,0.6946420517246429,-1.3165390822062621,-0.5203949670069294,0.09602830027034422],[0.10716328704726871,-0.5615929012550194,-0.3591327659550734,0.3201846927082673,-0.34253657427913115,0.5304752932390688],[0.9393114033516398,-1.886628503042817,0.8844078816717197,-0.9660145304166409,0.5036905076065883,-0.17633292387047184]]; const b2=[0.3258288796453774,-0.7965828581348368,0.23495424629333878,0.7178608490446179,1.2225889592173576];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}