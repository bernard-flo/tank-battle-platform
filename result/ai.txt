function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1251010314510856,-0.8267251469952916,-0.16331986196241766,0.022015726481180747,-0.048949722033110904,-0.1285967265548856,-0.18182608005733675,0.23079686259589718,-1.45837990018093,-0.3131400643977965,0.02970024319823727,0.4548259921300354,0.5753297709503944,1.2533876624155535,0.7697391554797838,0.2605914266515409],[-0.9473210093999017,-0.5619163741480139,-0.8496198922355922,0.009122710090991762,0.34835002957047695,-0.536047847390074,0.043077697377735785,0.11471822292886799,1.4279215340891147,-0.11398793415208108,0.8510790424813302,0.2412145108437692,-0.8983568887030882,0.7761499612320488,-0.1383360988354069,-1.8736106592287605],[0.8337649194680702,-0.4281160459223165,-0.18467414241707145,-0.49985876390445066,-0.6819232517757575,0.5271030116160591,0.1704883516233415,-0.2271407400407887,-0.713796333077036,-0.5510111927134621,0.27436675603634253,-1.1362389528739065,-0.1809910029359857,0.050624624669040684,-0.5237890249415222,-1.0414321024134607],[0.7428468865003197,0.6545078093082433,-0.2361380464039934,-0.3843092740165359,-1.8735423794353794,0.033754909150439855,-0.6436837362342654,0.02295790241777529,-0.15136797572847863,-1.1600112406433098,0.07266542486341482,0.3305797202086109,0.9942413416621967,0.09505507299586013,0.7616608544673266,1.257657005082412],[0.27487273713252364,-0.7062184290098846,-0.1295700355436737,0.22135754679844138,-0.5403955354827051,0.07906262806041829,-0.36042748560364374,-0.4058115636872541,0.5386188232470308,0.5920818113868637,-0.31492600867613946,0.07489069020397321,-0.9126285650772118,0.15409687608061964,-0.19990407513673097,0.1487691840930589],[0.6531025009163347,0.7337051426467098,1.0828332353442476,0.668579222143549,1.0613373627459286,0.8325172608204839,0.750305091814834,0.19442693333432967,-1.1489171017691895,0.17801238440126776,-0.46507959215931566,-0.09279763927616512,0.6376807291068384,1.5831997869198304,-0.34586165696448057,-0.4955712634699905]]; const b1=[-0.6405183357341396,0.13439897170923562,-1.0163315595402589,-0.8568325256757812,-0.45797707210263977,-1.2959919413165595]; const W2=[[-0.06763374514602746,-1.1384781497986984,-0.30491184003474997,0.3275101080590251,-0.6761482731461249,-0.18630390870767463],[-0.7943239132449957,-0.6479195383077281,-0.36825770092013027,1.0080489775260388,0.5264976757976606,0.20914017460533224],[-0.7207853855863731,-0.5552466671685362,0.8261158770081024,-0.38662638601130384,-0.20417460002750662,-0.22412701605123353],[0.19686156992452264,1.078484668714258,0.7854234240837673,0.0954898667777487,-0.05465853626680449,-0.6219706393697482],[0.3405923455971742,-0.414955766525406,-0.0528424401090892,-0.8032463093899241,0.12968203717392693,-0.5208938268802821]]; const b2=[0.47663895401538925,-0.6142454320407906,-1.5399820242209705,-0.7547027129107486,0.14578942327052222];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1251010314510856,-0.8267251469952916,-0.16331986196241766,0.022015726481180747,-0.048949722033110904,-0.1285967265548856,-0.18182608005733675,0.23079686259589718,-1.45837990018093,-0.3131400643977965,0.02970024319823727,0.4548259921300354,0.5753297709503944,1.2533876624155535,0.7697391554797838,0.2605914266515409],[-0.9473210093999017,-0.5619163741480139,-0.8496198922355922,0.009122710090991762,0.34835002957047695,-0.536047847390074,0.043077697377735785,0.11471822292886799,1.4279215340891147,-0.11398793415208108,0.8510790424813302,0.2412145108437692,-0.8983568887030882,0.7761499612320488,-0.1383360988354069,-1.8736106592287605],[0.8337649194680702,-0.4281160459223165,-0.18467414241707145,-0.49985876390445066,-0.6819232517757575,0.5271030116160591,0.1704883516233415,-0.2271407400407887,-0.713796333077036,-0.5510111927134621,0.27436675603634253,-1.1362389528739065,-0.1809910029359857,0.050624624669040684,-0.5237890249415222,-1.0414321024134607],[0.7428468865003197,0.6545078093082433,-0.2361380464039934,-0.3843092740165359,-1.8735423794353794,0.033754909150439855,-0.6436837362342654,0.02295790241777529,-0.15136797572847863,-1.1600112406433098,0.07266542486341482,0.3305797202086109,0.9942413416621967,0.09505507299586013,0.7616608544673266,1.257657005082412],[0.27487273713252364,-0.7062184290098846,-0.1295700355436737,0.22135754679844138,-0.5403955354827051,0.07906262806041829,-0.36042748560364374,-0.4058115636872541,0.5386188232470308,0.5920818113868637,-0.31492600867613946,0.07489069020397321,-0.9126285650772118,0.15409687608061964,-0.19990407513673097,0.1487691840930589],[0.6531025009163347,0.7337051426467098,1.0828332353442476,0.668579222143549,1.0613373627459286,0.8325172608204839,0.750305091814834,0.19442693333432967,-1.1489171017691895,0.17801238440126776,-0.46507959215931566,-0.09279763927616512,0.6376807291068384,1.5831997869198304,-0.34586165696448057,-0.4955712634699905]]; const b1=[-0.6405183357341396,0.13439897170923562,-1.0163315595402589,-0.8568325256757812,-0.45797707210263977,-1.2959919413165595]; const W2=[[-0.06763374514602746,-1.1384781497986984,-0.30491184003474997,0.3275101080590251,-0.6761482731461249,-0.18630390870767463],[-0.7943239132449957,-0.6479195383077281,-0.36825770092013027,1.0080489775260388,0.5264976757976606,0.20914017460533224],[-0.7207853855863731,-0.5552466671685362,0.8261158770081024,-0.38662638601130384,-0.20417460002750662,-0.22412701605123353],[0.19686156992452264,1.078484668714258,0.7854234240837673,0.0954898667777487,-0.05465853626680449,-0.6219706393697482],[0.3405923455971742,-0.414955766525406,-0.0528424401090892,-0.8032463093899241,0.12968203717392693,-0.5208938268802821]]; const b2=[0.47663895401538925,-0.6142454320407906,-1.5399820242209705,-0.7547027129107486,0.14578942327052222];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.27751285125123554,0.1761158606697607,0.10449006686254282,0.5270018935261627,-0.41753247370480906,-0.28793292599515247,0.14885420849405834,1.1382996517296726,0.0018251622459378447,-0.13317888467584924,0.12582201629423587,-0.37727157467954914,0.09638502405888134,-0.38351160286922037,0.6601307458698729,-0.17764452133714465],[1.139702420971266,-0.39368574297049164,0.396237023680832,0.09266453212768552,-0.08267036040291728,0.16145365382231383,0.20024180730818597,0.7263894764400006,-0.25485314135835224,0.09527356080200587,-0.6783893017531467,0.3632265379902181,1.2114923210439992,0.2016708291432471,-0.15508780111496914,-0.9006821574045463],[-1.290030551243118,0.537783383760462,-0.3677763071365766,-0.27975153323789503,-0.5535187417996306,-1.2311167345032388,-1.5966281255405192,0.11137893429032028,-0.7187371438302537,-0.8695878469927857,-0.3388704381670354,0.14261004605948166,-0.0020035983243247846,-0.4608229158046444,0.07212762369634221,0.5731534576227715],[-0.012463905221256233,0.58605471267216,-0.0029942965667996424,-0.1144688244220001,1.013248101534073,0.2872852796692095,0.00036510414371110356,0.48301576357145193,0.22215100742099458,0.6594111579620173,-1.0454559473260625,1.016874807482524,-0.12185002613087842,1.1180988073480922,0.09702695103717647,-0.2142331051203727],[-0.07113478317800737,1.2082666433144869,-0.2980605851388048,-0.2722637089975356,0.926463198881303,-1.2356080245874668,-0.9522783773342564,-1.2899320241561665,0.24719087767791667,-0.06708895207428633,-0.02212563325805188,-0.8514473126477304,0.6269654792298923,-0.5990555403211711,0.061067972359088715,0.4660798929561585],[-0.8697497832469289,-0.8505469377246824,-0.5390711991936668,-0.17387686971555427,-0.12556012511754566,0.6238293314921776,0.15766063904252356,0.9142104568544043,-0.5598356453243725,-0.34023003088009407,-0.4612734875333645,-0.13233532572824747,-0.8016159077129914,0.6796606911260319,0.30044003624852816,0.009267953587026673]]; const b1=[-0.1516872781966951,-0.3540156355464744,1.4581772235232633,-0.5791354121595738,-0.6763448748523332,0.3890506506323459]; const W2=[[-0.1958348545239652,0.565421339322114,0.6748823333422671,-0.2305660695468959,-0.07273792463104067,-0.08168080575445366],[-0.08413363223800965,-0.6192378462471749,0.4952942777455724,0.89645283282896,0.19207007412961935,-0.05087138575822341],[0.528045911872784,-0.2644613745701415,0.8663463598073753,0.580585178276487,0.6762021260965055,-0.8333850427681855],[-0.982047405099813,-2.1306128713424575,-0.22960218618381042,-1.1561502341947691,-0.4515045942537192,-0.461112430958066],[-0.4037603316376903,1.1023759219126275,0.34980732867534525,0.4717765579761433,0.7972474297688295,1.0202257359079643]]; const b2=[0.26805982708071996,-0.1321069097217798,-0.0040843397218390115,-0.6031489629571029,-0.7215307701489305];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[1.2197469900117948,0.15816174178540443,1.5062056409562359,0.44866572997985393,0.3852287466027197,0.09891176050349937,-0.22908647294049156,-0.6609705868514374,0.23732491895818203,-0.29871053270854026,1.3897063124684566,0.19102367544176665,-1.0295982268340782,-0.12305515175730052,-1.4640278008191046,1.05819509393598],[-0.471186000864409,-0.4850504719755021,-0.7947785260550403,0.5856927854864531,0.1465384658692452,-0.37330746603218945,0.6005821005842126,0.5046046215798317,-0.023655250899730224,0.13242456503355252,0.8180913383258668,0.18911181104885205,0.67468341710865,0.8818701126374427,0.3866751296218605,-0.22315446375668957],[-0.40419354445378664,0.18127965540220067,1.7962231566204647,0.16283560803180377,-0.23827051988251738,-0.5005578542856108,-1.6519689510411617,0.828066182649392,-0.4256058835615882,0.2847784196138598,-1.6541722508884218,-0.5422044652002905,-1.1137480098771673,0.26298257314439877,-0.8003993831143965,0.9492361379821532],[-0.15395146039565252,0.48416949877256,1.4982608644857671,0.7916634054793255,0.10419827736867748,0.6414104231557181,1.0019143586508856,1.1625311731305437,0.42138738195450987,-0.2561333976481956,0.49947780687914284,0.501403783759812,-1.5582389387780282,-0.05267942704515868,0.9502873256645405,-0.4093647318452177],[-0.9975111816681264,0.5596344616448155,-0.25692483297814106,-0.6004572975783231,-0.49690521900607837,0.18939439487920873,0.4774765638837508,0.12265182222057111,-0.3936501580709129,0.410332743833812,-0.2095368568253737,0.22154653287956802,0.43017727965524466,-0.6163112070464719,-0.4270406897915365,-0.282115153830228],[-0.971897987100903,-0.37454285153627737,0.2628490651633602,0.7804160463263513,-0.47346634846860064,-0.14014531061861943,-0.36181416138723166,1.1161716586638157,0.8263291843564404,0.8622152330806359,-0.5053921629858947,0.4271567092633455,-0.7420438479317503,0.35883531438129046,0.4341332071048379,0.84179531216601]]; const b1=[-0.7323663094543448,-0.2807944581287139,-0.20126737704480158,-0.9449257716489681,0.5078348977283166,0.11881684284933278]; const W2=[[0.5701301591654756,-0.6876826820435441,0.3357973546365784,0.023172202548069093,-0.17324859254691735,0.004242207508231805],[0.6693046165248682,1.6366195972514872,0.5698437796889863,0.13685156017091155,0.38509991255089077,-0.9495266309316639],[-0.6935823479858025,1.5376643704432682,0.029272899233599103,0.7041412161384419,0.12400516596808325,1.1246303149206525],[1.305047699149551,-0.4381294301491443,-0.7549568083626591,1.0112687971891179,-0.7475424033254352,0.7141640955296009],[0.5471899062296129,-0.9135537067038079,-0.7435903085526508,-0.9761848739660879,-0.8844688267540713,0.7085058339655055]]; const b2=[-1.4275712938748144,0.4883592338010947,0.09319191229052654,-0.3404167866902317,-0.11433509452761378];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[1.2197469900117948,0.15816174178540443,1.5062056409562359,0.44866572997985393,0.3852287466027197,0.09891176050349937,-0.22908647294049156,-0.6609705868514374,0.23732491895818203,-0.29871053270854026,1.3897063124684566,0.19102367544176665,-1.0295982268340782,-0.12305515175730052,-1.4640278008191046,1.05819509393598],[-0.471186000864409,-0.4850504719755021,-0.7947785260550403,0.5856927854864531,0.1465384658692452,-0.37330746603218945,0.6005821005842126,0.5046046215798317,-0.023655250899730224,0.13242456503355252,0.8180913383258668,0.18911181104885205,0.67468341710865,0.8818701126374427,0.3866751296218605,-0.22315446375668957],[-0.40419354445378664,0.18127965540220067,1.7962231566204647,0.16283560803180377,-0.23827051988251738,-0.5005578542856108,-1.6519689510411617,0.828066182649392,-0.4256058835615882,0.2847784196138598,-1.6541722508884218,-0.5422044652002905,-1.1137480098771673,0.26298257314439877,-0.8003993831143965,0.9492361379821532],[-0.15395146039565252,0.48416949877256,1.4982608644857671,0.7916634054793255,0.10419827736867748,0.6414104231557181,1.0019143586508856,1.1625311731305437,0.42138738195450987,-0.2561333976481956,0.49947780687914284,0.501403783759812,-1.5582389387780282,-0.05267942704515868,0.9502873256645405,-0.4093647318452177],[-0.9975111816681264,0.5596344616448155,-0.25692483297814106,-0.6004572975783231,-0.49690521900607837,0.18939439487920873,0.4774765638837508,0.12265182222057111,-0.3936501580709129,0.410332743833812,-0.2095368568253737,0.22154653287956802,0.43017727965524466,-0.6163112070464719,-0.4270406897915365,-0.282115153830228],[-0.971897987100903,-0.37454285153627737,0.2628490651633602,0.7804160463263513,-0.47346634846860064,-0.14014531061861943,-0.36181416138723166,1.1161716586638157,0.8263291843564404,0.8622152330806359,-0.5053921629858947,0.4271567092633455,-0.7420438479317503,0.35883531438129046,0.4341332071048379,0.84179531216601]]; const b1=[-0.7323663094543448,-0.2807944581287139,-0.20126737704480158,-0.9449257716489681,0.5078348977283166,0.11881684284933278]; const W2=[[0.5701301591654756,-0.6876826820435441,0.3357973546365784,0.023172202548069093,-0.17324859254691735,0.004242207508231805],[0.6693046165248682,1.6366195972514872,0.5698437796889863,0.13685156017091155,0.38509991255089077,-0.9495266309316639],[-0.6935823479858025,1.5376643704432682,0.029272899233599103,0.7041412161384419,0.12400516596808325,1.1246303149206525],[1.305047699149551,-0.4381294301491443,-0.7549568083626591,1.0112687971891179,-0.7475424033254352,0.7141640955296009],[0.5471899062296129,-0.9135537067038079,-0.7435903085526508,-0.9761848739660879,-0.8844688267540713,0.7085058339655055]]; const b2=[-1.4275712938748144,0.4883592338010947,0.09319191229052654,-0.3404167866902317,-0.11433509452761378];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.1251010314510856,-0.8267251469952916,-0.16331986196241766,0.022015726481180747,-0.048949722033110904,-0.1285967265548856,-0.18182608005733675,0.23079686259589718,-1.45837990018093,-0.3131400643977965,0.02970024319823727,0.4548259921300354,0.5753297709503944,1.2533876624155535,0.7697391554797838,0.2605914266515409],[-0.9473210093999017,-0.5619163741480139,-0.8496198922355922,0.009122710090991762,0.34835002957047695,-0.536047847390074,0.043077697377735785,0.11471822292886799,1.4279215340891147,-0.11398793415208108,0.8510790424813302,0.2412145108437692,-0.8983568887030882,0.7761499612320488,-0.1383360988354069,-1.8736106592287605],[0.8337649194680702,-0.4281160459223165,-0.18467414241707145,-0.49985876390445066,-0.6819232517757575,0.5271030116160591,0.1704883516233415,-0.2271407400407887,-0.713796333077036,-0.5510111927134621,0.27436675603634253,-1.1362389528739065,-0.1809910029359857,0.050624624669040684,-0.5237890249415222,-1.0414321024134607],[0.7428468865003197,0.6545078093082433,-0.2361380464039934,-0.3843092740165359,-1.8735423794353794,0.033754909150439855,-0.6436837362342654,0.02295790241777529,-0.15136797572847863,-1.1600112406433098,0.07266542486341482,0.3305797202086109,0.9942413416621967,0.09505507299586013,0.7616608544673266,1.257657005082412],[0.27487273713252364,-0.7062184290098846,-0.1295700355436737,0.22135754679844138,-0.5403955354827051,0.07906262806041829,-0.36042748560364374,-0.4058115636872541,0.5386188232470308,0.5920818113868637,-0.31492600867613946,0.07489069020397321,-0.9126285650772118,0.15409687608061964,-0.19990407513673097,0.1487691840930589],[0.6531025009163347,0.7337051426467098,1.0828332353442476,0.668579222143549,1.0613373627459286,0.8325172608204839,0.750305091814834,0.19442693333432967,-1.1489171017691895,0.17801238440126776,-0.46507959215931566,-0.09279763927616512,0.6376807291068384,1.5831997869198304,-0.34586165696448057,-0.4955712634699905]]; const b1=[-0.6405183357341396,0.13439897170923562,-1.0163315595402589,-0.8568325256757812,-0.45797707210263977,-1.2959919413165595]; const W2=[[-0.06763374514602746,-1.1384781497986984,-0.30491184003474997,0.3275101080590251,-0.6761482731461249,-0.18630390870767463],[-0.7943239132449957,-0.6479195383077281,-0.36825770092013027,1.0080489775260388,0.5264976757976606,0.20914017460533224],[-0.7207853855863731,-0.5552466671685362,0.8261158770081024,-0.38662638601130384,-0.20417460002750662,-0.22412701605123353],[0.19686156992452264,1.078484668714258,0.7854234240837673,0.0954898667777487,-0.05465853626680449,-0.6219706393697482],[0.3405923455971742,-0.414955766525406,-0.0528424401090892,-0.8032463093899241,0.12968203717392693,-0.5208938268802821]]; const b2=[0.47663895401538925,-0.6142454320407906,-1.5399820242209705,-0.7547027129107486,0.14578942327052222];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}