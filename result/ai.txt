function name(){return 'Atlas';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.4359133074651808,-0.17153232798130225,0.2535312230805512,0.460019942721808,0.26048522154926046,-0.2538564107036095,0.17699839438834744,0.6764104714184214,0.7157863106300909,-0.481626792013156,0.08199910484123105,-0.3138711504484249,-0.04154018285027824,0.3902816057714019,0.9147885672194627,-1.1190051138290795],[-0.12825181996634546,-0.1929981584464053,-0.03804227242002063,0.1226115058156556,-0.33703958312798277,-0.0023603010950256076,0.3901276459793831,-0.516972788979602,0.27531808432971794,-0.18684752139680844,-0.33744789301107403,0.18764157407062731,-0.047211551896864344,0.09017354488123464,-0.2598094369839604,1.437509299771885],[0.8409409797971684,-0.29432798270745236,0.06207158796732701,-1.1361861079803366,-0.0815371272000883,-0.4669778127098243,-0.1614046569799211,-0.33376624448654096,0.2601796817624832,0.722920693405291,0.3520060196610404,-1.025105981926166,0.13760163211678067,-0.31025310507752113,0.787131115195365,0.08428970342870934],[0.11633595683059962,-0.7502268330127378,-0.37563802288004866,0.4345586712694195,-0.15836282207749366,-0.25672434181932074,0.6469125157408923,0.13791651168642627,0.022455285409217186,-0.18775906244089377,-0.3538560807642742,-1.176018939954349,0.29176258387047244,0.4571522298891941,0.2793770662989175,0.3008504053530055],[-0.8653675770260937,0.7071287663347474,0.09117507205927473,-0.062283378736334064,-0.489520050288647,-0.6461589041587095,-0.367457761620252,0.4005633007563571,-0.3026612414719996,0.027860237465438087,-0.1422952967415321,-0.09737403792007951,0.8968749298628895,-0.16911388669420097,-0.30131436479359075,0.04520108140284523],[0.22003142498417777,-0.8164067302315023,-0.4517198729288799,0.44614886579669166,-0.4799957650195045,-0.4376025388843233,-0.07271132480608361,-0.48090070168358423,0.7411272380513689,-0.1923957405417207,-0.4278892767567348,0.8073923296104129,-0.5171651944733042,-0.3445405040529274,0.4065703434878569,-0.2516806196299757]]; const b1=[0.091124601796658,-0.5822004590604405,0.18712151704009983,-0.04678403251646933,0.5142231844427219,0.11218027717313406]; const W2=[[-0.6366652643964066,-0.15134708048576473,-0.5700376875201277,-0.35965026293658264,0.28483208366707713,-0.17182321830397568],[0.24926097677936046,-0.04124028009100089,0.2535021922147044,0.415048753978398,-0.4123365804462815,0.702528610550307],[-0.7925683500153049,-0.889537437793135,0.3734587544186518,0.6040694448851894,0.21249153703355483,-0.3599427954154161],[0.3356652458241697,0.2536005384186138,0.24507420935067145,0.009902966739933794,-0.6135477924592068,-0.20959104762210062],[-0.2872373200189747,0.013396449961956481,-0.47127825802012757,0.27249113795940655,0.27226135001304486,-0.332236708611322]]; const b2=[0.10411028062065064,-0.11890494164780914,-0.13538734079339998,-0.18457266748499923,-0.0783548855258068];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=clamp(aimLead, -12, 16); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.4359133074651808,-0.17153232798130225,0.2535312230805512,0.460019942721808,0.26048522154926046,-0.2538564107036095,0.17699839438834744,0.6764104714184214,0.7157863106300909,-0.481626792013156,0.08199910484123105,-0.3138711504484249,-0.04154018285027824,0.3902816057714019,0.9147885672194627,-1.1190051138290795],[-0.12825181996634546,-0.1929981584464053,-0.03804227242002063,0.1226115058156556,-0.33703958312798277,-0.0023603010950256076,0.3901276459793831,-0.516972788979602,0.27531808432971794,-0.18684752139680844,-0.33744789301107403,0.18764157407062731,-0.047211551896864344,0.09017354488123464,-0.2598094369839604,1.437509299771885],[0.8409409797971684,-0.29432798270745236,0.06207158796732701,-1.1361861079803366,-0.0815371272000883,-0.4669778127098243,-0.1614046569799211,-0.33376624448654096,0.2601796817624832,0.722920693405291,0.3520060196610404,-1.025105981926166,0.13760163211678067,-0.31025310507752113,0.787131115195365,0.08428970342870934],[0.11633595683059962,-0.7502268330127378,-0.37563802288004866,0.4345586712694195,-0.15836282207749366,-0.25672434181932074,0.6469125157408923,0.13791651168642627,0.022455285409217186,-0.18775906244089377,-0.3538560807642742,-1.176018939954349,0.29176258387047244,0.4571522298891941,0.2793770662989175,0.3008504053530055],[-0.8653675770260937,0.7071287663347474,0.09117507205927473,-0.062283378736334064,-0.489520050288647,-0.6461589041587095,-0.367457761620252,0.4005633007563571,-0.3026612414719996,0.027860237465438087,-0.1422952967415321,-0.09737403792007951,0.8968749298628895,-0.16911388669420097,-0.30131436479359075,0.04520108140284523],[0.22003142498417777,-0.8164067302315023,-0.4517198729288799,0.44614886579669166,-0.4799957650195045,-0.4376025388843233,-0.07271132480608361,-0.48090070168358423,0.7411272380513689,-0.1923957405417207,-0.4278892767567348,0.8073923296104129,-0.5171651944733042,-0.3445405040529274,0.4065703434878569,-0.2516806196299757]]; const b1=[0.091124601796658,-0.5822004590604405,0.18712151704009983,-0.04678403251646933,0.5142231844427219,0.11218027717313406]; const W2=[[-0.6366652643964066,-0.15134708048576473,-0.5700376875201277,-0.35965026293658264,0.28483208366707713,-0.17182321830397568],[0.24926097677936046,-0.04124028009100089,0.2535021922147044,0.415048753978398,-0.4123365804462815,0.702528610550307],[-0.7925683500153049,-0.889537437793135,0.3734587544186518,0.6040694448851894,0.21249153703355483,-0.3599427954154161],[0.3356652458241697,0.2536005384186138,0.24507420935067145,0.009902966739933794,-0.6135477924592068,-0.20959104762210062],[-0.2872373200189747,0.013396449961956481,-0.47127825802012757,0.27249113795940655,0.27226135001304486,-0.332236708611322]]; const b2=[0.10411028062065064,-0.11890494164780914,-0.13538734079339998,-0.18457266748499923,-0.0783548855258068];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=clamp(aimLead, -12, 16); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.5470139271926688,-0.24520474359876152,-0.11260738236659723,0.7049754084830065,0.5057578019402326,0.5408484473321129,-0.836951463970516,0.14837375745796103,0.5255554176832185,-0.39868126813594773,0.01618581719218637,0.5854431392459603,-0.21143912755220193,0.9735470556705539,0.2849119475616034,0.3143960130452167],[-0.15460480202068083,-0.7639157195093008,0.10284125016295385,-0.12838506567821545,0.07416724987695479,-1.1460557175906771,0.5869869808316551,-0.35737070157269035,-0.015255257811972789,1.0883457250277782,-0.2928249150302398,0.5868798985643788,0.01829964058243083,-0.39556715632291317,0.6092960252942738,0.8244521269318481],[0.09953309686582293,0.021313393931580465,0.4480672709344837,-0.8811055908450467,0.03504429886775362,0.673803914829052,-0.4861691810902927,-0.7354974761921473,0.18649218283960922,0.8578679816414225,-0.6995461964072994,-0.6454057296173941,-0.7613766169736477,0.6684842874420276,-0.007423768917385845,-0.17362101333693392],[0.10577313582981253,0.30460105489008626,-0.05389480306109795,-0.48528100559355936,0.3337928723217498,-0.8720755285594268,0.27172203621279134,-0.6775929067844048,0.20723326329313568,-0.7110824451003566,-0.07393456411277295,0.07795842628500199,0.3695616851973389,0.790334458531174,0.007044182746148361,-0.38756660232560036],[0.16068051207121703,0.6692472636684544,-0.38902462868785564,0.16347544166664923,0.09954669883970646,-0.1507098734008162,0.6219139065494633,-0.21513531850190698,0.5638873161637986,0.2729999013742719,-0.28306834747649223,1.241644864762636,-0.3510190384685908,0.2979744932760128,0.6160998392014931,-0.3814375746198094],[0.19162267859452686,0.04313318551595805,-0.31086182070482593,0.7681536298168092,0.19754322182904147,0.7986528348790403,-0.43256652575978594,0.1858349056776063,-0.431204336866929,-0.019708703197606953,0.8551531093926534,-0.4989524287032358,0.30183522715806943,-0.24983698530302392,-0.42171262120954667,0.28930414564497686]]; const b1=[0.024709578536777743,-0.02614148660633428,0.1708311754511023,0.07846516863112458,-0.054982949515277324,-0.03330383373149286]; const W2=[[0.08530341408901443,0.6366743847712071,-0.2017857468604857,-0.13568438951507805,0.3735737156076292,0.17956231548575008],[-0.34095633858778107,-0.4723310135914345,0.5652324381655307,-0.16458119514395547,-0.7883021281481808,-0.8293031541781926],[-0.24791255255864048,0.005631041183908614,-0.22328604877899078,0.0503506195665806,-0.5290543212216732,-0.07974609448997957],[0.1464614685493591,-0.2477436993526043,-0.299179999011107,-0.31422903118782813,-0.7145049083575087,0.04333575920884092],[0.2566036061441929,0.13004735073206253,0.1979292969899852,0.18054120082403613,0.8397603824442805,0.21087085889677004]]; const b2=[-0.11914731896546382,-0.032248428190267686,-0.356413807166552,-0.22241243192722313,-0.3363448032521695];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=clamp(aimLead, -12, 16); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.5470139271926688,-0.24520474359876152,-0.11260738236659723,0.7049754084830065,0.5057578019402326,0.5408484473321129,-0.836951463970516,0.14837375745796103,0.5255554176832185,-0.39868126813594773,0.01618581719218637,0.5854431392459603,-0.21143912755220193,0.9735470556705539,0.2849119475616034,0.3143960130452167],[-0.15460480202068083,-0.7639157195093008,0.10284125016295385,-0.12838506567821545,0.07416724987695479,-1.1460557175906771,0.5869869808316551,-0.35737070157269035,-0.015255257811972789,1.0883457250277782,-0.2928249150302398,0.5868798985643788,0.01829964058243083,-0.39556715632291317,0.6092960252942738,0.8244521269318481],[0.09953309686582293,0.021313393931580465,0.4480672709344837,-0.8811055908450467,0.03504429886775362,0.673803914829052,-0.4861691810902927,-0.7354974761921473,0.18649218283960922,0.8578679816414225,-0.6995461964072994,-0.6454057296173941,-0.7613766169736477,0.6684842874420276,-0.007423768917385845,-0.17362101333693392],[0.10577313582981253,0.30460105489008626,-0.05389480306109795,-0.48528100559355936,0.3337928723217498,-0.8720755285594268,0.27172203621279134,-0.6775929067844048,0.20723326329313568,-0.7110824451003566,-0.07393456411277295,0.07795842628500199,0.3695616851973389,0.790334458531174,0.007044182746148361,-0.38756660232560036],[0.16068051207121703,0.6692472636684544,-0.38902462868785564,0.16347544166664923,0.09954669883970646,-0.1507098734008162,0.6219139065494633,-0.21513531850190698,0.5638873161637986,0.2729999013742719,-0.28306834747649223,1.241644864762636,-0.3510190384685908,0.2979744932760128,0.6160998392014931,-0.3814375746198094],[0.19162267859452686,0.04313318551595805,-0.31086182070482593,0.7681536298168092,0.19754322182904147,0.7986528348790403,-0.43256652575978594,0.1858349056776063,-0.431204336866929,-0.019708703197606953,0.8551531093926534,-0.4989524287032358,0.30183522715806943,-0.24983698530302392,-0.42171262120954667,0.28930414564497686]]; const b1=[0.024709578536777743,-0.02614148660633428,0.1708311754511023,0.07846516863112458,-0.054982949515277324,-0.03330383373149286]; const W2=[[0.08530341408901443,0.6366743847712071,-0.2017857468604857,-0.13568438951507805,0.3735737156076292,0.17956231548575008],[-0.34095633858778107,-0.4723310135914345,0.5652324381655307,-0.16458119514395547,-0.7883021281481808,-0.8293031541781926],[-0.24791255255864048,0.005631041183908614,-0.22328604877899078,0.0503506195665806,-0.5290543212216732,-0.07974609448997957],[0.1464614685493591,-0.2477436993526043,-0.299179999011107,-0.31422903118782813,-0.7145049083575087,0.04333575920884092],[0.2566036061441929,0.13004735073206253,0.1979292969899852,0.18054120082403613,0.8397603824442805,0.21087085889677004]]; const b2=[-0.11914731896546382,-0.032248428190267686,-0.356413807166552,-0.22241243192722313,-0.3363448032521695];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=clamp(aimLead, -12, 16); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.5470139271926688,-0.24520474359876152,-0.11260738236659723,0.7049754084830065,0.5057578019402326,0.5408484473321129,-0.836951463970516,0.14837375745796103,0.5255554176832185,-0.39868126813594773,0.01618581719218637,0.5854431392459603,-0.21143912755220193,0.9735470556705539,0.2849119475616034,0.3143960130452167],[-0.15460480202068083,-0.7639157195093008,0.10284125016295385,-0.12838506567821545,0.07416724987695479,-1.1460557175906771,0.5869869808316551,-0.35737070157269035,-0.015255257811972789,1.0883457250277782,-0.2928249150302398,0.5868798985643788,0.01829964058243083,-0.39556715632291317,0.6092960252942738,0.8244521269318481],[0.09953309686582293,0.021313393931580465,0.4480672709344837,-0.8811055908450467,0.03504429886775362,0.673803914829052,-0.4861691810902927,-0.7354974761921473,0.18649218283960922,0.8578679816414225,-0.6995461964072994,-0.6454057296173941,-0.7613766169736477,0.6684842874420276,-0.007423768917385845,-0.17362101333693392],[0.10577313582981253,0.30460105489008626,-0.05389480306109795,-0.48528100559355936,0.3337928723217498,-0.8720755285594268,0.27172203621279134,-0.6775929067844048,0.20723326329313568,-0.7110824451003566,-0.07393456411277295,0.07795842628500199,0.3695616851973389,0.790334458531174,0.007044182746148361,-0.38756660232560036],[0.16068051207121703,0.6692472636684544,-0.38902462868785564,0.16347544166664923,0.09954669883970646,-0.1507098734008162,0.6219139065494633,-0.21513531850190698,0.5638873161637986,0.2729999013742719,-0.28306834747649223,1.241644864762636,-0.3510190384685908,0.2979744932760128,0.6160998392014931,-0.3814375746198094],[0.19162267859452686,0.04313318551595805,-0.31086182070482593,0.7681536298168092,0.19754322182904147,0.7986528348790403,-0.43256652575978594,0.1858349056776063,-0.431204336866929,-0.019708703197606953,0.8551531093926534,-0.4989524287032358,0.30183522715806943,-0.24983698530302392,-0.42171262120954667,0.28930414564497686]]; const b1=[0.024709578536777743,-0.02614148660633428,0.1708311754511023,0.07846516863112458,-0.054982949515277324,-0.03330383373149286]; const W2=[[0.08530341408901443,0.6366743847712071,-0.2017857468604857,-0.13568438951507805,0.3735737156076292,0.17956231548575008],[-0.34095633858778107,-0.4723310135914345,0.5652324381655307,-0.16458119514395547,-0.7883021281481808,-0.8293031541781926],[-0.24791255255864048,0.005631041183908614,-0.22328604877899078,0.0503506195665806,-0.5290543212216732,-0.07974609448997957],[0.1464614685493591,-0.2477436993526043,-0.299179999011107,-0.31422903118782813,-0.7145049083575087,0.04333575920884092],[0.2566036061441929,0.13004735073206253,0.1979292969899852,0.18054120082403613,0.8397603824442805,0.21087085889677004]]; const b2=[-0.11914731896546382,-0.032248428190267686,-0.356413807166552,-0.22241243192722313,-0.3363448032521695];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=clamp(aimLead, -12, 16); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.6170430655007968,0.0251644528046,0.07348664743675287,-0.9317930862591858,-0.9390025707103573,-0.0636758931993236,0.9089697108254305,-0.10066055508205063,0.07759411288180984,-0.09933072592845324,-0.6768299477693935,0.3476627895904658,-0.19260976643565203,0.2538290499909991,-0.20143927270635983,-0.03990341144581727],[0.10204754825167921,0.03237135233571481,-0.08763166467601834,-0.6403420078581514,-0.1582343994271413,0.22598434080096835,0.2785789159031652,-0.024195444662843124,-0.16507343524899568,-0.7355037471829672,-0.4606062174103904,-0.28791738008107326,-0.402501364743082,-0.5061039691953683,0.24347156906378292,-0.49813560606739654],[0.5963810630598536,-0.02902495043835867,-0.1945313205744542,-0.23808355264273653,-0.8121412111983428,0.7498180692446503,0.0899258508249364,-0.38478055682248413,0.07372609302708527,-0.43356394584053193,0.30255085730894105,0.05109169148150974,-0.09930033314657238,-0.660645512150084,-0.3670504105963559,-0.6140930225894246],[-0.26877721392101517,0.32461753934554793,-0.45146487749249187,-0.2869444292885891,-0.25962668913980586,0.149589322073291,-0.21518707486650923,-0.39102739584675084,-0.626645707215655,0.4667913211477919,-0.2876455376980617,0.19809502045518285,0.2887343500161702,0.422703967535046,-0.5904106435373989,-0.12608868327052636],[0.6197511733685207,-0.7742990265206487,0.1253871343253549,0.26530377880533473,0.409944706076911,0.5850475892486832,0.052474243485091804,0.33558122477988994,0.08027136882836289,0.3546688007455807,0.36822464267547633,-0.011803387421316008,0.0684451478075968,0.19665173241327294,0.13880571224640748,0.9560404957235265],[0.3778917314807223,-0.48247018488882903,-0.4683045538497599,-0.08473344471683703,0.554896199308209,0.3483768936837048,0.9491166221299484,0.1182893661379934,0.3285219014376954,-0.30991756910023355,0.10925697131194939,-0.011940614029734384,-0.026250072571616066,0.859675118763769,-0.14936839458741086,-0.6996042325979519]]; const b1=[0.6674360125725611,-0.10751339546701463,-0.14915219231709706,-0.22078223680713843,0.03838037153982417,-0.022082775999393567]; const W2=[[-0.676155051203174,0.1352219902639546,-0.39892832486988056,-0.46898623811296497,-0.44007297825158687,0.4439792516611232],[-0.15424000236605617,0.5592399838514329,1.0631367348980607,0.1818167948068727,0.48484086476593313,-0.06274083293578388],[0.5770848562627434,-0.41653301275246823,1.3795200086234012,0.27615922060705805,0.30278174848156986,1.0733851719245657],[0.7359294480800864,1.0894507245028588,0.14522715805950653,0.4730622167574241,0.19569978337188706,0.03304220399995534],[-0.13402420857955177,1.0385947684190906,-0.3725465199079415,0.16151548734132204,-0.5402633905630893,0.23938933905438003]]; const b2=[0.5137150666027918,0.22527883599361917,-0.03800024851486686,-0.3740273206543857,0.10222114843161922];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=clamp(aimLead, -12, 16); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}