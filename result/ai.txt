function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.9192253387425015,-0.6819899975735767,-0.38025643431112316,0.3151830290199087,-0.42710046254854583,-0.19864601423607717,0.416201810107731,0.05185011266558551,-0.9718859150680778,-0.10048390188410808,-1.0513081065457173,0.6898228067208568,-0.12300537710638942,0.3654593849265203,0.014298280030283272,0.13200838509979723],[-1.239157905355782,-0.14075715625010027,-1.4015347553571753,-0.3739406057992893,-0.2862127941295364,0.160901843905625,-0.3912805337289064,0.4194572197740062,0.3243642358378608,-0.23274880598364867,-0.28367899170704414,0.7046096615002664,0.012888306637693012,-0.09137539282009902,-0.3768937525422677,-0.31082397008183194],[0.8991342982659304,-0.09240589341876781,0.3246874129144247,0.26435539475282543,-0.049415269473260096,1.4883033064865647,0.04302625390034061,0.6574970349028912,-0.4072853621814984,0.8375807945587547,0.16156901607408136,-0.6789402482555513,0.22576220912744313,0.3388846566102761,-0.4850760354384952,-1.5419075552539092],[0.7317646057198449,0.34973240694617996,0.49942510510732313,-0.24612953394029288,-1.543827257932217,0.3735425334554645,-0.2549282460199413,0.5564302104549517,-1.0909005794736266,-0.059124714775658255,0.300797358009731,-0.21494683989026736,1.7102497980830365,1.3237706992129967,-0.3532396909715171,0.146013757502034],[0.65841325135524,-0.6641460384789236,-0.6154729158427058,1.1486235226679882,-0.4732872644975865,0.2541907673674444,0.17873460571008565,-0.613566731549275,0.07985354415277093,-0.5572369273785138,-0.32857136576046897,-0.6376844100222634,0.6865498248989526,0.7679566184653143,0.3631518277088251,0.13594334022949567],[-0.1969703759191756,0.7353777253194488,-0.36811186618616737,0.15212588622812565,0.9169528674200671,0.679553058770868,-0.3891633467868576,0.3076086750138009,0.2634574068118641,0.3781833120705036,-0.17312347654985946,0.17189010446015726,1.2424504903323408,1.3794145563371716,0.01441302280340211,-0.9463953277031107]]; const b1=[0.10810109352833723,-0.07269511857781456,0.18812408447163756,-0.6356678742682602,-0.3556599407356674,-1.5937986656205265]; const W2=[[0.281381859356536,-1.1425068872038846,-0.020618033803109698,1.1396849641227318,0.12271414231362783,0.2839712926025592],[0.709347313825887,-0.388206103916977,0.6397998121706834,0.3007909509656104,-0.325756146715072,0.29484196698584453],[-0.1857316844531418,0.3612453523099716,-0.16957502859000392,-0.1843071658026148,-0.8780821222353619,-0.26178992771458026],[0.34702498448774777,0.07659657587895133,-0.8548362067397182,0.42945429066809787,0.7575003167964354,0.1174855107410381],[-0.042003873283148814,-0.43079657968185797,-0.1927334827068446,-0.3518372766544816,0.7008847122034223,0.14009582399811923]]; const b2=[0.03546840994850856,-0.05506302515869595,0.3636987325680347,0.5342686771183935,0.44749069509625816];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.08914170169632553,0.11057796860722993,0.9763947183899212,0.13925055356031701,-0.05555343977997056,0.15250847977442955,0.1761484687607829,0.3424133324099662,-0.0405704775958864,-0.4476467654099737,-0.039043275167510355,0.45077708713541786,-0.8398657404182838,0.22345600564077328,-1.448840914471306,-0.030157831001297278],[-0.6391872926269102,-1.4052083740922443,-0.6248809058057113,0.7183468160259675,0.267787713466578,0.45418406652860166,0.36556187027055354,0.006933287849937495,0.8160110314534699,0.0845901832831008,0.23748679379842266,0.4744376118024729,0.3792230160182001,1.4033855479183974,0.055322407492522985,0.11623461855857711],[-0.6204996944869814,-0.5877196163747583,1.4144155174268396,-0.01686079708914804,-0.4417736920116573,0.15244303564509448,-1.0361674796948253,0.8135614585460498,-1.069137984077199,-0.12510743292182008,-0.7464847411969022,0.8800604279822832,0.08309378073010726,0.8098106336367848,-0.40355352442291087,0.23402144371240213],[0.07879077573205127,0.7405599488140359,0.6227173641621255,0.31495337067633933,-1.090112184032359,0.08480243014938324,0.5450756673865337,0.45362797590094256,0.7428444346556978,0.020474668759161964,-0.34296150625647215,0.4712344711766727,-0.4371030546801151,-1.1737841991857552,0.35378959688615247,-0.9444867347970066],[-1.8568803758746502,-0.05877127951834593,0.36001229629881687,-1.0037291454020738,0.6234373915972405,-0.4384274017782339,-0.18201616391140882,0.22386191016667634,-0.2789112451590154,-0.4121140868364701,0.34954982671372425,0.21376467502717306,-0.7018595498393793,-0.30889177504108495,-1.0380172761102933,0.637479191593167],[-1.3597279107875437,-1.1418927540553496,-0.5343339466655286,1.437861960537153,-0.6001977043043314,-0.6720428178148147,-0.5361629072934229,0.2956028513327674,0.23753155330170356,-0.63214849372716,-0.6620857282516238,-0.8087794808421426,-0.3463562869468863,-0.5388833748054256,-0.38645212067533746,-0.7332368733389172]]; const b1=[0.11194293130341829,-0.49211747902417047,0.4686162034603478,-0.11227083970850957,0.006426089268671525,0.14715096217945908]; const W2=[[0.244055150157582,0.42848608773483626,-0.12907189730546523,-0.3219416123368129,0.11547084422445486,-0.7546116204218101],[0.43839671676026226,0.9450862648379624,0.46795226891713787,-0.009378116280551699,0.5783767081296461,-0.3207389781338462],[0.18050299427935831,0.6480281287847515,0.1598253054695753,-0.2231916163408898,-0.40420189471307394,-0.5547260780355455],[0.12528985209847399,0.47962837690265714,0.47011604732080936,0.7042685348852157,0.4784768316198772,0.7684611303522455],[0.6984003780596535,-0.12956014738707777,0.6711302618614017,0.5866330339054613,-0.3361562339977485,0.2177040901266019]]; const b2=[-0.3754869527906848,-0.14690435206575156,0.632586688384728,-0.06461227664992963,-0.004880087081619987];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.16954474871213254,0.5562637168910713,0.6350820657568814,0.04666676047400216,-1.0327694554880436,0.8626866774152132,-0.07252795191484052,0.7675122167566777,0.11924228965404744,-0.2486150852308418,-0.11550812847423031,-0.7547135804248963,-0.5121743787158852,0.9621551682026018,1.4265631729851678,0.14539932890625407],[0.37751954868889287,0.39022215009581174,0.9686477890794288,0.4787740530719882,-0.7114382016084425,-0.21182164663159012,0.3409981166915275,0.34206927971343154,0.3056568568936983,0.12720512278036963,-0.8875120803398939,0.08247249281404935,1.085565814289773,0.7109810256028171,-0.3575079053042522,-0.4758130854588485],[0.31457397507745505,0.6064361604278582,-0.5087119612933546,-0.307414702831449,0.5577267182065256,-0.24297862903815096,-1.1831498735092072,-0.5912152126030694,-0.07928457400084232,0.17405032112312538,0.09162368969454082,-0.017745952151519438,-0.8843248880849348,-0.3485745592049012,-0.2778077322553346,0.05364009971246995],[-0.6225912479034523,0.2635637770203677,-0.4019357573032658,0.0626709491758558,0.17975285514078898,0.1751263437851632,-0.6653213827766256,0.04974723571233869,0.6818702462471958,0.7603804095043349,0.03592270847604123,0.6776192471812051,-0.7790961107524377,1.247882823120879,0.5915989580366234,-0.8485778721862212],[-1.003845258208378,-0.379308278970167,-0.3809817676169507,0.06708809687134426,0.5014612913567249,-0.5684312143519192,0.21744807297540666,-0.55832804682203,0.566839196319245,0.6734906456326495,-0.6460847852728551,0.1826114023120202,0.7340546063527777,-0.038603000513306035,0.4016181406024401,0.11701676117396778],[-0.8161194563226355,-0.11893512676112504,0.8620780341592196,-0.04250617123614565,0.07277639806577779,0.1745334261630069,-0.3458785528803896,1.7452240479743446,-0.16689904768497876,-0.38611664172623483,0.5085868929479533,0.2279087621425157,-0.10774877932354038,-1.3406128630438876,-0.5578651122656464,1.0094316079435142]]; const b1=[-0.12180964598482301,0.5150235408273449,-0.9828344232235102,-0.11717236651824059,-0.3241291865440736,-0.27153287799359727]; const W2=[[-0.13923012698783863,0.4204091167247131,0.6867511810333453,0.5974491190236365,0.34725348455426863,0.07154842244474217],[-0.26578486628856113,-0.2623417182700822,-0.2427310444072794,-0.030175896793893216,-0.22134828166348447,-0.09764774912987986],[0.31065326349770317,0.7082578828673974,0.7193162994017774,0.9245678681824658,-0.2931892692763898,0.337776004263355],[0.07991338264412759,-0.6972134991467085,0.3818040991758442,-0.303319668304907,-0.2151724300346146,-0.3283477478015953],[0.29688057655618183,0.6940475379596676,-0.17634646405709942,0.17553032274017402,1.5674212070029474,0.3776003717390984]]; const b2=[0.29747872073626563,-1.039041981486488,0.43748725693936585,-0.4664390720538289,-0.9757000704815247];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.9192253387425015,-0.6819899975735767,-0.38025643431112316,0.3151830290199087,-0.42710046254854583,-0.19864601423607717,0.416201810107731,0.05185011266558551,-0.9718859150680778,-0.10048390188410808,-1.0513081065457173,0.6898228067208568,-0.12300537710638942,0.3654593849265203,0.014298280030283272,0.13200838509979723],[-1.239157905355782,-0.14075715625010027,-1.4015347553571753,-0.3739406057992893,-0.2862127941295364,0.160901843905625,-0.3912805337289064,0.4194572197740062,0.3243642358378608,-0.23274880598364867,-0.28367899170704414,0.7046096615002664,0.012888306637693012,-0.09137539282009902,-0.3768937525422677,-0.31082397008183194],[0.8991342982659304,-0.09240589341876781,0.3246874129144247,0.26435539475282543,-0.049415269473260096,1.4883033064865647,0.04302625390034061,0.6574970349028912,-0.4072853621814984,0.8375807945587547,0.16156901607408136,-0.6789402482555513,0.22576220912744313,0.3388846566102761,-0.4850760354384952,-1.5419075552539092],[0.7317646057198449,0.34973240694617996,0.49942510510732313,-0.24612953394029288,-1.543827257932217,0.3735425334554645,-0.2549282460199413,0.5564302104549517,-1.0909005794736266,-0.059124714775658255,0.300797358009731,-0.21494683989026736,1.7102497980830365,1.3237706992129967,-0.3532396909715171,0.146013757502034],[0.65841325135524,-0.6641460384789236,-0.6154729158427058,1.1486235226679882,-0.4732872644975865,0.2541907673674444,0.17873460571008565,-0.613566731549275,0.07985354415277093,-0.5572369273785138,-0.32857136576046897,-0.6376844100222634,0.6865498248989526,0.7679566184653143,0.3631518277088251,0.13594334022949567],[-0.1969703759191756,0.7353777253194488,-0.36811186618616737,0.15212588622812565,0.9169528674200671,0.679553058770868,-0.3891633467868576,0.3076086750138009,0.2634574068118641,0.3781833120705036,-0.17312347654985946,0.17189010446015726,1.2424504903323408,1.3794145563371716,0.01441302280340211,-0.9463953277031107]]; const b1=[0.10810109352833723,-0.07269511857781456,0.18812408447163756,-0.6356678742682602,-0.3556599407356674,-1.5937986656205265]; const W2=[[0.281381859356536,-1.1425068872038846,-0.020618033803109698,1.1396849641227318,0.12271414231362783,0.2839712926025592],[0.709347313825887,-0.388206103916977,0.6397998121706834,0.3007909509656104,-0.325756146715072,0.29484196698584453],[-0.1857316844531418,0.3612453523099716,-0.16957502859000392,-0.1843071658026148,-0.8780821222353619,-0.26178992771458026],[0.34702498448774777,0.07659657587895133,-0.8548362067397182,0.42945429066809787,0.7575003167964354,0.1174855107410381],[-0.042003873283148814,-0.43079657968185797,-0.1927334827068446,-0.3518372766544816,0.7008847122034223,0.14009582399811923]]; const b2=[0.03546840994850856,-0.05506302515869595,0.3636987325680347,0.5342686771183935,0.44749069509625816];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.16954474871213254,0.5562637168910713,0.6350820657568814,0.04666676047400216,-1.0327694554880436,0.8626866774152132,-0.07252795191484052,0.7675122167566777,0.11924228965404744,-0.2486150852308418,-0.11550812847423031,-0.7547135804248963,-0.5121743787158852,0.9621551682026018,1.4265631729851678,0.14539932890625407],[0.37751954868889287,0.39022215009581174,0.9686477890794288,0.4787740530719882,-0.7114382016084425,-0.21182164663159012,0.3409981166915275,0.34206927971343154,0.3056568568936983,0.12720512278036963,-0.8875120803398939,0.08247249281404935,1.085565814289773,0.7109810256028171,-0.3575079053042522,-0.4758130854588485],[0.31457397507745505,0.6064361604278582,-0.5087119612933546,-0.307414702831449,0.5577267182065256,-0.24297862903815096,-1.1831498735092072,-0.5912152126030694,-0.07928457400084232,0.17405032112312538,0.09162368969454082,-0.017745952151519438,-0.8843248880849348,-0.3485745592049012,-0.2778077322553346,0.05364009971246995],[-0.6225912479034523,0.2635637770203677,-0.4019357573032658,0.0626709491758558,0.17975285514078898,0.1751263437851632,-0.6653213827766256,0.04974723571233869,0.6818702462471958,0.7603804095043349,0.03592270847604123,0.6776192471812051,-0.7790961107524377,1.247882823120879,0.5915989580366234,-0.8485778721862212],[-1.003845258208378,-0.379308278970167,-0.3809817676169507,0.06708809687134426,0.5014612913567249,-0.5684312143519192,0.21744807297540666,-0.55832804682203,0.566839196319245,0.6734906456326495,-0.6460847852728551,0.1826114023120202,0.7340546063527777,-0.038603000513306035,0.4016181406024401,0.11701676117396778],[-0.8161194563226355,-0.11893512676112504,0.8620780341592196,-0.04250617123614565,0.07277639806577779,0.1745334261630069,-0.3458785528803896,1.7452240479743446,-0.16689904768497876,-0.38611664172623483,0.5085868929479533,0.2279087621425157,-0.10774877932354038,-1.3406128630438876,-0.5578651122656464,1.0094316079435142]]; const b1=[-0.12180964598482301,0.5150235408273449,-0.9828344232235102,-0.11717236651824059,-0.3241291865440736,-0.27153287799359727]; const W2=[[-0.13923012698783863,0.4204091167247131,0.6867511810333453,0.5974491190236365,0.34725348455426863,0.07154842244474217],[-0.26578486628856113,-0.2623417182700822,-0.2427310444072794,-0.030175896793893216,-0.22134828166348447,-0.09764774912987986],[0.31065326349770317,0.7082578828673974,0.7193162994017774,0.9245678681824658,-0.2931892692763898,0.337776004263355],[0.07991338264412759,-0.6972134991467085,0.3818040991758442,-0.303319668304907,-0.2151724300346146,-0.3283477478015953],[0.29688057655618183,0.6940475379596676,-0.17634646405709942,0.17553032274017402,1.5674212070029474,0.3776003717390984]]; const b2=[0.29747872073626563,-1.039041981486488,0.43748725693936585,-0.4664390720538289,-0.9757000704815247];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.9192253387425015,-0.6819899975735767,-0.38025643431112316,0.3151830290199087,-0.42710046254854583,-0.19864601423607717,0.416201810107731,0.05185011266558551,-0.9718859150680778,-0.10048390188410808,-1.0513081065457173,0.6898228067208568,-0.12300537710638942,0.3654593849265203,0.014298280030283272,0.13200838509979723],[-1.239157905355782,-0.14075715625010027,-1.4015347553571753,-0.3739406057992893,-0.2862127941295364,0.160901843905625,-0.3912805337289064,0.4194572197740062,0.3243642358378608,-0.23274880598364867,-0.28367899170704414,0.7046096615002664,0.012888306637693012,-0.09137539282009902,-0.3768937525422677,-0.31082397008183194],[0.8991342982659304,-0.09240589341876781,0.3246874129144247,0.26435539475282543,-0.049415269473260096,1.4883033064865647,0.04302625390034061,0.6574970349028912,-0.4072853621814984,0.8375807945587547,0.16156901607408136,-0.6789402482555513,0.22576220912744313,0.3388846566102761,-0.4850760354384952,-1.5419075552539092],[0.7317646057198449,0.34973240694617996,0.49942510510732313,-0.24612953394029288,-1.543827257932217,0.3735425334554645,-0.2549282460199413,0.5564302104549517,-1.0909005794736266,-0.059124714775658255,0.300797358009731,-0.21494683989026736,1.7102497980830365,1.3237706992129967,-0.3532396909715171,0.146013757502034],[0.65841325135524,-0.6641460384789236,-0.6154729158427058,1.1486235226679882,-0.4732872644975865,0.2541907673674444,0.17873460571008565,-0.613566731549275,0.07985354415277093,-0.5572369273785138,-0.32857136576046897,-0.6376844100222634,0.6865498248989526,0.7679566184653143,0.3631518277088251,0.13594334022949567],[-0.1969703759191756,0.7353777253194488,-0.36811186618616737,0.15212588622812565,0.9169528674200671,0.679553058770868,-0.3891633467868576,0.3076086750138009,0.2634574068118641,0.3781833120705036,-0.17312347654985946,0.17189010446015726,1.2424504903323408,1.3794145563371716,0.01441302280340211,-0.9463953277031107]]; const b1=[0.10810109352833723,-0.07269511857781456,0.18812408447163756,-0.6356678742682602,-0.3556599407356674,-1.5937986656205265]; const W2=[[0.281381859356536,-1.1425068872038846,-0.020618033803109698,1.1396849641227318,0.12271414231362783,0.2839712926025592],[0.709347313825887,-0.388206103916977,0.6397998121706834,0.3007909509656104,-0.325756146715072,0.29484196698584453],[-0.1857316844531418,0.3612453523099716,-0.16957502859000392,-0.1843071658026148,-0.8780821222353619,-0.26178992771458026],[0.34702498448774777,0.07659657587895133,-0.8548362067397182,0.42945429066809787,0.7575003167964354,0.1174855107410381],[-0.042003873283148814,-0.43079657968185797,-0.1927334827068446,-0.3518372766544816,0.7008847122034223,0.14009582399811923]]; const b2=[0.03546840994850856,-0.05506302515869595,0.3636987325680347,0.5342686771183935,0.44749069509625816];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}