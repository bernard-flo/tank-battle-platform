function name(){return 'Atlas';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.28869328347818607,0.33843027909550966,0.5548034118500025,-0.809040317443858,-0.06426986003280924,-0.25942606147045877,0.5647786110077289,-0.589719174209765,0.07401208615921065,0.4180518830425208,-0.5865755538820474,0.7498509039674066,-0.3678232685925443,1.270733107829817,1.0720793075468444,1.0474670630653846],[-0.01335418615279682,-0.20129254466881358,0.903097276301313,-0.1517753368516327,-0.2258087085352853,0.22581432860731576,1.0040201107210835,-0.3464079007917493,0.4133544047285994,-0.7346286690249817,-0.6693874902346613,-0.22691480861044533,0.8787514253106204,-0.5090872611992214,-0.23166726789916095,-0.12238572027449515],[1.155354192580751,0.4502733103635422,-0.8523747121781915,-0.07618991978503377,-0.23498284279733853,-2.4453814987646956,-1.5787920910364206,0.44179053207975405,0.0024733376033719,0.5311449833975509,-0.5826473227141835,0.23848379909778675,-0.0181774004270306,-0.3055161860079655,-0.5148483226419824,1.3377466234179773],[-0.25624513984665,0.7648047548347418,-0.25603447790572453,1.2042942190899595,-0.019209845536052678,0.5273535858518322,0.006411035469314812,-0.16569095317816412,0.9122304850778329,-0.05691082904517631,-0.8975593039946126,0.932129119634089,0.29046269303004957,2.275954201019374,-0.3410708683446837,-0.5631791371534985],[0.05376831215153661,0.09273381546610406,-1.1153611019891294,0.521121801030005,-0.48516350992924373,-0.5796470718614964,0.03204529117111296,-0.16414829161058522,-0.015994759700936577,0.42386565461953024,-0.5437564942930295,0.08615589265270343,-0.03456472534344257,0.3988534090544794,-0.9383172563117037,-0.6236328354678597],[0.5838171931374239,-0.005313077396004395,0.31509769608019716,0.6352527270190477,0.17503190776722757,0.019975316564113672,-0.9892613722930784,1.3361598289037724,-0.23668399623703568,-0.697454300479895,-0.31731726973825886,0.07323958041859374,-0.19375367091249338,-0.5318574110141383,0.39819961744533583,1.8356976612321079]]; const b1=[0.04625630948125434,0.24275491942232708,-0.23487091817822506,-0.474875520149161,-0.6893269582513085,0.05232327267456227]; const W2=[[0.5399774016664879,0.052273608746962116,0.8746113367032149,0.5054929416307908,0.4599792170081711,0.5199853493279885],[0.9637588022789307,0.03835912694067602,0.9252661782739758,-0.24122439208579594,0.6524880939039193,-0.6856191887310138],[0.625859163226601,1.155763053789938,0.26997663727679455,0.3489513049698714,0.05979649520988536,-0.013183885484399017],[-1.9086462609223964,-0.03793586362777987,0.16879933877370296,-1.274629932028243,-1.2469087468434221,-0.38893028744694375],[0.5594346617184941,-0.002041689022482881,-0.7614265459250102,0.9852129123332231,0.8115299741895603,0.007963333942954495]]; const b2=[0.7542466884880977,1.3587181301696925,-1.0705806726215206,0.01463734749003679,-0.2848750536530837];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.9045542642518696,-0.37438448910778704,0.8734331815208599,-1.1401229495316956,0.3677391504627676,-1.7918383187529816,0.2862020409905607,-1.4572804201888583,-0.015862589404793823,-0.027935625167700914,-0.6448735492789729,0.8271508715177781,0.4548410625946593,0.842168110721602,1.6215675127207207,-0.09846437675437278],[-1.1489271290345155,-0.9378764070187897,-0.90283654103775,-0.10814675001782331,0.20733528627633263,0.7520320265154274,0.200167203893779,0.8127337257983852,0.26181389004089684,1.3787669589436744,-0.23908136359674448,0.515478229098888,-0.02012252103070926,-0.5258407841166498,-0.255110729947728,-0.6442046939216636],[-0.021374935903853143,0.008827153503934163,-1.0328211468272517,0.36996761931646643,0.4484178111504032,1.1078237055939066,0.4969343876568292,0.11992827883490456,-0.5725273210544578,0.5058389646230185,1.7717716001704933,-0.8151517259906277,0.24839169514707438,0.23747728303308158,0.19234974465774554,-1.0545778105672683],[0.08814453231617542,-0.2525572375950461,-0.17239956097322254,0.06281443352848798,-1.1483440893429335,-0.9137210282509473,-0.02336674001381582,1.0646776655686936,-0.4389086696070155,0.08642853284593532,-0.6921715716057095,0.4794590219047385,0.49286891914585984,0.13181858631830345,-1.0549307923488962,-0.3707786529811683],[1.0002246381265414,-0.5519573530263007,-0.1982026638102905,1.5373442682607363,-0.26439530563397373,-0.403177442479402,0.24342174053890653,-0.5779584457859229,-0.3397402544339724,0.01603875514387275,-0.3406685433653464,-0.7818445973809045,-0.6787309598026074,-0.7963872961208108,0.20922256105774428,0.562838423220615],[0.1592134373039053,-0.4679932292185981,1.079614965894074,-0.3841730435385198,0.4343767300392008,0.48183098991182066,-0.08906364535762554,0.5254614958501604,0.13842837791205118,-0.20729295028022507,-1.6264229119064595,2.1200427408186506,0.008458173195069973,0.2037347192428149,0.33796573000947516,-2.000140637320401]]; const b1=[-0.5919182570130685,0.38226985100591065,-0.3670564105337404,-0.08105492648468327,-0.1884701261561341,-0.6983231320663837]; const W2=[[0.6961770457328782,-0.35270531601754385,-0.13961158510821436,1.3371881735115596,-0.26361333618171057,0.7346121320835102],[0.6584640727620866,-0.09607544757007998,-0.06702719942221226,-0.12403739635069377,-1.2726642203211123,0.9328666841360812],[-0.9203933245380431,0.4612667813246147,0.19832508883552252,-0.6530250159319475,-0.5775305715344644,-0.21507211290720846],[0.16533046168614682,-0.5288443051297178,-0.8111791833556118,0.0502749051253418,-0.5791429147960165,0.25483358719434407],[0.8496941437153697,-1.3695223891672892,1.125795319546219,0.009862625091467408,0.7168254778156421,-0.5697286173906215]]; const b2=[0.6527055999839966,-0.02320488949690348,-0.5914264407128205,0.8100775339184484,0.7764902673307679];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.28869328347818607,0.33843027909550966,0.5548034118500025,-0.809040317443858,-0.06426986003280924,-0.25942606147045877,0.5647786110077289,-0.589719174209765,0.07401208615921065,0.4180518830425208,-0.5865755538820474,0.7498509039674066,-0.3678232685925443,1.270733107829817,1.0720793075468444,1.0474670630653846],[-0.01335418615279682,-0.20129254466881358,0.903097276301313,-0.1517753368516327,-0.2258087085352853,0.22581432860731576,1.0040201107210835,-0.3464079007917493,0.4133544047285994,-0.7346286690249817,-0.6693874902346613,-0.22691480861044533,0.8787514253106204,-0.5090872611992214,-0.23166726789916095,-0.12238572027449515],[1.155354192580751,0.4502733103635422,-0.8523747121781915,-0.07618991978503377,-0.23498284279733853,-2.4453814987646956,-1.5787920910364206,0.44179053207975405,0.0024733376033719,0.5311449833975509,-0.5826473227141835,0.23848379909778675,-0.0181774004270306,-0.3055161860079655,-0.5148483226419824,1.3377466234179773],[-0.25624513984665,0.7648047548347418,-0.25603447790572453,1.2042942190899595,-0.019209845536052678,0.5273535858518322,0.006411035469314812,-0.16569095317816412,0.9122304850778329,-0.05691082904517631,-0.8975593039946126,0.932129119634089,0.29046269303004957,2.275954201019374,-0.3410708683446837,-0.5631791371534985],[0.05376831215153661,0.09273381546610406,-1.1153611019891294,0.521121801030005,-0.48516350992924373,-0.5796470718614964,0.03204529117111296,-0.16414829161058522,-0.015994759700936577,0.42386565461953024,-0.5437564942930295,0.08615589265270343,-0.03456472534344257,0.3988534090544794,-0.9383172563117037,-0.6236328354678597],[0.5838171931374239,-0.005313077396004395,0.31509769608019716,0.6352527270190477,0.17503190776722757,0.019975316564113672,-0.9892613722930784,1.3361598289037724,-0.23668399623703568,-0.697454300479895,-0.31731726973825886,0.07323958041859374,-0.19375367091249338,-0.5318574110141383,0.39819961744533583,1.8356976612321079]]; const b1=[0.04625630948125434,0.24275491942232708,-0.23487091817822506,-0.474875520149161,-0.6893269582513085,0.05232327267456227]; const W2=[[0.5399774016664879,0.052273608746962116,0.8746113367032149,0.5054929416307908,0.4599792170081711,0.5199853493279885],[0.9637588022789307,0.03835912694067602,0.9252661782739758,-0.24122439208579594,0.6524880939039193,-0.6856191887310138],[0.625859163226601,1.155763053789938,0.26997663727679455,0.3489513049698714,0.05979649520988536,-0.013183885484399017],[-1.9086462609223964,-0.03793586362777987,0.16879933877370296,-1.274629932028243,-1.2469087468434221,-0.38893028744694375],[0.5594346617184941,-0.002041689022482881,-0.7614265459250102,0.9852129123332231,0.8115299741895603,0.007963333942954495]]; const b2=[0.7542466884880977,1.3587181301696925,-1.0705806726215206,0.01463734749003679,-0.2848750536530837];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.9045542642518696,-0.37438448910778704,0.8734331815208599,-1.1401229495316956,0.3677391504627676,-1.7918383187529816,0.2862020409905607,-1.4572804201888583,-0.015862589404793823,-0.027935625167700914,-0.6448735492789729,0.8271508715177781,0.4548410625946593,0.842168110721602,1.6215675127207207,-0.09846437675437278],[-1.1489271290345155,-0.9378764070187897,-0.90283654103775,-0.10814675001782331,0.20733528627633263,0.7520320265154274,0.200167203893779,0.8127337257983852,0.26181389004089684,1.3787669589436744,-0.23908136359674448,0.515478229098888,-0.02012252103070926,-0.5258407841166498,-0.255110729947728,-0.6442046939216636],[-0.021374935903853143,0.008827153503934163,-1.0328211468272517,0.36996761931646643,0.4484178111504032,1.1078237055939066,0.4969343876568292,0.11992827883490456,-0.5725273210544578,0.5058389646230185,1.7717716001704933,-0.8151517259906277,0.24839169514707438,0.23747728303308158,0.19234974465774554,-1.0545778105672683],[0.08814453231617542,-0.2525572375950461,-0.17239956097322254,0.06281443352848798,-1.1483440893429335,-0.9137210282509473,-0.02336674001381582,1.0646776655686936,-0.4389086696070155,0.08642853284593532,-0.6921715716057095,0.4794590219047385,0.49286891914585984,0.13181858631830345,-1.0549307923488962,-0.3707786529811683],[1.0002246381265414,-0.5519573530263007,-0.1982026638102905,1.5373442682607363,-0.26439530563397373,-0.403177442479402,0.24342174053890653,-0.5779584457859229,-0.3397402544339724,0.01603875514387275,-0.3406685433653464,-0.7818445973809045,-0.6787309598026074,-0.7963872961208108,0.20922256105774428,0.562838423220615],[0.1592134373039053,-0.4679932292185981,1.079614965894074,-0.3841730435385198,0.4343767300392008,0.48183098991182066,-0.08906364535762554,0.5254614958501604,0.13842837791205118,-0.20729295028022507,-1.6264229119064595,2.1200427408186506,0.008458173195069973,0.2037347192428149,0.33796573000947516,-2.000140637320401]]; const b1=[-0.5919182570130685,0.38226985100591065,-0.3670564105337404,-0.08105492648468327,-0.1884701261561341,-0.6983231320663837]; const W2=[[0.6961770457328782,-0.35270531601754385,-0.13961158510821436,1.3371881735115596,-0.26361333618171057,0.7346121320835102],[0.6584640727620866,-0.09607544757007998,-0.06702719942221226,-0.12403739635069377,-1.2726642203211123,0.9328666841360812],[-0.9203933245380431,0.4612667813246147,0.19832508883552252,-0.6530250159319475,-0.5775305715344644,-0.21507211290720846],[0.16533046168614682,-0.5288443051297178,-0.8111791833556118,0.0502749051253418,-0.5791429147960165,0.25483358719434407],[0.8496941437153697,-1.3695223891672892,1.125795319546219,0.009862625091467408,0.7168254778156421,-0.5697286173906215]]; const b2=[0.6527055999839966,-0.02320488949690348,-0.5914264407128205,0.8100775339184484,0.7764902673307679];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.4028853575229727,-1.369899334072684,-0.39096458294862724,0.6118339580384421,-1.1328014850994301,0.18794121295461633,-1.0190766773955333,1.3622752880100197,0.955635988859655,-1.1327008956288316,-0.11044756405563419,0.9659959248027208,-1.3924492371373383,0.34528414252790085,0.09309804302711135,-0.866468083746169],[0.19283829345644926,-1.567569101870537,-0.7442238678689151,-0.2072646394514771,1.1979320494893244,-0.7435049065071008,-0.22749595384779467,-0.47735377758787495,0.423005846188948,0.2782962999217701,0.388318363724361,0.5626707184671051,-0.9306323820160176,0.5828939266072027,0.9782667373948959,1.295957020515763],[0.09304907966063372,-0.2212697162753403,0.16761921385687814,0.2127877589571296,-0.07664132818548226,-0.43231590179464563,-0.18538537669096522,1.4864808305367427,0.18367481821084763,-1.2693155293559313,0.44749440234006427,-0.38547087781527456,-0.08953035705044146,-0.21156836658457684,-0.39471913983243645,0.7306290667385181],[0.1889031772447768,1.1336332317418716,0.5838967830101495,0.45445959473830644,-0.6254996166109207,0.09331256372558086,-0.22332170918217537,1.087594471532716,1.3621592842591026,0.8234707256767371,0.8204172745229176,-0.2824285700610259,-0.1464241033108379,-0.6562558246763239,0.5911824037011735,-0.9019737551846102],[-2.6786314446947075,1.2487618983061584,0.22896999834250917,-0.4507727211766458,-0.3755232376164542,0.9572957301872504,-0.3819106119000181,0.07137855524762571,0.0828241542309334,-0.06451636192888216,0.03377102960610603,-0.054216085296679886,0.23027683898971354,0.02530379222417177,0.2237803073667361,-0.24952794846317222],[-0.09365918097140359,0.23671015816165886,-1.2025437836956996,-0.387069074604767,-0.8754564292989755,0.11197894742973917,-0.49577385225380965,0.6890078161780745,0.4495465050313679,-0.20986103579551266,-0.468921237972571,0.3300479074868775,-0.14883975900850638,-0.3721261472674373,-0.7091142024448407,0.16040386139312288]]; const b1=[-0.7174443251299369,-0.4270936803279334,-0.09349928762434796,-0.046124415856826056,0.17720064074640246,-0.07422765165549963]; const W2=[[-0.4104794925789417,1.0868198427948268,0.17484009792639388,-0.1342091753069675,-0.19259680140451121,0.5189517857151458],[1.477062557914259,1.0565428140920454,0.7229069120357079,0.3464079179789862,0.7698823723258155,-0.47036219244482025],[-0.35011999896176277,0.5143938619659298,-0.12566316368926822,-0.51402675046915,-1.6692655198640844,0.2006648868585718],[0.05975027418061929,0.6149174478119499,-0.5541940812496191,0.6003551964485021,0.3643837505326425,-0.21011316490039406],[0.8776364096316179,-0.04213902647764173,-0.13509391054580427,0.31174413712859794,-0.8426507736148671,-1.4191329837316529]]; const b2=[-0.4574556271093006,-1.0739457482207562,-0.3798070874643281,-0.2941000239419481,0.6254890035959229];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.28869328347818607,0.33843027909550966,0.5548034118500025,-0.809040317443858,-0.06426986003280924,-0.25942606147045877,0.5647786110077289,-0.589719174209765,0.07401208615921065,0.4180518830425208,-0.5865755538820474,0.7498509039674066,-0.3678232685925443,1.270733107829817,1.0720793075468444,1.0474670630653846],[-0.01335418615279682,-0.20129254466881358,0.903097276301313,-0.1517753368516327,-0.2258087085352853,0.22581432860731576,1.0040201107210835,-0.3464079007917493,0.4133544047285994,-0.7346286690249817,-0.6693874902346613,-0.22691480861044533,0.8787514253106204,-0.5090872611992214,-0.23166726789916095,-0.12238572027449515],[1.155354192580751,0.4502733103635422,-0.8523747121781915,-0.07618991978503377,-0.23498284279733853,-2.4453814987646956,-1.5787920910364206,0.44179053207975405,0.0024733376033719,0.5311449833975509,-0.5826473227141835,0.23848379909778675,-0.0181774004270306,-0.3055161860079655,-0.5148483226419824,1.3377466234179773],[-0.25624513984665,0.7648047548347418,-0.25603447790572453,1.2042942190899595,-0.019209845536052678,0.5273535858518322,0.006411035469314812,-0.16569095317816412,0.9122304850778329,-0.05691082904517631,-0.8975593039946126,0.932129119634089,0.29046269303004957,2.275954201019374,-0.3410708683446837,-0.5631791371534985],[0.05376831215153661,0.09273381546610406,-1.1153611019891294,0.521121801030005,-0.48516350992924373,-0.5796470718614964,0.03204529117111296,-0.16414829161058522,-0.015994759700936577,0.42386565461953024,-0.5437564942930295,0.08615589265270343,-0.03456472534344257,0.3988534090544794,-0.9383172563117037,-0.6236328354678597],[0.5838171931374239,-0.005313077396004395,0.31509769608019716,0.6352527270190477,0.17503190776722757,0.019975316564113672,-0.9892613722930784,1.3361598289037724,-0.23668399623703568,-0.697454300479895,-0.31731726973825886,0.07323958041859374,-0.19375367091249338,-0.5318574110141383,0.39819961744533583,1.8356976612321079]]; const b1=[0.04625630948125434,0.24275491942232708,-0.23487091817822506,-0.474875520149161,-0.6893269582513085,0.05232327267456227]; const W2=[[0.5399774016664879,0.052273608746962116,0.8746113367032149,0.5054929416307908,0.4599792170081711,0.5199853493279885],[0.9637588022789307,0.03835912694067602,0.9252661782739758,-0.24122439208579594,0.6524880939039193,-0.6856191887310138],[0.625859163226601,1.155763053789938,0.26997663727679455,0.3489513049698714,0.05979649520988536,-0.013183885484399017],[-1.9086462609223964,-0.03793586362777987,0.16879933877370296,-1.274629932028243,-1.2469087468434221,-0.38893028744694375],[0.5594346617184941,-0.002041689022482881,-0.7614265459250102,0.9852129123332231,0.8115299741895603,0.007963333942954495]]; const b2=[0.7542466884880977,1.3587181301696925,-1.0705806726215206,0.01463734749003679,-0.2848750536530837];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}