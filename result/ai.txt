function name(){return 'Atlas';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.698612875669845,-0.5725773859817616,-0.008574360753210226,-0.016094888548571773,-0.22618826635304856,-0.008849252986753972,-0.3025745800852171,-0.13408508654198714,-0.7033086042250285,-0.02645611567951338,-0.8236765031529736,0.7562598836190029,-0.5386138807978088,0.1641669767655417,0.02906916981846372,0.37185578925336643],[-0.4086407780993881,-1.3682156812618516,-0.5695870012636803,-0.24893203589787682,-0.5195403907483784,0.24715978548243775,-0.19244966489480458,0.4393689849312104,-0.7096455297897374,-0.0050327844671216124,0.40374580338195565,0.49448934472496375,-0.38133085945974604,0.6318407771933412,-0.09504075806367522,-0.532707093268227],[-0.07806502179662306,-0.0342381779687147,0.4642837427884545,-0.08346886257632011,-0.1844324846173672,0.8480292751969734,-0.1294422036611954,0.7201079650715163,0.3122646610006937,0.3578441825201703,0.7143724173337598,-0.8142625877122819,-0.07827964575128352,0.26365511356307825,-0.25066488059375697,-0.7467456652264949],[0.06500995997553335,0.16318702885385494,-0.4412691524647361,0.4004302383289759,-1.1746655623846625,0.2636886706732808,-0.1359122654546432,0.7432730159672322,-0.8821820006701792,-0.7034359002578283,0.2750689237059132,0.3421589720571861,0.2587466088034437,-0.5880642616353027,-0.9046741962085459,-0.1711421735000391],[1.1045910177415228,-0.49285301052163005,-0.8025990712803998,0.1808291160597951,-0.6443839394822337,-0.5462930247098923,-0.3305765620790413,-1.0657134934051569,0.03467882623910985,-0.6276661814452408,0.16239045348907138,0.15125732077678578,-0.05820053226217184,0.15448228413029574,0.845151146298659,0.44954156138223067],[0.32982637744068727,-0.12492384356909692,-0.6942061791998394,0.17319210655919873,1.1547596561733877,1.0572394146216182,-0.11113398354021053,-0.11530163688692281,-0.2817396850852406,0.24708213305735865,-0.6669967157603383,0.6189527839547146,0.4804898840307832,0.5695471473842457,0.5474132112112382,-1.1680883958096047]]; const b1=[0.26176092808968743,0.39808299991562224,-0.14173580638333882,-0.3071332393354838,0.8855617438281929,-0.3561293347346072]; const W2=[[0.21418068492410963,-0.7511650147892487,0.2442842709139983,0.255102780077076,-0.989991756478637,0.323170531516927],[-0.46968232128623505,-0.911716758430738,0.07296716053197617,0.4936238248409034,-0.07447940578456114,0.06457116018691925],[0.2444879238642033,0.6678172446682324,-0.6607850878410579,-0.04761395715089961,-0.6519301464359539,-0.04472847433726204],[0.2727667170905358,-0.11756091925827136,0.06348310521577034,-0.1503582875751643,-0.43035122264284165,-0.2717286693984872],[0.15529496259961345,-0.02814440560272094,0.18746597294171133,-0.8477351182004284,0.7249917270789497,-0.8397398409999884]]; const b2=[0.5984300188686997,0.48956842535310674,-0.9645061328058567,0.42961274997944754,0.45937224420155337];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.32932533956625876,-0.06794143798094604,0.6241908273549128,0.6350245940964432,0.1055552823610275,-0.07769859729105125,-0.6453994939104226,0.1947605788520086,0.5154548843144781,0.25723496931151923,-0.41769896490736075,0.9615509205772255,-0.800189833564177,0.5380206686672013,-0.5548599301729472,0.023143291081041052],[-0.42182784524493977,-1.124311972935146,-0.47220473954736236,0.2152803107741425,-0.2121138709186171,-0.39069995424557385,-0.7981448742110266,0.6963625284374464,0.5080215769280143,0.6721747334742925,0.32466272634876786,0.47475531889126277,0.5783234376606193,1.0818815362292433,0.08741422026287192,-0.2530288368758997],[0.10259791133864443,-0.07946739895510374,0.5503311270462534,0.5484972235942313,0.03749014835010457,0.10129094593934883,-0.9296424175380046,0.507298660691892,-0.3665592119629158,-0.15236167473093118,-1.2497189544650944,0.08188380610800416,-0.858914763705562,0.38605368742820295,-0.6623853682035538,-0.6888565692718743],[0.0499201304793217,0.8264035261813533,0.6552264060582448,0.042234729023097294,-0.859744099297217,-0.06353260068244096,0.5717743538244577,0.3083313544929157,0.09616262819081804,1.3792956023716194,-0.8313159819167746,-0.11503483696094924,-0.10684697739874668,-0.12569630077216754,-0.07264401309697306,-0.49661491317600726],[-0.9758725162076791,-0.08489630368303389,-0.937832788749026,-0.18165960415612162,0.25999201414490125,0.34596005356641557,-0.6210052844122942,0.886594238169458,0.5253358255880887,-0.9507816271501385,-0.016555285953295834,0.6400096847372392,-0.3741002560449133,0.17967331604894943,-0.5440562727226878,0.16062446327075117],[-0.5421324320384897,-0.07765137392460891,-0.05720815961614292,0.44980369987527724,-1.1389909870139079,0.37574919498089693,-0.14508462401317268,-0.13398194475746297,0.50120528393546,-0.27255987516206914,-0.43448582310037265,0.24352976433708348,-0.8583865634191968,-0.31102006954953176,-0.30637826760070663,0.40540137627382183]]; const b1=[0.0608400136908239,-0.1495111450001088,1.2461496961848473,0.10672752425638718,-0.5338494656497046,-0.07930595192916359]; const W2=[[-0.4315391593936653,0.14646755510686454,-0.7888573409301851,-0.36938265778194856,-0.692195589225352,0.4725383378826121],[0.9515971171877823,0.8989892904532002,0.12353848537715814,0.10824943042078458,-0.12166786333107296,-0.1376788364024299],[1.178970026738356,0.4980013150514982,-0.04917494583412394,0.46188961857475025,-0.413358831453798,0.5598544662229897],[0.1681033599377224,0.04155353201949895,0.05177947872381823,0.6940100320469923,0.6945099254715541,0.5128766985367644],[0.5578841512514681,-0.4617779494856502,-0.5033463617058306,1.54345605699049,-0.11251032195646299,-0.36790652602244167]]; const b2=[-0.633478679740288,0.93232471943276,-0.19559665122712253,0.15644389568499656,-0.9193427261911452];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.19065186017138042,0.51663453383608,-0.7212212085414411,-0.33270508874725246,0.18318498093388522,0.46066578910154216,0.2716075989406364,0.6742076980598349,0.2227056644722438,-0.12753950474418657,0.5076034983034511,0.7345286004922496,0.01666936923730617,0.8608199845465186,0.8287125847881129,0.3525218398026638],[0.3120729794954328,-0.39693031154908354,0.5580198471295063,-0.3006424306110961,-0.18690539851953997,0.04833845956307922,-0.00657894159788612,0.5173175070026805,0.03627658628605048,0.7919813427370871,-0.37698227008019775,0.5906211481261744,0.8203208619536915,0.12324104366887267,-0.457794755945067,-1.1347197624801104],[0.22311423628570912,0.520366486899369,-0.10427103065051793,-0.9378742985949938,0.453749420332288,-0.5368219120093678,-0.7782724973470602,-0.024057058578306263,0.0596637527494171,0.3836427425351687,-0.007110100643786185,-0.01602463202207599,-0.16227779564491845,0.1804024119410549,-0.2774642054183938,0.5151480528296829],[0.044426454712500424,0.3131729145505075,0.5214579526625268,0.29506797015500064,0.31220605767565857,0.5470368533093823,-0.9099197320184294,-0.5727631597059932,0.5254856544654464,-0.47832440948967647,-0.36976404594646456,-0.03792431534066129,-0.5556223194845558,1.112081658281033,1.1668847947510586,-0.6490239992508793],[0.33015245876901855,-0.1280639414769713,-0.004463107200163824,0.8456709640689984,0.9243746566334254,-0.7337568796222115,-0.4223623539018999,-0.5837085607936525,0.6337349629557979,0.5283077491504278,0.2874690233263242,0.47769518766597846,0.13049308628006911,-0.2231456136341343,0.19673565931345552,0.8268817242832952],[0.14769665752657446,-0.8747084417115558,0.560003670517898,-0.0466370529644697,0.019570328428600316,-0.06320211932971488,1.0216837219406671,0.6474546649171986,0.009341082818916518,-0.3662929848176485,0.25549547620656254,0.06515347150772614,-0.41043192420921104,0.356937006063773,0.2475765515893798,1.1087354083571608]]; const b1=[-0.3335781408236751,0.45709974024966193,0.21825018288511344,-0.3538996680249795,0.012786550936648336,-0.009144055256324918]; const W2=[[0.252564976479863,-0.20732712112934348,0.17906325739050172,-0.3198001845435912,-0.4355274595388485,-0.13129231652850687],[-0.3150082495816532,-0.17687693346575364,0.7004551504382887,0.36624203170290803,-0.9341539347990445,-0.2283055128853034],[0.5748001782050081,0.27491625260355723,0.29606037712132544,0.7890085183325704,-0.4458827207919972,-0.4455929605682124],[-0.556172015239868,-0.4849321396400593,0.5124851545594231,-1.22490348040481,-0.522922132938804,-1.2357879533780847],[-0.2114299310900985,0.5987169957983196,0.11550760040264044,0.33765680601732206,1.0466060273377173,0.9823558042169839]]; const b2=[0.18321041380938208,-0.17453203408947815,0.743967119069741,-0.0946950656752603,0.18891190013585052];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.698612875669845,-0.5725773859817616,-0.008574360753210226,-0.016094888548571773,-0.22618826635304856,-0.008849252986753972,-0.3025745800852171,-0.13408508654198714,-0.7033086042250285,-0.02645611567951338,-0.8236765031529736,0.7562598836190029,-0.5386138807978088,0.1641669767655417,0.02906916981846372,0.37185578925336643],[-0.4086407780993881,-1.3682156812618516,-0.5695870012636803,-0.24893203589787682,-0.5195403907483784,0.24715978548243775,-0.19244966489480458,0.4393689849312104,-0.7096455297897374,-0.0050327844671216124,0.40374580338195565,0.49448934472496375,-0.38133085945974604,0.6318407771933412,-0.09504075806367522,-0.532707093268227],[-0.07806502179662306,-0.0342381779687147,0.4642837427884545,-0.08346886257632011,-0.1844324846173672,0.8480292751969734,-0.1294422036611954,0.7201079650715163,0.3122646610006937,0.3578441825201703,0.7143724173337598,-0.8142625877122819,-0.07827964575128352,0.26365511356307825,-0.25066488059375697,-0.7467456652264949],[0.06500995997553335,0.16318702885385494,-0.4412691524647361,0.4004302383289759,-1.1746655623846625,0.2636886706732808,-0.1359122654546432,0.7432730159672322,-0.8821820006701792,-0.7034359002578283,0.2750689237059132,0.3421589720571861,0.2587466088034437,-0.5880642616353027,-0.9046741962085459,-0.1711421735000391],[1.1045910177415228,-0.49285301052163005,-0.8025990712803998,0.1808291160597951,-0.6443839394822337,-0.5462930247098923,-0.3305765620790413,-1.0657134934051569,0.03467882623910985,-0.6276661814452408,0.16239045348907138,0.15125732077678578,-0.05820053226217184,0.15448228413029574,0.845151146298659,0.44954156138223067],[0.32982637744068727,-0.12492384356909692,-0.6942061791998394,0.17319210655919873,1.1547596561733877,1.0572394146216182,-0.11113398354021053,-0.11530163688692281,-0.2817396850852406,0.24708213305735865,-0.6669967157603383,0.6189527839547146,0.4804898840307832,0.5695471473842457,0.5474132112112382,-1.1680883958096047]]; const b1=[0.26176092808968743,0.39808299991562224,-0.14173580638333882,-0.3071332393354838,0.8855617438281929,-0.3561293347346072]; const W2=[[0.21418068492410963,-0.7511650147892487,0.2442842709139983,0.255102780077076,-0.989991756478637,0.323170531516927],[-0.46968232128623505,-0.911716758430738,0.07296716053197617,0.4936238248409034,-0.07447940578456114,0.06457116018691925],[0.2444879238642033,0.6678172446682324,-0.6607850878410579,-0.04761395715089961,-0.6519301464359539,-0.04472847433726204],[0.2727667170905358,-0.11756091925827136,0.06348310521577034,-0.1503582875751643,-0.43035122264284165,-0.2717286693984872],[0.15529496259961345,-0.02814440560272094,0.18746597294171133,-0.8477351182004284,0.7249917270789497,-0.8397398409999884]]; const b2=[0.5984300188686997,0.48956842535310674,-0.9645061328058567,0.42961274997944754,0.45937224420155337];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.698612875669845,-0.5725773859817616,-0.008574360753210226,-0.016094888548571773,-0.22618826635304856,-0.008849252986753972,-0.3025745800852171,-0.13408508654198714,-0.7033086042250285,-0.02645611567951338,-0.8236765031529736,0.7562598836190029,-0.5386138807978088,0.1641669767655417,0.02906916981846372,0.37185578925336643],[-0.4086407780993881,-1.3682156812618516,-0.5695870012636803,-0.24893203589787682,-0.5195403907483784,0.24715978548243775,-0.19244966489480458,0.4393689849312104,-0.7096455297897374,-0.0050327844671216124,0.40374580338195565,0.49448934472496375,-0.38133085945974604,0.6318407771933412,-0.09504075806367522,-0.532707093268227],[-0.07806502179662306,-0.0342381779687147,0.4642837427884545,-0.08346886257632011,-0.1844324846173672,0.8480292751969734,-0.1294422036611954,0.7201079650715163,0.3122646610006937,0.3578441825201703,0.7143724173337598,-0.8142625877122819,-0.07827964575128352,0.26365511356307825,-0.25066488059375697,-0.7467456652264949],[0.06500995997553335,0.16318702885385494,-0.4412691524647361,0.4004302383289759,-1.1746655623846625,0.2636886706732808,-0.1359122654546432,0.7432730159672322,-0.8821820006701792,-0.7034359002578283,0.2750689237059132,0.3421589720571861,0.2587466088034437,-0.5880642616353027,-0.9046741962085459,-0.1711421735000391],[1.1045910177415228,-0.49285301052163005,-0.8025990712803998,0.1808291160597951,-0.6443839394822337,-0.5462930247098923,-0.3305765620790413,-1.0657134934051569,0.03467882623910985,-0.6276661814452408,0.16239045348907138,0.15125732077678578,-0.05820053226217184,0.15448228413029574,0.845151146298659,0.44954156138223067],[0.32982637744068727,-0.12492384356909692,-0.6942061791998394,0.17319210655919873,1.1547596561733877,1.0572394146216182,-0.11113398354021053,-0.11530163688692281,-0.2817396850852406,0.24708213305735865,-0.6669967157603383,0.6189527839547146,0.4804898840307832,0.5695471473842457,0.5474132112112382,-1.1680883958096047]]; const b1=[0.26176092808968743,0.39808299991562224,-0.14173580638333882,-0.3071332393354838,0.8855617438281929,-0.3561293347346072]; const W2=[[0.21418068492410963,-0.7511650147892487,0.2442842709139983,0.255102780077076,-0.989991756478637,0.323170531516927],[-0.46968232128623505,-0.911716758430738,0.07296716053197617,0.4936238248409034,-0.07447940578456114,0.06457116018691925],[0.2444879238642033,0.6678172446682324,-0.6607850878410579,-0.04761395715089961,-0.6519301464359539,-0.04472847433726204],[0.2727667170905358,-0.11756091925827136,0.06348310521577034,-0.1503582875751643,-0.43035122264284165,-0.2717286693984872],[0.15529496259961345,-0.02814440560272094,0.18746597294171133,-0.8477351182004284,0.7249917270789497,-0.8397398409999884]]; const b2=[0.5984300188686997,0.48956842535310674,-0.9645061328058567,0.42961274997944754,0.45937224420155337];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.698612875669845,-0.5725773859817616,-0.008574360753210226,-0.016094888548571773,-0.22618826635304856,-0.008849252986753972,-0.3025745800852171,-0.13408508654198714,-0.7033086042250285,-0.02645611567951338,-0.8236765031529736,0.7562598836190029,-0.5386138807978088,0.1641669767655417,0.02906916981846372,0.37185578925336643],[-0.4086407780993881,-1.3682156812618516,-0.5695870012636803,-0.24893203589787682,-0.5195403907483784,0.24715978548243775,-0.19244966489480458,0.4393689849312104,-0.7096455297897374,-0.0050327844671216124,0.40374580338195565,0.49448934472496375,-0.38133085945974604,0.6318407771933412,-0.09504075806367522,-0.532707093268227],[-0.07806502179662306,-0.0342381779687147,0.4642837427884545,-0.08346886257632011,-0.1844324846173672,0.8480292751969734,-0.1294422036611954,0.7201079650715163,0.3122646610006937,0.3578441825201703,0.7143724173337598,-0.8142625877122819,-0.07827964575128352,0.26365511356307825,-0.25066488059375697,-0.7467456652264949],[0.06500995997553335,0.16318702885385494,-0.4412691524647361,0.4004302383289759,-1.1746655623846625,0.2636886706732808,-0.1359122654546432,0.7432730159672322,-0.8821820006701792,-0.7034359002578283,0.2750689237059132,0.3421589720571861,0.2587466088034437,-0.5880642616353027,-0.9046741962085459,-0.1711421735000391],[1.1045910177415228,-0.49285301052163005,-0.8025990712803998,0.1808291160597951,-0.6443839394822337,-0.5462930247098923,-0.3305765620790413,-1.0657134934051569,0.03467882623910985,-0.6276661814452408,0.16239045348907138,0.15125732077678578,-0.05820053226217184,0.15448228413029574,0.845151146298659,0.44954156138223067],[0.32982637744068727,-0.12492384356909692,-0.6942061791998394,0.17319210655919873,1.1547596561733877,1.0572394146216182,-0.11113398354021053,-0.11530163688692281,-0.2817396850852406,0.24708213305735865,-0.6669967157603383,0.6189527839547146,0.4804898840307832,0.5695471473842457,0.5474132112112382,-1.1680883958096047]]; const b1=[0.26176092808968743,0.39808299991562224,-0.14173580638333882,-0.3071332393354838,0.8855617438281929,-0.3561293347346072]; const W2=[[0.21418068492410963,-0.7511650147892487,0.2442842709139983,0.255102780077076,-0.989991756478637,0.323170531516927],[-0.46968232128623505,-0.911716758430738,0.07296716053197617,0.4936238248409034,-0.07447940578456114,0.06457116018691925],[0.2444879238642033,0.6678172446682324,-0.6607850878410579,-0.04761395715089961,-0.6519301464359539,-0.04472847433726204],[0.2727667170905358,-0.11756091925827136,0.06348310521577034,-0.1503582875751643,-0.43035122264284165,-0.2717286693984872],[0.15529496259961345,-0.02814440560272094,0.18746597294171133,-0.8477351182004284,0.7249917270789497,-0.8397398409999884]]; const b2=[0.5984300188686997,0.48956842535310674,-0.9645061328058567,0.42961274997944754,0.45937224420155337];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}