function name(){return 'Atlas';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.34245578801112325,0.6577467269893162,0.3859824419484704,0.28116843508916023,-1.015443167691388,0.01494900451396508,-0.4073638911731101,0.13468135919009283,0.2870906189639263,-0.81664655636886,-0.5046995733319798,0.44296208363676637,-0.5668879018240038,0.38672686477003937,-0.03836509648652714,-0.10941300744053206],[-0.25071122269467827,-0.6959632199100224,-0.08278803723227031,0.015143583713715028,-0.04475911572538055,-0.4433659768904158,-0.6502502820517628,0.060928960047742446,0.9732067188389426,1.612964847813014,-0.2692686158881518,0.13630566154973206,0.15120647499407414,-0.11962663218200432,0.5003491054552929,-0.2002948324164871],[-0.9094146246780445,-0.20144177403565522,0.45468271675436345,0.13840006905734048,0.4925162479069927,-0.21336203335652315,-0.9372955418277136,0.8190498049592047,0.19688145247036642,-0.04260393772567475,-0.6207484107728716,0.3157965201546407,-0.04928127081545824,0.8929538796669428,-0.012858954763731362,-0.4706908103439815],[-0.8082134489205903,0.5634965133829597,0.11896133503904559,-0.19369274160377192,-1.0635701867169904,0.09775300752268067,-0.1393712248420214,0.4048671376095925,0.18508509113760724,1.372595584220474,0.25824105605797043,-0.8353031200768454,0.08260799836759258,-0.028006174843929865,0.07223197550047783,-1.6741192445137867],[-1.9176966957492028,1.278796427558095,0.11397660061317355,-0.9276354729803673,0.031660254192245246,0.3550660729194026,-1.6395180266631946,1.093787677968435,-0.812193734013167,0.9210848138877256,-0.24415043186538227,0.04251055543587154,0.26383336559631554,-1.198347095766004,0.019661677670033295,1.012165198116558],[0.16013187292722544,-0.11536719473661555,-0.06200991200309597,0.22328745379808512,-0.3466649875724703,0.6910020864683626,-0.5543572162773458,-0.19827782970560406,0.2359142361262179,0.21498792263521999,-0.4505686688564522,-0.05757125480454196,-0.5472104193857953,0.5957439438538806,-0.8986550398002544,-0.014894121789511883]]; const b1=[-1.066450942263903,-0.3834435992656987,-0.13949481444462675,0.6113078599640345,-0.5566758837425719,-0.4522697583274941]; const W2=[[-0.1537421218422361,1.1010611395564625,0.8690144624125772,-0.05234631555667352,-0.3263800672153008,0.19287522897475173],[0.8424035834299162,1.4161637914743443,-0.096739749101592,1.130416884956138,-0.9091682053765551,0.13230641410620791],[0.7620425322254001,0.09407118535802739,0.16795249811573015,0.4233324438241745,-0.10906416238110156,0.3088895386615533],[-0.130304166863415,1.329390730363731,-0.4041239727078787,-0.018531954301913955,-0.17710228153381669,0.8922533567522473],[0.461440902305228,0.15994833409050083,-0.3675256758063696,0.9202876769012733,-1.1023146346637425,-0.9672728879583569]]; const b2=[0.044162074326086445,0.2684572200157601,0.719344336541423,-0.945060230745502,0.13578644703756637];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.24686325620748656,0.160615737374639,-1.3249548787991046,-1.0113157065615972,0.16298110994213566,-0.5773242325386553,0.1911317596842404,-0.2566961879144123,-0.09751628265423401,-0.9223083768762622,-0.2178884159395408,-0.23712864856340424,0.1630586084723294,0.07865101927001099,1.450158168495282,-0.1763939045232254],[0.7005667807645326,-0.04029420841241632,-0.13145420526630386,-0.38531123445287774,-0.2997613161447212,0.0987400481546935,0.3903426914608875,1.1033403138093587,-0.011937322816651639,0.5397426989511364,0.07048841706036114,-0.4151462408247057,0.8129108334670108,0.5703771365494301,-0.6159779724802674,-1.0012896759073482],[-0.1917792928296511,-0.15221035538519959,-0.20539087577929377,0.79408084647054,-1.0382099080718077,-0.7479183624264416,-1.1147772088843086,0.8328705352127451,0.08991267588461646,-0.2792687716605158,0.8280315307469218,0.6905978989033614,0.03509472946279032,-0.10844509491842805,-0.0788415872687176,-0.029373125762093028],[0.25421445305611134,0.6568168578943775,-1.0955864114796385,-0.26217046979954683,0.2966989322384944,-0.15793603135188197,0.611843068777493,0.8237714647118758,0.5580063636554093,0.8386764073072825,0.5557434951184128,0.2127378989689328,0.8326131386981507,1.5594454291954092,-0.7648198792832125,-0.7173028995101483],[0.27747061204800616,0.1668704390011923,-0.6454432344958565,0.5776302592327117,0.18077484633827975,-0.5036021125093462,-0.07334974388024934,-0.8714840823386248,-0.24351632876794993,2.0268484945945757,0.3690711106638404,-0.5847528651198769,0.4436923878106408,-1.0486404797271247,-0.15385945078748858,-0.004506854632388195],[-0.6724400973095833,-1.1273451700921397,-0.04225304650099165,1.0083157053246021,-0.28818689859004704,-0.8869417648357607,0.7726583747021494,1.4584582556560628,-0.05580651680164789,0.014699933775076314,0.14728522294944346,0.7780316884292828,-0.7181240983341237,-0.8202867810876078,-0.0724128164620455,0.648420877093246]]; const b1=[-0.27470432129874933,0.4271837732562095,0.45558340344684245,0.9449928916640291,-0.11895039131972798,-0.008193029273692282]; const W2=[[-0.3635698118022587,0.3992831898304602,0.6981275185782171,-1.3661798384423445,-0.5738813952976087,0.3290616751546045],[0.5807623121843646,-0.5931660557118807,0.3603963581063342,0.3481684087208521,-0.01419626357805917,0.27364143275240793],[0.7519935670805342,-0.05112958379846447,-0.1811554670945728,1.0759260487087772,0.4291654073335056,-0.9929589200477453],[-0.5107597648880844,-0.9680771425805603,0.09526831823412778,0.21770424968783858,-0.4772200075242546,-1.0237495217762187],[-0.41876441519648133,-0.3368280865923694,-0.8234859233756037,0.3335184024975114,0.5198038419758019,0.17089161149548446]]; const b2=[-0.18638933160882992,0.9191485063927187,-0.26774954126250616,0.8239645495884083,-0.13836312475194287];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.24686325620748656,0.160615737374639,-1.3249548787991046,-1.0113157065615972,0.16298110994213566,-0.5773242325386553,0.1911317596842404,-0.2566961879144123,-0.09751628265423401,-0.9223083768762622,-0.2178884159395408,-0.23712864856340424,0.1630586084723294,0.07865101927001099,1.450158168495282,-0.1763939045232254],[0.7005667807645326,-0.04029420841241632,-0.13145420526630386,-0.38531123445287774,-0.2997613161447212,0.0987400481546935,0.3903426914608875,1.1033403138093587,-0.011937322816651639,0.5397426989511364,0.07048841706036114,-0.4151462408247057,0.8129108334670108,0.5703771365494301,-0.6159779724802674,-1.0012896759073482],[-0.1917792928296511,-0.15221035538519959,-0.20539087577929377,0.79408084647054,-1.0382099080718077,-0.7479183624264416,-1.1147772088843086,0.8328705352127451,0.08991267588461646,-0.2792687716605158,0.8280315307469218,0.6905978989033614,0.03509472946279032,-0.10844509491842805,-0.0788415872687176,-0.029373125762093028],[0.25421445305611134,0.6568168578943775,-1.0955864114796385,-0.26217046979954683,0.2966989322384944,-0.15793603135188197,0.611843068777493,0.8237714647118758,0.5580063636554093,0.8386764073072825,0.5557434951184128,0.2127378989689328,0.8326131386981507,1.5594454291954092,-0.7648198792832125,-0.7173028995101483],[0.27747061204800616,0.1668704390011923,-0.6454432344958565,0.5776302592327117,0.18077484633827975,-0.5036021125093462,-0.07334974388024934,-0.8714840823386248,-0.24351632876794993,2.0268484945945757,0.3690711106638404,-0.5847528651198769,0.4436923878106408,-1.0486404797271247,-0.15385945078748858,-0.004506854632388195],[-0.6724400973095833,-1.1273451700921397,-0.04225304650099165,1.0083157053246021,-0.28818689859004704,-0.8869417648357607,0.7726583747021494,1.4584582556560628,-0.05580651680164789,0.014699933775076314,0.14728522294944346,0.7780316884292828,-0.7181240983341237,-0.8202867810876078,-0.0724128164620455,0.648420877093246]]; const b1=[-0.27470432129874933,0.4271837732562095,0.45558340344684245,0.9449928916640291,-0.11895039131972798,-0.008193029273692282]; const W2=[[-0.3635698118022587,0.3992831898304602,0.6981275185782171,-1.3661798384423445,-0.5738813952976087,0.3290616751546045],[0.5807623121843646,-0.5931660557118807,0.3603963581063342,0.3481684087208521,-0.01419626357805917,0.27364143275240793],[0.7519935670805342,-0.05112958379846447,-0.1811554670945728,1.0759260487087772,0.4291654073335056,-0.9929589200477453],[-0.5107597648880844,-0.9680771425805603,0.09526831823412778,0.21770424968783858,-0.4772200075242546,-1.0237495217762187],[-0.41876441519648133,-0.3368280865923694,-0.8234859233756037,0.3335184024975114,0.5198038419758019,0.17089161149548446]]; const b2=[-0.18638933160882992,0.9191485063927187,-0.26774954126250616,0.8239645495884083,-0.13836312475194287];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6586093137404105,-0.18837500320913386,-0.5448275555005955,-0.8907908781069598,-0.18051488570664104,-1.4894327519102908,0.11375141274952444,0.015952505746838763,-1.5040930366952878,-0.3038481422892731,-1.3323750798069456,0.49096927275075286,0.03772422237882902,0.3353650605803158,0.31810045603100345,-0.4308417356912121],[-0.40578419949464234,-0.5871442787408279,-0.3244724786891912,0.15859276923257828,-0.19250350204749112,0.9162987459795113,0.3094928036273609,-0.015414313251541911,-0.35957942092046097,-0.17098375252285636,-0.4557370084316275,-0.3097073804707393,-0.8089400965772882,-0.32088279931512387,-0.4993040810240495,-0.976550311993109],[0.27255996227284124,-0.04085015585126178,1.0568849480812244,-0.03418637799810867,-0.33513595971570087,1.1477155786982305,-0.8549899361277181,0.5935534022576302,-0.47317905913905545,1.0522816280309,0.4800446618895451,-0.06807236992395355,0.9741853245596648,0.9592672565246384,-0.28856299021457266,-1.1651119110144386],[0.1385436011325083,0.4099157745538532,-0.28318320705626676,-0.09731199791855813,-0.4976332120305074,-0.4127482292712157,-0.20695816803262201,0.4190567304365849,-1.9591447480820865,-1.504386669755818,-0.828064235123867,0.8519625295783353,-0.0360724478137376,0.23348031769528,-0.31199164649024147,-0.373443646062172],[0.902184299413418,0.1618119493397815,-1.3568061178398287,0.436727242856489,0.7110635773841976,-0.9634862852644709,-0.4150399496848561,-1.1617774278013715,-0.42708633978542604,0.89437400603035,-0.19349803190378256,-0.33323346994490666,-0.8875844365104741,0.5563206294379074,0.5212338752830689,0.16770502281515837],[0.24007476455107604,-0.9815598324743637,1.3477259605139582,0.06893941751523111,1.1322204335514428,0.3847008017002097,0.5942752237365178,0.38868715985284313,-0.42301130837663325,-0.278376132249841,-0.17622909271464876,0.4812456464760494,0.3977246115847375,0.5630978352617231,0.589643154317276,-0.8202860910951413]]; const b1=[1.0822121654664516,-0.13496276200362317,0.02232833407185262,-0.17632644155881158,0.3580715730862191,-0.6818148223570688]; const W2=[[1.023859524843844,-0.601978344399237,-0.697145320834077,0.38803114596924493,-0.6718429874114009,0.058184864040233625],[0.0759068953032147,-0.8301622026491509,0.5060242188106445,-0.34382985757546175,-1.3580550210719957,0.5018029780952735],[-0.9534343752127629,0.8423778450285638,0.31088249900001097,-0.602929894399208,-0.21019685242018496,0.3590012106509637],[-0.0826889294650146,-0.5119623929712827,0.12873147880853286,0.07719197354877613,-0.5773855477183942,-0.2727660022756265],[0.8747634156909015,-1.5166901018305645,-0.16417041135510133,-0.22307425844254358,1.3225829360600734,0.36266930946358]]; const b2=[-0.051123352410318956,0.17630400145295966,-0.2626656976775894,0.5241515796461195,0.38900714721838026];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6586093137404105,-0.18837500320913386,-0.5448275555005955,-0.8907908781069598,-0.18051488570664104,-1.4894327519102908,0.11375141274952444,0.015952505746838763,-1.5040930366952878,-0.3038481422892731,-1.3323750798069456,0.49096927275075286,0.03772422237882902,0.3353650605803158,0.31810045603100345,-0.4308417356912121],[-0.40578419949464234,-0.5871442787408279,-0.3244724786891912,0.15859276923257828,-0.19250350204749112,0.9162987459795113,0.3094928036273609,-0.015414313251541911,-0.35957942092046097,-0.17098375252285636,-0.4557370084316275,-0.3097073804707393,-0.8089400965772882,-0.32088279931512387,-0.4993040810240495,-0.976550311993109],[0.27255996227284124,-0.04085015585126178,1.0568849480812244,-0.03418637799810867,-0.33513595971570087,1.1477155786982305,-0.8549899361277181,0.5935534022576302,-0.47317905913905545,1.0522816280309,0.4800446618895451,-0.06807236992395355,0.9741853245596648,0.9592672565246384,-0.28856299021457266,-1.1651119110144386],[0.1385436011325083,0.4099157745538532,-0.28318320705626676,-0.09731199791855813,-0.4976332120305074,-0.4127482292712157,-0.20695816803262201,0.4190567304365849,-1.9591447480820865,-1.504386669755818,-0.828064235123867,0.8519625295783353,-0.0360724478137376,0.23348031769528,-0.31199164649024147,-0.373443646062172],[0.902184299413418,0.1618119493397815,-1.3568061178398287,0.436727242856489,0.7110635773841976,-0.9634862852644709,-0.4150399496848561,-1.1617774278013715,-0.42708633978542604,0.89437400603035,-0.19349803190378256,-0.33323346994490666,-0.8875844365104741,0.5563206294379074,0.5212338752830689,0.16770502281515837],[0.24007476455107604,-0.9815598324743637,1.3477259605139582,0.06893941751523111,1.1322204335514428,0.3847008017002097,0.5942752237365178,0.38868715985284313,-0.42301130837663325,-0.278376132249841,-0.17622909271464876,0.4812456464760494,0.3977246115847375,0.5630978352617231,0.589643154317276,-0.8202860910951413]]; const b1=[1.0822121654664516,-0.13496276200362317,0.02232833407185262,-0.17632644155881158,0.3580715730862191,-0.6818148223570688]; const W2=[[1.023859524843844,-0.601978344399237,-0.697145320834077,0.38803114596924493,-0.6718429874114009,0.058184864040233625],[0.0759068953032147,-0.8301622026491509,0.5060242188106445,-0.34382985757546175,-1.3580550210719957,0.5018029780952735],[-0.9534343752127629,0.8423778450285638,0.31088249900001097,-0.602929894399208,-0.21019685242018496,0.3590012106509637],[-0.0826889294650146,-0.5119623929712827,0.12873147880853286,0.07719197354877613,-0.5773855477183942,-0.2727660022756265],[0.8747634156909015,-1.5166901018305645,-0.16417041135510133,-0.22307425844254358,1.3225829360600734,0.36266930946358]]; const b2=[-0.051123352410318956,0.17630400145295966,-0.2626656976775894,0.5241515796461195,0.38900714721838026];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.6586093137404105,-0.18837500320913386,-0.5448275555005955,-0.8907908781069598,-0.18051488570664104,-1.4894327519102908,0.11375141274952444,0.015952505746838763,-1.5040930366952878,-0.3038481422892731,-1.3323750798069456,0.49096927275075286,0.03772422237882902,0.3353650605803158,0.31810045603100345,-0.4308417356912121],[-0.40578419949464234,-0.5871442787408279,-0.3244724786891912,0.15859276923257828,-0.19250350204749112,0.9162987459795113,0.3094928036273609,-0.015414313251541911,-0.35957942092046097,-0.17098375252285636,-0.4557370084316275,-0.3097073804707393,-0.8089400965772882,-0.32088279931512387,-0.4993040810240495,-0.976550311993109],[0.27255996227284124,-0.04085015585126178,1.0568849480812244,-0.03418637799810867,-0.33513595971570087,1.1477155786982305,-0.8549899361277181,0.5935534022576302,-0.47317905913905545,1.0522816280309,0.4800446618895451,-0.06807236992395355,0.9741853245596648,0.9592672565246384,-0.28856299021457266,-1.1651119110144386],[0.1385436011325083,0.4099157745538532,-0.28318320705626676,-0.09731199791855813,-0.4976332120305074,-0.4127482292712157,-0.20695816803262201,0.4190567304365849,-1.9591447480820865,-1.504386669755818,-0.828064235123867,0.8519625295783353,-0.0360724478137376,0.23348031769528,-0.31199164649024147,-0.373443646062172],[0.902184299413418,0.1618119493397815,-1.3568061178398287,0.436727242856489,0.7110635773841976,-0.9634862852644709,-0.4150399496848561,-1.1617774278013715,-0.42708633978542604,0.89437400603035,-0.19349803190378256,-0.33323346994490666,-0.8875844365104741,0.5563206294379074,0.5212338752830689,0.16770502281515837],[0.24007476455107604,-0.9815598324743637,1.3477259605139582,0.06893941751523111,1.1322204335514428,0.3847008017002097,0.5942752237365178,0.38868715985284313,-0.42301130837663325,-0.278376132249841,-0.17622909271464876,0.4812456464760494,0.3977246115847375,0.5630978352617231,0.589643154317276,-0.8202860910951413]]; const b1=[1.0822121654664516,-0.13496276200362317,0.02232833407185262,-0.17632644155881158,0.3580715730862191,-0.6818148223570688]; const W2=[[1.023859524843844,-0.601978344399237,-0.697145320834077,0.38803114596924493,-0.6718429874114009,0.058184864040233625],[0.0759068953032147,-0.8301622026491509,0.5060242188106445,-0.34382985757546175,-1.3580550210719957,0.5018029780952735],[-0.9534343752127629,0.8423778450285638,0.31088249900001097,-0.602929894399208,-0.21019685242018496,0.3590012106509637],[-0.0826889294650146,-0.5119623929712827,0.12873147880853286,0.07719197354877613,-0.5773855477183942,-0.2727660022756265],[0.8747634156909015,-1.5166901018305645,-0.16417041135510133,-0.22307425844254358,1.3225829360600734,0.36266930946358]]; const b2=[-0.051123352410318956,0.17630400145295966,-0.2626656976775894,0.5241515796461195,0.38900714721838026];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}