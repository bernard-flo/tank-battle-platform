function name(){return 'Atlas';}
function type(){return Type.NORMAL;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[0.04688833978510476,-0.654897992225889,1.4839630067977252,-0.4395855238110662,-0.4090252770289646,0.6942706158351641,-0.5679516207513003,-0.46175290030634353,0.32389109082051665,-0.07908965546010703,0.10762091192002869,0.35238206176214665,-1.5097926644022355,0.13856353505916646,-0.6525180437727375,-0.2011086656974544],[-1.550131390066049,-0.3518297693408422,-0.09344023419448304,-0.7428268745977102,-0.7649577620462987,0.4478124322868247,0.2885043784162627,1.0793821336410685,0.9475493965986248,1.1856050137054452,0.11500172645648,0.09733466247049415,0.13815560325249315,0.6830089412170902,0.3994805287149634,-0.9771950167141583],[0.7272174483167295,-0.5867608287027644,0.2899057676557123,0.391993735676682,-0.3102841181513889,-1.172910028067,0.39017997655685427,1.0381399354045142,0.6863901271615523,0.42995302796584656,-0.11402137756990614,0.10709243890589662,-2.216768143417243,0.2337773150720962,-0.7103999116086119,1.0276304502499682],[-1.2224074503977187,0.05445277092647355,1.1594991444068647,-0.2975668915995981,0.2824733106912644,0.7188190314706733,0.529415465368267,0.1741255673033928,0.7756914100228957,1.2064282849793952,-0.40070690934215736,-0.32851285540490216,-1.0682892984864258,-0.4713922512046778,0.44296023903958687,-0.9123771181941149],[-2.818670612083458,0.31394806306814893,0.057421433680434925,0.9303531735550514,-0.5038920173828103,-0.19689567657498674,0.5659216004531064,0.013092569062695961,0.8426539182149729,-0.22678200761299666,-0.3270849434479187,0.9264625960069097,0.5013855844748285,-0.9310055762487426,-0.7205146907614853,0.6604574955223921],[-0.7210202443759449,-0.6689597899743253,-0.6801105554769593,0.9906651171460151,-2.890254175177427,-0.6671912050788152,-0.6386305410895028,1.0609806226997294,1.2532948910878638,-0.4926867450396599,-0.7307567377043638,-0.4258931310941834,0.429275135521286,0.891727322837918,0.10010796917576242,-0.4218211096266047]]; const b1=[0.10818493363163853,0.5518162424300219,0.022265186032852588,-1.0066371457196865,-0.9362457529153547,0.14744847352238866]; const W2=[[0.5531732175516902,-0.9424936560938985,0.7808780305205448,-0.027651973520988637,0.49151505279564367,-1.2599995709644616],[0.9140776762071975,-0.03690818059961545,1.191946428360074,-0.11463184195232576,-0.7534534315298703,-0.9184536202718019],[-0.7713651712695959,1.8866436733954706,-0.4843191404661263,1.273106533937338,0.9731379305561161,1.5422141181551385],[-1.2811882103529282,1.2915519309368755,0.40626681952314425,1.812011330303507,0.44800101858358987,-0.13549992029437527],[0.7904658097166648,-0.9560867891543723,-0.17248861508126934,0.40133416999627497,-1.1185074350676922,-0.33188663418145614]]; const b2=[0.16871148745819145,1.171756777929539,0.2673703346753336,0.304114312880655,0.2824324322418805];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Bulwark';}
function type(){return Type.TANKER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-0.5670520440181651,-0.4503924363537477,0.3463559864666386,0.9582247009913227,-1.1421161536032673,0.7345440541525226,0.48956137986431436,-0.8797575581963701,0.03670552735952751,-0.5691010299830742,0.7132422705632036,0.11136525218606866,0.4606321660594678,0.44152672951127786,-0.19762621708566724,0.9670863567207388],[-0.6063266564612523,-0.2457616731209201,0.35292395126036635,0.9863368338782391,0.07974674028913128,-0.48081754876389826,0.05601189836797235,0.10113963638212811,0.8115938398391439,0.30275701392517673,0.3585549230885866,-0.6070280171657159,0.6878932072097502,0.8313487194346113,0.24615466905031813,-1.1869128529193034],[-1.4170537012531736,0.12815692006667284,-2.1668076619558194,1.1797027117264047,0.7414097075021819,-2.101956208304705,-1.8019329947943468,0.7326704362372349,-0.017105674160810644,0.16216403131623783,1.0779103089796254,0.9761536819705963,1.003566494135831,-0.14819915189703517,-0.227670695144889,-1.740616439354584],[0.7519617300336554,-0.13184482510805645,-0.03885433143145681,0.29860076242007083,0.49654126145629107,1.1122395144266426,-0.4661543014944049,1.1454813251657383,0.23209437139224415,-0.4561057596719446,-1.3393367084475265,1.2323154257182247,-1.0301367881051853,0.9311707693202226,1.890037348144491,0.11370625196203339],[0.49338026529653645,-1.1241090834407128,-0.022975430181938983,-0.009332621860056903,1.1995660111417166,0.3194218716752942,-0.09381000531776522,0.7422264622131984,0.849499811118481,-0.3519283760104322,1.182811080168923,-1.1648191237273382,-0.3813772810894725,1.7009371325686884,-0.02735871640502585,-0.923360858428942],[0.9812312718675678,0.44423654126889506,-0.6303758001357929,-0.3129213200227155,-0.6546257729319245,-0.596093618128533,0.4022123481194342,2.2174369182741045,0.893885912858736,-0.3761664324957629,0.24871815538107447,0.4191351949490834,-1.2957149217079147,0.07286108102526849,0.18296487006278983,0.9959852120843098]]; const b1=[-1.0142212169434333,0.586476506750621,-0.0036644161345725495,-0.42410032256915237,-0.7978277029652108,-0.3882219709320141]; const W2=[[-0.6808682077475852,-0.14619006020909442,0.9754753640615178,0.6111730867309649,0.1399390321300887,-1.376456891592087],[-0.5785068429867799,1.1262422517770447,0.13594793651522008,0.1282143651178222,-0.33963420258967053,-0.36079438665599156],[1.7589603678923156,0.5031652603397051,0.07948126239782584,0.8873227789591698,0.48612919710007507,-0.7357750856626799],[0.008311796952877211,-0.6645076768524365,1.0669454115259962,0.26720998627820475,0.45281655377930274,-1.2953922169164522],[1.12302039840397,0.18216321320088485,0.187580256526897,-0.5305937647131663,1.7024452779672006,-0.08104225214379254]]; const b2=[-0.5504127976464819,0.17303237516714376,0.518486764785507,0.08500754273544088,0.573349277505533];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Viper';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.4148810208232672,1.3784363083131859,0.8371403536372579,0.8628721065448,-0.828358967665086,1.3764104871747467,-0.3140578696808634,-1.8136962335253302,-0.9513216815093832,0.2816759826145835,-0.023066763689565582,0.35881710513178033,0.24961523410519304,0.22667253569410603,0.11784278509394058,0.7021388701729098],[0.2241437544407994,-0.7619671216455087,-0.9608505786692401,-0.5975646206693572,-0.48665843365379985,-0.1371532819907464,0.9270315684381885,-0.41034668552906484,0.63450022593984,0.14296374875206364,0.4993704603347209,0.2666652726753262,-0.3201075476770191,-0.4549598190875339,0.2995966366358194,-1.1891160631883348],[0.9046702828755977,-0.1669603258625672,0.7465497850540334,-0.06723296416543434,-0.5957003722176792,-0.10107506039839093,-0.07000652687596993,0.05608523451276065,0.24381274336628306,-0.725136318121336,1.3432822017844448,0.07731197457658853,-2.054619875522586,0.7971848903210523,-0.5433067164069786,-0.2365094050155657],[0.5522330182826855,-0.026369941234039976,-0.2662924303547083,-0.7936162805289627,-2.5906134232255376,1.1445564206628611,0.7601997433026357,0.3374713445354566,-1.1128681864288705,-1.7014319361558357,-0.3589208166027549,-0.5010445943889199,-0.09450119200794214,0.0838577326700168,0.23684684489537428,-0.7924798873830785],[0.03384711595407159,-1.985549779453546,-0.862226081061449,0.4108801800276863,0.3088208530025712,1.3678293402086381,-0.9712766469045522,-0.2199229455940231,0.9873195845563241,0.3397701776821467,-0.3346271476354936,-0.28852612227102137,0.9385872446111173,0.5526900466664533,-0.22971217760482365,-0.156112021662209],[2.151462271709893,1.4733901695928082,0.5969151191677289,-0.7999521987106185,0.4593424965081334,0.9619149056168047,-0.6849720803058645,-1.4976632767201197,-0.5471340589735632,-0.025453651950057776,-0.5384486731837685,-0.4233810899674705,0.35053454757029434,1.4384122085664588,-1.6571586434828145,-0.12527444769587426]]; const b1=[-0.33128122708996977,1.259072172593793,-0.5184146767097801,0.06973105147058896,-0.5490975124190136,-0.4841747095898529]; const W2=[[0.21401623069524806,-1.4833447922500314,-1.0248963787261,1.044754067193432,0.41544327473401,0.8157468510901358],[0.2641688458574705,-0.06972449293666211,0.7551564533968727,-0.021690139661891726,-1.0247531790191768,-0.7726818288489405],[-0.1464561786440129,-0.12721957513935717,0.19475498546428954,0.06266254887463842,0.24686579237295025,0.3439630273653008],[0.3270378397965011,0.7558564708842597,0.19074490633194485,-0.8598977112448611,0.5767947027885982,0.08115781735178296],[0.3086511938517667,-0.6784134010827504,0.16656826459142415,-0.5549273485723332,2.1454496715342497,-0.04512834691630503]]; const b2=[0.18108007020897127,-0.15873294571138125,-0.8331467183038913,-0.43161430883041374,-0.6771220662459438];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Falcon';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.4148810208232672,1.3784363083131859,0.8371403536372579,0.8628721065448,-0.828358967665086,1.3764104871747467,-0.3140578696808634,-1.8136962335253302,-0.9513216815093832,0.2816759826145835,-0.023066763689565582,0.35881710513178033,0.24961523410519304,0.22667253569410603,0.11784278509394058,0.7021388701729098],[0.2241437544407994,-0.7619671216455087,-0.9608505786692401,-0.5975646206693572,-0.48665843365379985,-0.1371532819907464,0.9270315684381885,-0.41034668552906484,0.63450022593984,0.14296374875206364,0.4993704603347209,0.2666652726753262,-0.3201075476770191,-0.4549598190875339,0.2995966366358194,-1.1891160631883348],[0.9046702828755977,-0.1669603258625672,0.7465497850540334,-0.06723296416543434,-0.5957003722176792,-0.10107506039839093,-0.07000652687596993,0.05608523451276065,0.24381274336628306,-0.725136318121336,1.3432822017844448,0.07731197457658853,-2.054619875522586,0.7971848903210523,-0.5433067164069786,-0.2365094050155657],[0.5522330182826855,-0.026369941234039976,-0.2662924303547083,-0.7936162805289627,-2.5906134232255376,1.1445564206628611,0.7601997433026357,0.3374713445354566,-1.1128681864288705,-1.7014319361558357,-0.3589208166027549,-0.5010445943889199,-0.09450119200794214,0.0838577326700168,0.23684684489537428,-0.7924798873830785],[0.03384711595407159,-1.985549779453546,-0.862226081061449,0.4108801800276863,0.3088208530025712,1.3678293402086381,-0.9712766469045522,-0.2199229455940231,0.9873195845563241,0.3397701776821467,-0.3346271476354936,-0.28852612227102137,0.9385872446111173,0.5526900466664533,-0.22971217760482365,-0.156112021662209],[2.151462271709893,1.4733901695928082,0.5969151191677289,-0.7999521987106185,0.4593424965081334,0.9619149056168047,-0.6849720803058645,-1.4976632767201197,-0.5471340589735632,-0.025453651950057776,-0.5384486731837685,-0.4233810899674705,0.35053454757029434,1.4384122085664588,-1.6571586434828145,-0.12527444769587426]]; const b1=[-0.33128122708996977,1.259072172593793,-0.5184146767097801,0.06973105147058896,-0.5490975124190136,-0.4841747095898529]; const W2=[[0.21401623069524806,-1.4833447922500314,-1.0248963787261,1.044754067193432,0.41544327473401,0.8157468510901358],[0.2641688458574705,-0.06972449293666211,0.7551564533968727,-0.021690139661891726,-1.0247531790191768,-0.7726818288489405],[-0.1464561786440129,-0.12721957513935717,0.19475498546428954,0.06266254887463842,0.24686579237295025,0.3439630273653008],[0.3270378397965011,0.7558564708842597,0.19074490633194485,-0.8598977112448611,0.5767947027885982,0.08115781735178296],[0.3086511938517667,-0.6784134010827504,0.16656826459142415,-0.5549273485723332,2.1454496715342497,-0.04512834691630503]]; const b2=[0.18108007020897127,-0.15873294571138125,-0.8331467183038913,-0.43161430883041374,-0.6771220662459438];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Raptor';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.4148810208232672,1.3784363083131859,0.8371403536372579,0.8628721065448,-0.828358967665086,1.3764104871747467,-0.3140578696808634,-1.8136962335253302,-0.9513216815093832,0.2816759826145835,-0.023066763689565582,0.35881710513178033,0.24961523410519304,0.22667253569410603,0.11784278509394058,0.7021388701729098],[0.2241437544407994,-0.7619671216455087,-0.9608505786692401,-0.5975646206693572,-0.48665843365379985,-0.1371532819907464,0.9270315684381885,-0.41034668552906484,0.63450022593984,0.14296374875206364,0.4993704603347209,0.2666652726753262,-0.3201075476770191,-0.4549598190875339,0.2995966366358194,-1.1891160631883348],[0.9046702828755977,-0.1669603258625672,0.7465497850540334,-0.06723296416543434,-0.5957003722176792,-0.10107506039839093,-0.07000652687596993,0.05608523451276065,0.24381274336628306,-0.725136318121336,1.3432822017844448,0.07731197457658853,-2.054619875522586,0.7971848903210523,-0.5433067164069786,-0.2365094050155657],[0.5522330182826855,-0.026369941234039976,-0.2662924303547083,-0.7936162805289627,-2.5906134232255376,1.1445564206628611,0.7601997433026357,0.3374713445354566,-1.1128681864288705,-1.7014319361558357,-0.3589208166027549,-0.5010445943889199,-0.09450119200794214,0.0838577326700168,0.23684684489537428,-0.7924798873830785],[0.03384711595407159,-1.985549779453546,-0.862226081061449,0.4108801800276863,0.3088208530025712,1.3678293402086381,-0.9712766469045522,-0.2199229455940231,0.9873195845563241,0.3397701776821467,-0.3346271476354936,-0.28852612227102137,0.9385872446111173,0.5526900466664533,-0.22971217760482365,-0.156112021662209],[2.151462271709893,1.4733901695928082,0.5969151191677289,-0.7999521987106185,0.4593424965081334,0.9619149056168047,-0.6849720803058645,-1.4976632767201197,-0.5471340589735632,-0.025453651950057776,-0.5384486731837685,-0.4233810899674705,0.35053454757029434,1.4384122085664588,-1.6571586434828145,-0.12527444769587426]]; const b1=[-0.33128122708996977,1.259072172593793,-0.5184146767097801,0.06973105147058896,-0.5490975124190136,-0.4841747095898529]; const W2=[[0.21401623069524806,-1.4833447922500314,-1.0248963787261,1.044754067193432,0.41544327473401,0.8157468510901358],[0.2641688458574705,-0.06972449293666211,0.7551564533968727,-0.021690139661891726,-1.0247531790191768,-0.7726818288489405],[-0.1464561786440129,-0.12721957513935717,0.19475498546428954,0.06266254887463842,0.24686579237295025,0.3439630273653008],[0.3270378397965011,0.7558564708842597,0.19074490633194485,-0.8598977112448611,0.5767947027885982,0.08115781735178296],[0.3086511938517667,-0.6784134010827504,0.16656826459142415,-0.5549273485723332,2.1454496715342497,-0.04512834691630503]]; const b2=[0.18108007020897127,-0.15873294571138125,-0.8331467183038913,-0.43161430883041374,-0.6771220662459438];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}

// ===== 다음 로봇 =====

function name(){return 'Sage';}
function type(){return Type.DEALER;}
function update(tank,enemies,allies,bulletInfo){
  function ang(a){return (a+360)%360;} function deg(x,y){return Math.atan2(y,x)*180/Math.PI;} function clamp(v,a,b){return Math.max(a,Math.min(b,v));}
  function mlp(x,W1,b1,W2,b2){const h=b1.map((bi,j)=>Math.tanh(bi+x.reduce((s,xi,i)=>s+xi*W1[j][i],0)));return b2.map((bo,k)=>bo+h.reduce((s,hj,j)=>s+hj*W2[k][j],0));}
  const W=900,H=600;
  let nx=null, nd=1e9, ex=0,ey=0; for(const e of enemies){ if(e.distance<nd){nd=e.distance; nx=e;} ex+=e.x; ey+=e.y; }
  const ecx=(ex/Math.max(1,enemies.length)||tank.x)-tank.x, ecy=(ey/Math.max(1,enemies.length)||tank.y)-tank.y; const ecd=Math.hypot(ecx,ecy)+1e-6;
  let ax=0,ay=0; for(const a of allies){ax+=a.x; ay+=a.y;} ax/=Math.max(1,allies.length); ay/=Math.max(1,allies.length); const acx=(ax||tank.x)-tank.x, acy=(ay||tank.y)-tank.y; const acd=Math.hypot(acx,acy)+1e-6;
  let evx=0,evy=0,th=0; for(const b of bulletInfo){ const rx=b.x-tank.x, ry=b.y-tank.y; const d=Math.hypot(rx,ry)+1e-6; const bv=Math.hypot(b.vx,b.vy)+1e-6; const ux=b.vx/bv, uy=b.vy/bv; const closing=-(rx*ux+ry*uy)/d; if(closing>0){ const px=-uy, py=ux; const w=closing/(1+0.07*d); evx+=px*w; evy+=py*w; th+=w; }} const en=Math.hypot(evx,evy)+1e-6; evx/=en; evy/=en;
  let wx=0,wy=0; const m=60; if(tank.x<m) wx+=1- tank.x/m; if(W-tank.x<m) wx-=1- (W-tank.x)/m; if(tank.y<m) wy+=1- tank.y/m; if(H-tank.y<m) wy-=1- (H-tank.y)/m; const wn=Math.hypot(wx,wy)+1e-6; wx/=wn; wy/=wn;
  const t0 = tank.type===0?1:0, t1=tank.type===1?1:0, t2=tank.type===2?1:0;
  const inVec=[ tank.x/W*2-1, tank.y/H*2-1, Math.tanh(tank.health/150), t0,t1,t2, Math.tanh(nd/400), (nx?((nx.x-tank.x)/Math.max(1,nd)):0), (nx?((nx.y-tank.y)/Math.max(1,nd)):0), ecx/ecd, ecy/ecd, acx/acd, acy/acd, Math.tanh(th), wx, wy ];
  const W1=[[-1.4148810208232672,1.3784363083131859,0.8371403536372579,0.8628721065448,-0.828358967665086,1.3764104871747467,-0.3140578696808634,-1.8136962335253302,-0.9513216815093832,0.2816759826145835,-0.023066763689565582,0.35881710513178033,0.24961523410519304,0.22667253569410603,0.11784278509394058,0.7021388701729098],[0.2241437544407994,-0.7619671216455087,-0.9608505786692401,-0.5975646206693572,-0.48665843365379985,-0.1371532819907464,0.9270315684381885,-0.41034668552906484,0.63450022593984,0.14296374875206364,0.4993704603347209,0.2666652726753262,-0.3201075476770191,-0.4549598190875339,0.2995966366358194,-1.1891160631883348],[0.9046702828755977,-0.1669603258625672,0.7465497850540334,-0.06723296416543434,-0.5957003722176792,-0.10107506039839093,-0.07000652687596993,0.05608523451276065,0.24381274336628306,-0.725136318121336,1.3432822017844448,0.07731197457658853,-2.054619875522586,0.7971848903210523,-0.5433067164069786,-0.2365094050155657],[0.5522330182826855,-0.026369941234039976,-0.2662924303547083,-0.7936162805289627,-2.5906134232255376,1.1445564206628611,0.7601997433026357,0.3374713445354566,-1.1128681864288705,-1.7014319361558357,-0.3589208166027549,-0.5010445943889199,-0.09450119200794214,0.0838577326700168,0.23684684489537428,-0.7924798873830785],[0.03384711595407159,-1.985549779453546,-0.862226081061449,0.4108801800276863,0.3088208530025712,1.3678293402086381,-0.9712766469045522,-0.2199229455940231,0.9873195845563241,0.3397701776821467,-0.3346271476354936,-0.28852612227102137,0.9385872446111173,0.5526900466664533,-0.22971217760482365,-0.156112021662209],[2.151462271709893,1.4733901695928082,0.5969151191677289,-0.7999521987106185,0.4593424965081334,0.9619149056168047,-0.6849720803058645,-1.4976632767201197,-0.5471340589735632,-0.025453651950057776,-0.5384486731837685,-0.4233810899674705,0.35053454757029434,1.4384122085664588,-1.6571586434828145,-0.12527444769587426]]; const b1=[-0.33128122708996977,1.259072172593793,-0.5184146767097801,0.06973105147058896,-0.5490975124190136,-0.4841747095898529]; const W2=[[0.21401623069524806,-1.4833447922500314,-1.0248963787261,1.044754067193432,0.41544327473401,0.8157468510901358],[0.2641688458574705,-0.06972449293666211,0.7551564533968727,-0.021690139661891726,-1.0247531790191768,-0.7726818288489405],[-0.1464561786440129,-0.12721957513935717,0.19475498546428954,0.06266254887463842,0.24686579237295025,0.3439630273653008],[0.3270378397965011,0.7558564708842597,0.19074490633194485,-0.8598977112448611,0.5767947027885982,0.08115781735178296],[0.3086511938517667,-0.6784134010827504,0.16656826459142415,-0.5549273485723332,2.1454496715342497,-0.04512834691630503]]; const b2=[0.18108007020897127,-0.15873294571138125,-0.8331467183038913,-0.43161430883041374,-0.6771220662459438];
  const o=mlp(inVec,W1,b1,W2,b2); let wEv=Math.max(0,o[0]), wAt=Math.max(0,o[1]), wOb=Math.max(0,o[2]), wWall=Math.max(0,o[3]); const s=wEv+wAt+wOb+wWall+1e-6; wEv/=s; wAt/=s; wOb/=s; wWall/=s; const aimLead=o[4];
  const atx = (nx?((nx.x-tank.x)/Math.max(1e-6,nd)): (ecx/ecd)), aty=(nx?((nx.y-tank.y)/Math.max(1e-6,nd)):(ecy/ecd)); const obx=-aty, oby=atx;
  const mvx=evx*wEv + atx*wAt + obx*wOb + wx*wWall, mvy=evy*wEv + aty*wAt + oby*wOb + wy*wWall; const mvAng=deg(mvx,mvy);
  if(nx){ const aim=deg(nx.x-tank.x, nx.y-tank.y); const lead=Math.max(-12,Math.min(16,aimLead)); tank.fire(ang(aim+lead)); }
  if(!tank.move(ang(mvAng))){ if(!tank.move(ang(mvAng+70))){ if(!tank.move(ang(mvAng-70))){ tank.move(Math.random()*360); }}}
}